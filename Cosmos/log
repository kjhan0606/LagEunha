make libcosmology.a
make[1]: Entering directory `/scratch/kjhan/AdvancedEunha/Eunha.A1/Cosmos'
mpicc -g   -E -DINTEL   -DGOTPM  -DDEBUG  -I. -I../ -I/home/kjhan/local/include/ -I../MpiAux -I../RMS -I./CosmosIC -I../Timer -I../OST -I../DenRW -I../Params -c PreFoF.c
# 1 "PreFoF.c"
# 1 "/usr/include/stdio.h" 1 3

















 



 



# 1 "/usr/include/features.h" 1 3

















 






































































 


 
# 114 "/usr/include/features.h" 3


 




 








 
# 137 "/usr/include/features.h" 3


 
# 146 "/usr/include/features.h" 3

 
# 168 "/usr/include/features.h" 3


 
# 178 "/usr/include/features.h" 3




 






 
# 201 "/usr/include/features.h" 3





















# 240 "/usr/include/features.h" 3





































# 293 "/usr/include/features.h" 3

 



 







 




 






 
# 325 "/usr/include/features.h" 3

 
# 1 "/usr/include/sys/cdefs.h" 1 3

















 




 






 




 









 
# 58 "/usr/include/sys/cdefs.h" 3

# 71 "/usr/include/sys/cdefs.h" 3


 




 




 




 
# 96 "/usr/include/sys/cdefs.h" 3






 
# 111 "/usr/include/sys/cdefs.h" 3


 
# 121 "/usr/include/sys/cdefs.h" 3


 







 





 

 
# 153 "/usr/include/sys/cdefs.h" 3










 



# 177 "/usr/include/sys/cdefs.h" 3






 




 






 








 








 
# 221 "/usr/include/sys/cdefs.h" 3

 











 









 
# 251 "/usr/include/sys/cdefs.h" 3


 







 
# 274 "/usr/include/sys/cdefs.h" 3

 









 




 






 
# 312 "/usr/include/sys/cdefs.h" 3

# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 314 "/usr/include/sys/cdefs.h" 2 3

# 337 "/usr/include/sys/cdefs.h" 3

# 330 "/usr/include/features.h" 2 3



 







 









 
# 1 "/usr/include/gnu/stubs.h" 1 3

 

# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 5 "/usr/include/gnu/stubs.h" 2 3

# 1 "/usr/include/gnu/stubs-64.h" 1 3



 





# 10 "/usr/include/gnu/stubs.h" 2 3
# 353 "/usr/include/features.h" 2 3


# 29 "/usr/include/stdio.h" 2 3



# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 


typedef long ptrdiff_t;




typedef unsigned long	size_t;






typedef int	wchar_t;



# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 35 "/usr/include/stdio.h" 2 3

# 1 "/usr/include/bits/types.h" 1 3

















 



 




# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 29 "/usr/include/bits/types.h" 2 3

# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 32 "/usr/include/bits/types.h" 2 3

 
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;

 
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;





 

typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 71 "/usr/include/bits/types.h" 3





























 

# 129 "/usr/include/bits/types.h" 3
 
# 1 "/usr/include/bits/typesizes.h" 1 3

















 









 

# 61 "/usr/include/bits/typesizes.h" 3

 



# 135 "/usr/include/bits/types.h" 2 3


typedef unsigned long int __dev_t;	 
typedef unsigned int __uid_t;	 
typedef unsigned int __gid_t;	 
typedef unsigned long int __ino_t;	 
typedef unsigned long int __ino64_t;	 
typedef unsigned int __mode_t;	 
typedef unsigned long int __nlink_t;	 
typedef long int __off_t;	 
typedef long int __off64_t;	 
typedef int __pid_t;	 
typedef struct { int __val[2]; } __fsid_t;	 
typedef long int __clock_t;	 
typedef unsigned long int __rlim_t;	 
typedef unsigned long int __rlim64_t;	 
typedef unsigned int __id_t;		 
typedef long int __time_t;	 
typedef unsigned int __useconds_t;  
typedef long int __suseconds_t;  

typedef int __daddr_t;	 
typedef long int __swblk_t;	 
typedef int __key_t;	 

 
typedef int __clockid_t;

 
typedef void * __timer_t;

 
typedef long int __blksize_t;

 

 
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;

 
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;

 
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;  


 
typedef __off64_t __loff_t;	 
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;

 
typedef long int __intptr_t;

 
typedef unsigned int __socklen_t;




# 37 "/usr/include/stdio.h" 2 3








 
typedef struct _IO_FILE FILE;














 
typedef struct _IO_FILE __FILE;









# 1 "/usr/include/libio.h" 1 3


























 




# 1 "/usr/include/_G_config.h" 1 3

 




 

# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3








typedef unsigned int wint_t;










   
# 15 "/usr/include/_G_config.h" 2 3
# 1 "/usr/include/wchar.h" 1 3
















 




 








# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 49 "/usr/include/wchar.h" 2 3

# 1 "/usr/include/bits/wchar.h" 1 3

















 







# 51 "/usr/include/wchar.h" 2 3


 
# 62 "/usr/include/wchar.h" 3

 
# 71 "/usr/include/wchar.h" 3




 
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;		 
} __mbstate_t;





 
# 861 "/usr/include/wchar.h" 3

# 25 "/usr/include/_G_config.h" 2 3

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 1 "/usr/include/gconv.h" 1 3
















 



 




# 1 "/usr/include/wchar.h" 1 3
















 




 








# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 49 "/usr/include/wchar.h" 2 3




 
# 62 "/usr/include/wchar.h" 3

 
# 71 "/usr/include/wchar.h" 3


# 87 "/usr/include/wchar.h" 3



 
# 861 "/usr/include/wchar.h" 3

# 29 "/usr/include/gconv.h" 2 3
# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 32 "/usr/include/gconv.h" 2 3

 


 
enum
{
  __GCONV_OK = 0,
  __GCONV_NOCONV,
  __GCONV_NODB,
  __GCONV_NOMEM,

  __GCONV_EMPTY_INPUT,
  __GCONV_FULL_OUTPUT,
  __GCONV_ILLEGAL_INPUT,
  __GCONV_INCOMPLETE_INPUT,

  __GCONV_ILLEGAL_DESCRIPTOR,
  __GCONV_INTERNAL_ERROR
};


 
enum
{
  __GCONV_IS_LAST = 0x0001,
  __GCONV_IGNORE_ERRORS = 0x0002
};


 
struct __gconv_step;
struct __gconv_step_data;
struct __gconv_loaded_object;
struct __gconv_trans_data;


 
typedef int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
			    __const unsigned char **, __const unsigned char *,
			    unsigned char **, size_t *, int, int);

 
typedef wint_t (*__gconv_btowc_fct) (struct __gconv_step *, unsigned char);

 
typedef int (*__gconv_init_fct) (struct __gconv_step *);
typedef void (*__gconv_end_fct) (struct __gconv_step *);


 
typedef int (*__gconv_trans_fct) (struct __gconv_step *,
				  struct __gconv_step_data *, void *,
				  __const unsigned char *,
				  __const unsigned char **,
				  __const unsigned char *, unsigned char **,
				  size_t *);

 
typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,
					  __const unsigned char *,
					  unsigned char *, unsigned char *);

 
typedef int (*__gconv_trans_query_fct) (__const char *, __const char ***,
					size_t *);

 
typedef int (*__gconv_trans_init_fct) (void **, const char *);
typedef void (*__gconv_trans_end_fct) (void *);

struct __gconv_trans_data
{
   
  __gconv_trans_fct __trans_fct;
  __gconv_trans_context_fct __trans_context_fct;
  __gconv_trans_end_fct __trans_end_fct;
  void *__data;
  struct __gconv_trans_data *__next;
};


 
struct __gconv_step
{
  struct __gconv_loaded_object *__shlib_handle;
  __const char *__modname;

  int __counter;

  char *__from_name;
  char *__to_name;

  __gconv_fct __fct;
  __gconv_btowc_fct __btowc_fct;
  __gconv_init_fct __init_fct;
  __gconv_end_fct __end_fct;

  
 
  int __min_needed_from;
  int __max_needed_from;
  int __min_needed_to;
  int __max_needed_to;

   
  int __stateful;

  void *__data;		 
};


 
struct __gconv_step_data
{
  unsigned char *__outbuf;     
  unsigned char *__outbufend; 
 

   
  int __flags;

  
 
  int __invocation_counter;

  
 
  int __internal_use;

  __mbstate_t *__statep;
  __mbstate_t __state;	
 

   
  struct __gconv_trans_data *__trans;
};


 
typedef struct __gconv_info
{
  size_t __nsteps;
  struct __gconv_step *__steps;
  __extension__ struct __gconv_step_data __data [];
} *__gconv_t;

# 45 "/usr/include/_G_config.h" 2 3
typedef union
{
  struct __gconv_info __cd;
  struct
  {
    struct __gconv_info __cd;
    struct __gconv_step_data __data;
  } __combined;
} _G_iconv_t;

typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));




 






# 76 "/usr/include/_G_config.h" 3








 




 













# 33 "/usr/include/libio.h" 2 3
 
# 49 "/usr/include/libio.h" 3


 
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stdarg.h" 1 3

















 






 



 

# 38 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stdarg.h" 3

 



typedef __builtin_va_list __gnuc_va_list;



 
# 131 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stdarg.h" 3

# 54 "/usr/include/libio.h" 2 3






# 73 "/usr/include/libio.h" 3

 




# 88 "/usr/include/libio.h" 3

# 104 "/usr/include/libio.h" 3

# 113 "/usr/include/libio.h" 3





 

# 139 "/usr/include/libio.h" 3

# 146 "/usr/include/libio.h" 3

 
# 165 "/usr/include/libio.h" 3


struct _IO_jump_t;  struct _IO_FILE;

 
# 177 "/usr/include/libio.h" 3
typedef void _IO_lock_t;



 

struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
  
 
   
  int _pos;
# 200 "/usr/include/libio.h" 3
};

 
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};

# 267 "/usr/include/libio.h" 3

struct _IO_FILE {
  int _flags;		 


   
   
  char* _IO_read_ptr;	 
  char* _IO_read_end;	 
  char* _IO_read_base;	 
  char* _IO_write_base;	 
  char* _IO_write_ptr;	 
  char* _IO_write_end;	 
  char* _IO_buf_base;	 
  char* _IO_buf_end;	 
   
  char *_IO_save_base;  
  char *_IO_backup_base;   
  char *_IO_save_end;  

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;  


   
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

   

  _IO_lock_t *_lock;
# 316 "/usr/include/libio.h" 3
  __off64_t _offset;
# 325 "/usr/include/libio.h" 3
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;
   
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 355 "/usr/include/libio.h" 3


 


 
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);






 
typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
				 size_t __n);






 
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);

 
typedef int __io_close_fn (void *__cookie);


# 407 "/usr/include/libio.h" 3






extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
extern wint_t __wunderflow (_IO_FILE *);
extern wint_t __wuflow (_IO_FILE *);
extern wint_t __woverflow (_IO_FILE *, wint_t);







# 437 "/usr/include/libio.h" 3

# 447 "/usr/include/libio.h" 3




extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp);

 



extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));

# 480 "/usr/include/libio.h" 3

extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
			__gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
			 __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));

# 537 "/usr/include/libio.h" 3









# 73 "/usr/include/stdio.h" 2 3

# 84 "/usr/include/stdio.h" 3

 


typedef _G_fpos_t fpos_t;








 





 






 






 






 












 
# 1 "/usr/include/bits/stdio_lim.h" 1 3
















 





















# 139 "/usr/include/stdio.h" 2 3


 
extern struct _IO_FILE *stdin;		 
extern struct _IO_FILE *stdout;		 
extern struct _IO_FILE *stderr;		 

 






 
extern int remove (__const char *__filename) __attribute__ ((__nothrow__));
 
extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));












 

extern FILE *tmpfile (void);
# 179 "/usr/include/stdio.h" 3





 
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__));




 
extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__));










 
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__));







 
extern int fclose (FILE *__stream);



 
extern int fflush (FILE *__stream);








 
extern int fflush_unlocked (FILE *__stream);


# 240 "/usr/include/stdio.h" 3







 
extern FILE *fopen (__const char *__restrict __filename,
		    __const char *__restrict __modes);



 
extern FILE *freopen (__const char *__restrict __filename,
		      __const char *__restrict __modes,
		      FILE *__restrict __stream);
# 269 "/usr/include/stdio.h" 3

# 277 "/usr/include/stdio.h" 3


 
extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__));


# 298 "/usr/include/stdio.h" 3




 
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));


 
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __attribute__ ((__nothrow__));




 
extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
		       size_t __size) __attribute__ ((__nothrow__));

 
extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));







 
extern int fprintf (FILE *__restrict __stream,
		    __const char *__restrict __format, ...);



 
extern int printf (__const char *__restrict __format, ...);
 
extern int sprintf (char *__restrict __s,
		    __const char *__restrict __format, ...) __attribute__ ((__nothrow__));




 
extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
		     __gnuc_va_list __arg);



 
extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);
 
extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
		     __gnuc_va_list __arg) __attribute__ ((__nothrow__));




 
extern int snprintf (char *__restrict __s, size_t __maxlen,
		     __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
		      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));



# 392 "/usr/include/stdio.h" 3






 
extern int fscanf (FILE *__restrict __stream,
		   __const char *__restrict __format, ...) ;



 
extern int scanf (__const char *__restrict __format, ...) ;
 
extern int sscanf (__const char *__restrict __s,
		   __const char *__restrict __format, ...) __attribute__ ((__nothrow__));


# 434 "/usr/include/stdio.h" 3






 
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);




 
extern int getchar (void);



 






 
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);








 
extern int fgetc_unlocked (FILE *__stream);










 
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);




 
extern int putchar (int __c);



 








 
extern int fputc_unlocked (int __c, FILE *__stream);






 
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);





 
extern int getw (FILE *__stream);

 
extern int putw (int __w, FILE *__stream);







 
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;





 
extern char *gets (char *__s) ;


# 553 "/usr/include/stdio.h" 3


# 583 "/usr/include/stdio.h" 3






 
extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);




 
extern int puts (__const char *__s);





 
extern int ungetc (int __c, FILE *__stream);





 
extern size_t fread (void *__restrict __ptr, size_t __size,
		     size_t __n, FILE *__restrict __stream) ;



 
extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
		      size_t __n, FILE *__restrict __s) ;


# 630 "/usr/include/stdio.h" 3







 
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
			      size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
			       size_t __n, FILE *__restrict __stream) ;







 
extern int fseek (FILE *__stream, long int __off, int __whence);



 
extern long int ftell (FILE *__stream) ;



 
extern void rewind (FILE *__stream);





 






 
extern int fseeko (FILE *__stream, __off_t __off, int __whence);



 
extern __off_t ftello (FILE *__stream) ;
# 692 "/usr/include/stdio.h" 3






 
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);



 
extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 716 "/usr/include/stdio.h" 3


# 724 "/usr/include/stdio.h" 3


 
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));
 
extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;
 
extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;



 
extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;







 
extern void perror (__const char *__s);





 
# 1 "/usr/include/bits/sys_errlist.h" 1 3

















 





 


extern int sys_nerr;
extern __const char *__const sys_errlist[];
# 755 "/usr/include/stdio.h" 2 3



 
extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;



 
extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;








 
extern FILE *popen (__const char *__command, __const char *__modes) ;




 
extern int pclose (FILE *__stream);




 
extern char *ctermid (char *__s) __attribute__ ((__nothrow__));









# 808 "/usr/include/stdio.h" 3



 

 
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));


 
extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;

 
extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));


# 831 "/usr/include/stdio.h" 3


 
# 843 "/usr/include/stdio.h" 3





# 2 "PreFoF.c" 2
# 1 "/usr/include/stdlib.h" 1 3
















 



 





 
# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 34 "/usr/include/stdlib.h" 2 3






# 95 "/usr/include/stdlib.h" 3


 
typedef struct
  {
    int quot;			 
    int rem;			 
  } div_t;

 

typedef struct
  {
    long int quot;		 
    long int rem;		 
  } ldiv_t;




# 126 "/usr/include/stdlib.h" 3


 




 




 

extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;



 
extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
 
extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
 
extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




 
__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




 
extern double strtod (__const char *__restrict __nptr,
		      char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;


# 181 "/usr/include/stdlib.h" 3


 
extern long int strtol (__const char *__restrict __nptr,
			char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
 
extern unsigned long int strtoul (__const char *__restrict __nptr,
				  char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



 
__extension__
extern long long int strtoq (__const char *__restrict __nptr,
			     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
 
__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
				       char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




 
__extension__
extern long long int strtoll (__const char *__restrict __nptr,
			      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
 
__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
					char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




# 274 "/usr/include/stdlib.h" 3



 

extern double __strtod_internal (__const char *__restrict __nptr,
				 char **__restrict __endptr, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern float __strtof_internal (__const char *__restrict __nptr,
				char **__restrict __endptr, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern long double __strtold_internal (__const char *__restrict __nptr,
				       char **__restrict __endptr,
				       int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long int __strtol_internal (__const char *__restrict __nptr,
				   char **__restrict __endptr,
				   int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern unsigned long int __strtoul_internal (__const char *__restrict __nptr,
					     char **__restrict __endptr,
					     int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int __strtoll_internal (__const char *__restrict __nptr,
					 char **__restrict __endptr,
					 int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



__extension__
extern unsigned long long int __strtoull_internal (__const char *
						   __restrict __nptr,
						   char **__restrict __endptr,
						   int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




# 423 "/usr/include/stdlib.h" 3





 
extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;

 
extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



# 1 "/usr/include/sys/types.h" 1 3

















 



 












typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/sys/types.h" 3


typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 98 "/usr/include/sys/types.h" 3


typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;



# 1 "/usr/include/time.h" 1 3

















 



 



# 34 "/usr/include/time.h" 3

# 53 "/usr/include/time.h" 3

# 69 "/usr/include/time.h" 3







 
typedef __time_t time_t;














 
typedef __clockid_t clockid_t;










 
typedef __timer_t timer_t;





# 129 "/usr/include/time.h" 3


# 419 "/usr/include/time.h" 3

# 134 "/usr/include/sys/types.h" 2 3

# 145 "/usr/include/sys/types.h" 3

# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 148 "/usr/include/sys/types.h" 2 3


 
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;


 

# 186 "/usr/include/sys/types.h" 3

 







typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));



 





 
# 1 "/usr/include/endian.h" 1 3
















 












 





 
# 1 "/usr/include/bits/endian.h" 1 3
 





# 38 "/usr/include/endian.h" 2 3


 




# 51 "/usr/include/endian.h" 3







# 218 "/usr/include/sys/types.h" 2 3

 
# 1 "/usr/include/sys/select.h" 1 3

















 

 






 


 
# 1 "/usr/include/bits/select.h" 1 3
















 







 
# 32 "/usr/include/sys/select.h" 2 3

 
# 1 "/usr/include/bits/sigset.h" 1 3

















 




typedef int __sig_atomic_t;

 


typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;








 

# 35 "/usr/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;


 
# 1 "/usr/include/time.h" 1 3

















 



 



# 34 "/usr/include/time.h" 3

# 53 "/usr/include/time.h" 3

# 69 "/usr/include/time.h" 3

# 85 "/usr/include/time.h" 3

# 97 "/usr/include/time.h" 3

# 109 "/usr/include/time.h" 3











 
struct timespec
  {
    __time_t tv_sec;		 
    long int tv_nsec;		 
  };





# 419 "/usr/include/time.h" 3

# 45 "/usr/include/sys/select.h" 2 3
# 1 "/usr/include/bits/time.h" 1 3

















 



 

# 60 "/usr/include/bits/time.h" 3








 
struct timeval
  {
    __time_t tv_sec;		 
    __suseconds_t tv_usec;	 
  };
# 47 "/usr/include/sys/select.h" 2 3


typedef __suseconds_t suseconds_t;




 
typedef long int __fd_mask;

 



 




 
typedef struct
  {
    
 




    __fd_mask __fds_bits[1024 / (8 * sizeof (__fd_mask))];


  } fd_set;

 



 
typedef __fd_mask fd_mask;

 




 















 
extern int select (int __nfds, fd_set *__restrict __readfds,
		   fd_set *__restrict __writefds,
		   fd_set *__restrict __exceptfds,
		   struct timeval *__restrict __timeout);







 
extern int pselect (int __nfds, fd_set *__restrict __readfds,
		    fd_set *__restrict __writefds,
		    fd_set *__restrict __exceptfds,
		    const struct timespec *__restrict __timeout,
		    const __sigset_t *__restrict __sigmask);




# 221 "/usr/include/sys/types.h" 2 3

 
# 1 "/usr/include/sys/sysmacros.h" 1 3

















 








 

__extension__
extern __inline unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern __inline unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern __inline unsigned long long int gnu_dev_makedev (unsigned int __major,
							unsigned int __minor)
     __attribute__ ((__nothrow__));


__extension__ extern __inline unsigned int
__attribute__ ((__nothrow__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline unsigned int
__attribute__ ((__nothrow__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
	  | (((unsigned long long int) (__minor & ~0xff)) << 12)
	  | (((unsigned long long int) (__major & ~0xfff)) << 32));
}



 





# 224 "/usr/include/sys/types.h" 2 3








 


typedef __blkcnt_t blkcnt_t;	  



typedef __fsblkcnt_t fsblkcnt_t;  



typedef __fsfilcnt_t fsfilcnt_t;  
# 260 "/usr/include/sys/types.h" 3








 
# 1 "/usr/include/bits/pthreadtypes.h" 1 3

















 




# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 24 "/usr/include/bits/pthreadtypes.h" 2 3

# 46 "/usr/include/bits/pthreadtypes.h" 3



 
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 72 "/usr/include/bits/pthreadtypes.h" 3



 
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;

    
 
    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;



 
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;


 
typedef unsigned int pthread_key_t;


 
typedef int pthread_once_t;




 
typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;
    
 
    unsigned int __flags;
  } __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;




 
typedef volatile int pthread_spinlock_t;



 
typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;








# 271 "/usr/include/sys/types.h" 2 3




# 439 "/usr/include/stdlib.h" 2 3




 
 
extern long int random (void) __attribute__ ((__nothrow__));

 
extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));




 
extern char *initstate (unsigned int __seed, char *__statebuf,
			size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


 
extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





 

struct random_data
  {
    int32_t *fptr;		 
    int32_t *rptr;		 
    int32_t *state;		 
    int rand_type;		 
    int rand_deg;		 
    int rand_sep;		 
    int32_t *end_ptr;		 
  };

extern int random_r (struct random_data *__restrict __buf,
		     int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
			size_t __statelen,
			struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
		       struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





 
extern int rand (void) __attribute__ ((__nothrow__));
 
extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));



 
extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));




 

 
extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

 
extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

 
extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

 
extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




 
struct drand48_data
  {
    unsigned short int __x[3];	 
    unsigned short int __old_x[3];  
    unsigned short int __c;	 
    unsigned short int __init;	 
    unsigned long long int __a;	 
  };

 
extern int drand48_r (struct drand48_data *__restrict __buffer,
		      double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int lrand48_r (struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int mrand48_r (struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
		     struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
		      struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));








 
extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;
 
extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;






 
extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));
 
extern void free (void *__ptr) __attribute__ ((__nothrow__));



 
extern void cfree (void *__ptr) __attribute__ ((__nothrow__));


# 1 "/usr/include/alloca.h" 1 3
















 






# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 26 "/usr/include/alloca.h" 2 3



 


 
extern void *alloca (size_t __size) __attribute__ ((__nothrow__));







# 613 "/usr/include/stdlib.h" 2 3



 
extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;



 
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



 
extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));


 
extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




 
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





 
extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));


# 656 "/usr/include/stdlib.h" 3



 
extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



 
extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;


 

 
extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




 
extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

 
extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__));





 
extern int clearenv (void) __attribute__ ((__nothrow__));







 
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;








 

extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 722 "/usr/include/stdlib.h" 3






 
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;







 
extern int system (__const char *__command) ;



# 749 "/usr/include/stdlib.h" 3






 
extern char *realpath (__const char *__restrict __name,
		       char *__restrict __resolved) __attribute__ ((__nothrow__)) ;



 


typedef int (*__compar_fn_t) (__const void *, __const void *);








 
extern void *bsearch (__const void *__key, __const void *__base,
		      size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


 
extern void qsort (void *__base, size_t __nmemb, size_t __size,
		   __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));


 
extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;










 
 
extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;


# 812 "/usr/include/stdlib.h" 3




 



 
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;



 
extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;



 
extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;



 
extern char *qecvt (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;



 
extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign, char *__restrict __buf,
		   size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign, char *__restrict __buf,
		   size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign,
		    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign,
		    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));






 
extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;

 
extern int mbtowc (wchar_t *__restrict __pwc,
		   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;

 
extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;


 
extern size_t mbstowcs (wchar_t *__restrict  __pwcs,
			__const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));
 
extern size_t wcstombs (char *__restrict __s,
			__const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));







 
extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



# 914 "/usr/include/stdlib.h" 3








 


 
extern int posix_openpt (int __oflag) ;


# 945 "/usr/include/stdlib.h" 3

# 956 "/usr/include/stdlib.h" 3




 
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



 
# 973 "/usr/include/stdlib.h" 3






# 3 "PreFoF.c" 2
# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 4 "PreFoF.c" 2
# 1 "/opt/intel/Compiler/11.1/075/include/math.h" 1 3
 








 


 




# 1 "/usr/include/math.h" 1 3


















 



 









 
# 1 "/usr/include/bits/huge_val.h" 1 3



















 





 

# 35 "/usr/include/math.h" 2 3
# 45 "/usr/include/math.h" 3

 
# 1 "/usr/include/bits/mathdef.h" 1 3
















 





# 48 "/usr/include/math.h" 2 3




 

# 66 "/usr/include/math.h" 3

# 1 "/usr/include/bits/mathcalls.h" 1 3

















 

























 






 


 
extern double acos (double __x) __attribute__ ((__nothrow__)); extern double __acos (double __x) __attribute__ ((__nothrow__));
 
extern double asin (double __x) __attribute__ ((__nothrow__)); extern double __asin (double __x) __attribute__ ((__nothrow__));
 
extern double atan (double __x) __attribute__ ((__nothrow__)); extern double __atan (double __x) __attribute__ ((__nothrow__));
 
extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__));

 
extern double cos (double __x) __attribute__ ((__nothrow__)); extern double __cos (double __x) __attribute__ ((__nothrow__));
 
extern double sin (double __x) __attribute__ ((__nothrow__)); extern double __sin (double __x) __attribute__ ((__nothrow__));
 
extern double tan (double __x) __attribute__ ((__nothrow__)); extern double __tan (double __x) __attribute__ ((__nothrow__));

 

 
extern double cosh (double __x) __attribute__ ((__nothrow__)); extern double __cosh (double __x) __attribute__ ((__nothrow__));
 
extern double sinh (double __x) __attribute__ ((__nothrow__)); extern double __sinh (double __x) __attribute__ ((__nothrow__));
 
extern double tanh (double __x) __attribute__ ((__nothrow__)); extern double __tanh (double __x) __attribute__ ((__nothrow__));










 
extern double acosh (double __x) __attribute__ ((__nothrow__)); extern double __acosh (double __x) __attribute__ ((__nothrow__));
 
extern double asinh (double __x) __attribute__ ((__nothrow__)); extern double __asinh (double __x) __attribute__ ((__nothrow__));
 
extern double atanh (double __x) __attribute__ ((__nothrow__)); extern double __atanh (double __x) __attribute__ ((__nothrow__));



 


 
extern double exp (double __x) __attribute__ ((__nothrow__)); extern double __exp (double __x) __attribute__ ((__nothrow__));

 
extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__));

 
extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__));

 
extern double log (double __x) __attribute__ ((__nothrow__)); extern double __log (double __x) __attribute__ ((__nothrow__));

 
extern double log10 (double __x) __attribute__ ((__nothrow__)); extern double __log10 (double __x) __attribute__ ((__nothrow__));

 
extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__));


# 125 "/usr/include/bits/mathcalls.h" 3



 
extern double expm1 (double __x) __attribute__ ((__nothrow__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__));

 
extern double log1p (double __x) __attribute__ ((__nothrow__)); extern double __log1p (double __x) __attribute__ ((__nothrow__));

 
extern double logb (double __x) __attribute__ ((__nothrow__)); extern double __logb (double __x) __attribute__ ((__nothrow__));



# 148 "/usr/include/bits/mathcalls.h" 3


 


 
extern double pow (double __x, double __y) __attribute__ ((__nothrow__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__));

 
extern double sqrt (double __x) __attribute__ ((__nothrow__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__));




 
extern double hypot (double __x, double __y) __attribute__ ((__nothrow__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__));





 
extern double cbrt (double __x) __attribute__ ((__nothrow__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__));




 


 
extern double ceil (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern double fabs (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern double floor (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern double fmod (double __x, double __y) __attribute__ ((__nothrow__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__));



 
extern int __isinf (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern int __finite (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




 
extern int isinf (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern int finite (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern double drem (double __x, double __y) __attribute__ ((__nothrow__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__));


 
extern double significand (double __x) __attribute__ ((__nothrow__)); extern double __significand (double __x) __attribute__ ((__nothrow__));




 
extern double copysign (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



# 228 "/usr/include/bits/mathcalls.h" 3


 
extern int __isnan (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


 
extern int isnan (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern double j0 (double) __attribute__ ((__nothrow__)); extern double __j0 (double) __attribute__ ((__nothrow__));
extern double j1 (double) __attribute__ ((__nothrow__)); extern double __j1 (double) __attribute__ ((__nothrow__));
extern double jn (int, double) __attribute__ ((__nothrow__)); extern double __jn (int, double) __attribute__ ((__nothrow__));
extern double y0 (double) __attribute__ ((__nothrow__)); extern double __y0 (double) __attribute__ ((__nothrow__));
extern double y1 (double) __attribute__ ((__nothrow__)); extern double __y1 (double) __attribute__ ((__nothrow__));
extern double yn (int, double) __attribute__ ((__nothrow__)); extern double __yn (int, double) __attribute__ ((__nothrow__));





 
extern double erf (double) __attribute__ ((__nothrow__)); extern double __erf (double) __attribute__ ((__nothrow__));
extern double erfc (double) __attribute__ ((__nothrow__)); extern double __erfc (double) __attribute__ ((__nothrow__));
extern double lgamma (double) __attribute__ ((__nothrow__)); extern double __lgamma (double) __attribute__ ((__nothrow__));



# 262 "/usr/include/bits/mathcalls.h" 3


 
extern double gamma (double) __attribute__ ((__nothrow__)); extern double __gamma (double) __attribute__ ((__nothrow__));





 
extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__));






 
extern double rint (double __x) __attribute__ ((__nothrow__)); extern double __rint (double __x) __attribute__ ((__nothrow__));

 
extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




 
extern double remainder (double __x, double __y) __attribute__ ((__nothrow__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__));


 
extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__));


 
extern int ilogb (double __x) __attribute__ ((__nothrow__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__));


# 357 "/usr/include/bits/mathcalls.h" 3






 
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__));
# 72 "/usr/include/math.h" 2 3









 

# 1 "/usr/include/bits/mathcalls.h" 1 3

















 

























 






 


 
extern float acosf (float __x) __attribute__ ((__nothrow__)); extern float __acosf (float __x) __attribute__ ((__nothrow__));
 
extern float asinf (float __x) __attribute__ ((__nothrow__)); extern float __asinf (float __x) __attribute__ ((__nothrow__));
 
extern float atanf (float __x) __attribute__ ((__nothrow__)); extern float __atanf (float __x) __attribute__ ((__nothrow__));
 
extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__));

 
extern float cosf (float __x) __attribute__ ((__nothrow__)); extern float __cosf (float __x) __attribute__ ((__nothrow__));
 
extern float sinf (float __x) __attribute__ ((__nothrow__)); extern float __sinf (float __x) __attribute__ ((__nothrow__));
 
extern float tanf (float __x) __attribute__ ((__nothrow__)); extern float __tanf (float __x) __attribute__ ((__nothrow__));

 

 
extern float coshf (float __x) __attribute__ ((__nothrow__)); extern float __coshf (float __x) __attribute__ ((__nothrow__));
 
extern float sinhf (float __x) __attribute__ ((__nothrow__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__));
 
extern float tanhf (float __x) __attribute__ ((__nothrow__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__));










 
extern float acoshf (float __x) __attribute__ ((__nothrow__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__));
 
extern float asinhf (float __x) __attribute__ ((__nothrow__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__));
 
extern float atanhf (float __x) __attribute__ ((__nothrow__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__));



 


 
extern float expf (float __x) __attribute__ ((__nothrow__)); extern float __expf (float __x) __attribute__ ((__nothrow__));

 
extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__));

 
extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__));

 
extern float logf (float __x) __attribute__ ((__nothrow__)); extern float __logf (float __x) __attribute__ ((__nothrow__));

 
extern float log10f (float __x) __attribute__ ((__nothrow__)); extern float __log10f (float __x) __attribute__ ((__nothrow__));

 
extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__));


# 125 "/usr/include/bits/mathcalls.h" 3



 
extern float expm1f (float __x) __attribute__ ((__nothrow__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__));

 
extern float log1pf (float __x) __attribute__ ((__nothrow__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__));

 
extern float logbf (float __x) __attribute__ ((__nothrow__)); extern float __logbf (float __x) __attribute__ ((__nothrow__));



# 148 "/usr/include/bits/mathcalls.h" 3


 


 
extern float powf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__));

 
extern float sqrtf (float __x) __attribute__ ((__nothrow__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__));




 
extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__));





 
extern float cbrtf (float __x) __attribute__ ((__nothrow__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__));




 


 
extern float ceilf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern float fabsf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern float floorf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__));



 
extern int __isinff (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern int __finitef (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




 
extern int isinff (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern int finitef (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern float dremf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__));


 
extern float significandf (float __x) __attribute__ ((__nothrow__)); extern float __significandf (float __x) __attribute__ ((__nothrow__));




 
extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



# 228 "/usr/include/bits/mathcalls.h" 3


 
extern int __isnanf (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


 
extern int isnanf (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern float j0f (float) __attribute__ ((__nothrow__)); extern float __j0f (float) __attribute__ ((__nothrow__));
extern float j1f (float) __attribute__ ((__nothrow__)); extern float __j1f (float) __attribute__ ((__nothrow__));
extern float jnf (int, float) __attribute__ ((__nothrow__)); extern float __jnf (int, float) __attribute__ ((__nothrow__));
extern float y0f (float) __attribute__ ((__nothrow__)); extern float __y0f (float) __attribute__ ((__nothrow__));
extern float y1f (float) __attribute__ ((__nothrow__)); extern float __y1f (float) __attribute__ ((__nothrow__));
extern float ynf (int, float) __attribute__ ((__nothrow__)); extern float __ynf (int, float) __attribute__ ((__nothrow__));





 
extern float erff (float) __attribute__ ((__nothrow__)); extern float __erff (float) __attribute__ ((__nothrow__));
extern float erfcf (float) __attribute__ ((__nothrow__)); extern float __erfcf (float) __attribute__ ((__nothrow__));
extern float lgammaf (float) __attribute__ ((__nothrow__)); extern float __lgammaf (float) __attribute__ ((__nothrow__));



# 262 "/usr/include/bits/mathcalls.h" 3


 
extern float gammaf (float) __attribute__ ((__nothrow__)); extern float __gammaf (float) __attribute__ ((__nothrow__));





 
extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__));






 
extern float rintf (float __x) __attribute__ ((__nothrow__)); extern float __rintf (float __x) __attribute__ ((__nothrow__));

 
extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




 
extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__));


 
extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__));


 
extern int ilogbf (float __x) __attribute__ ((__nothrow__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__));


# 357 "/usr/include/bits/mathcalls.h" 3






 
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__));
# 95 "/usr/include/math.h" 2 3





# 129 "/usr/include/math.h" 3

# 1 "/usr/include/bits/mathcalls.h" 1 3

















 

























 






 


 
extern long double acosl (long double __x) __attribute__ ((__nothrow__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__));
 
extern long double asinl (long double __x) __attribute__ ((__nothrow__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__));
 
extern long double atanl (long double __x) __attribute__ ((__nothrow__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__));
 
extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__));

 
extern long double cosl (long double __x) __attribute__ ((__nothrow__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__));
 
extern long double sinl (long double __x) __attribute__ ((__nothrow__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__));
 
extern long double tanl (long double __x) __attribute__ ((__nothrow__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__));

 

 
extern long double coshl (long double __x) __attribute__ ((__nothrow__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__));
 
extern long double sinhl (long double __x) __attribute__ ((__nothrow__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__));
 
extern long double tanhl (long double __x) __attribute__ ((__nothrow__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__));










 
extern long double acoshl (long double __x) __attribute__ ((__nothrow__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__));
 
extern long double asinhl (long double __x) __attribute__ ((__nothrow__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__));
 
extern long double atanhl (long double __x) __attribute__ ((__nothrow__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__));



 


 
extern long double expl (long double __x) __attribute__ ((__nothrow__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__));

 
extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__));

 
extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__));

 
extern long double logl (long double __x) __attribute__ ((__nothrow__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__));

 
extern long double log10l (long double __x) __attribute__ ((__nothrow__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__));

 
extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__));


# 125 "/usr/include/bits/mathcalls.h" 3



 
extern long double expm1l (long double __x) __attribute__ ((__nothrow__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__));

 
extern long double log1pl (long double __x) __attribute__ ((__nothrow__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__));

 
extern long double logbl (long double __x) __attribute__ ((__nothrow__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__));



# 148 "/usr/include/bits/mathcalls.h" 3


 


 
extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__));

 
extern long double sqrtl (long double __x) __attribute__ ((__nothrow__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__));




 
extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__));





 
extern long double cbrtl (long double __x) __attribute__ ((__nothrow__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__));




 


 
extern long double ceill (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern long double fabsl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern long double floorl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__));



 
extern int __isinfl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern int __finitel (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




 
extern int isinfl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern int finitel (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__));


 
extern long double significandl (long double __x) __attribute__ ((__nothrow__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__));




 
extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



# 228 "/usr/include/bits/mathcalls.h" 3


 
extern int __isnanl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


 
extern int isnanl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

 
extern long double j0l (long double) __attribute__ ((__nothrow__)); extern long double __j0l (long double) __attribute__ ((__nothrow__));
extern long double j1l (long double) __attribute__ ((__nothrow__)); extern long double __j1l (long double) __attribute__ ((__nothrow__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__));
extern long double y0l (long double) __attribute__ ((__nothrow__)); extern long double __y0l (long double) __attribute__ ((__nothrow__));
extern long double y1l (long double) __attribute__ ((__nothrow__)); extern long double __y1l (long double) __attribute__ ((__nothrow__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__));





 
extern long double erfl (long double) __attribute__ ((__nothrow__)); extern long double __erfl (long double) __attribute__ ((__nothrow__));
extern long double erfcl (long double) __attribute__ ((__nothrow__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__));
extern long double lgammal (long double) __attribute__ ((__nothrow__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__));



# 262 "/usr/include/bits/mathcalls.h" 3


 
extern long double gammal (long double) __attribute__ ((__nothrow__)); extern long double __gammal (long double) __attribute__ ((__nothrow__));





 
extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__));






 
extern long double rintl (long double __x) __attribute__ ((__nothrow__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__));

 
extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




 
extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__));


 
extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__));


 
extern int ilogbl (long double __x) __attribute__ ((__nothrow__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__));


# 357 "/usr/include/bits/mathcalls.h" 3






 
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__));
# 142 "/usr/include/math.h" 2 3














 
extern int signgam;



 
# 281 "/usr/include/math.h" 3


 
typedef enum
{
  _IEEE_ = -1,	 
  _SVID_,	 
  _XOPEN_,	 
  _POSIX_,
  _ISOC_	 
} _LIB_VERSION_TYPE;



 
extern _LIB_VERSION_TYPE _LIB_VERSION;








 



struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);




 
# 334 "/usr/include/math.h" 3

 


# 346 "/usr/include/math.h" 3


 
# 364 "/usr/include/math.h" 3



 
# 383 "/usr/include/math.h" 3




 




# 406 "/usr/include/math.h" 3

 




# 464 "/usr/include/math.h" 3




# 20 "/opt/intel/Compiler/11.1/075/include/math.h" 2 3





 




# 53 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 74 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 99 "/opt/intel/Compiler/11.1/075/include/math.h" 3


# 108 "/opt/intel/Compiler/11.1/075/include/math.h" 3


# 119 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 131 "/opt/intel/Compiler/11.1/075/include/math.h" 3













# 154 "/opt/intel/Compiler/11.1/075/include/math.h" 3

 
# 168 "/opt/intel/Compiler/11.1/075/include/math.h" 3


 

# 193 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 209 "/opt/intel/Compiler/11.1/075/include/math.h" 3











extern int fpclassifyf    ( float              __x );
extern int fpclassify     ( double               __x );
extern int fpclassifyd    ( double             __x );
extern int fpclassifyl    ( long double            __x );

extern int __fpclassifyf  ( float              __x );
extern int __fpclassify   ( double               __x );
extern int __fpclassifyd  ( double             __x );
extern int __fpclassifyl  ( long double            __x );

extern int isinff         ( float              __x );
extern int isinf          ( double               __x );
extern int isinfd         ( double             __x );
extern int isinfl         ( long double            __x );

extern int __isinff       ( float              __x );
extern int __isinf        ( double               __x );
extern int __isinfd       ( double             __x );
extern int __isinfl       ( long double            __x );

extern int isnanf         ( float              __x );
extern int isnan          ( double               __x );
extern int isnand         ( double             __x );
extern int isnanl         ( long double            __x );

extern int __isnanf       ( float              __x );
extern int __isnan        ( double               __x );
extern int __isnand       ( double             __x );
extern int __isnanl       ( long double            __x );

extern int isnormalf      ( float              __x );
extern int isnormal       ( double               __x );
extern int isnormald      ( double             __x );
extern int isnormall      ( long double            __x );

extern int __isnormalf    ( float              __x );
extern int __isnormal     ( double               __x );
extern int __isnormald    ( double             __x );
extern int __isnormall    ( long double            __x );

extern int isfinitef      ( float              __x );
extern int isfinite       ( double               __x );
extern int isfinited      ( double             __x );
extern int isfinitel      ( long double            __x );

extern int __isfinitef    ( float              __x );
extern int __isfinite     ( double               __x );
extern int __isfinited    ( double             __x );
extern int __isfinitel    ( long double            __x );

extern int finitef        ( float              __x );
extern int finite         ( double             __x );
extern int finited        ( double             __x );
extern int finitel        ( long double            __x );

extern int __finitef      ( float              __x );
extern int __finite       ( double             __x );
extern int __finited      ( double             __x );
extern int __finitel      ( long double            __x );

extern int signbitf       ( float              __x );
extern int signbit        ( double             __x );
extern int signbitd       ( double             __x );
extern int signbitl       ( long double            __x );

extern int __signbitf     ( float              __x );
extern int __signbit      ( double             __x );
extern int __signbitd     ( double             __x );
extern int __signbitl     ( long double            __x );


# 301 "/opt/intel/Compiler/11.1/075/include/math.h" 3


# 322 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 329 "/opt/intel/Compiler/11.1/075/include/math.h" 3




 

extern int isgreaterf( float xf, float yf );
extern int isgreater( double xd, double yd );
extern int isgreaterl( long double xl, long double yl );
extern int __isgreaterf( float xf, float yf );
extern int __isgreater( double xd, double yd );
extern int __isgreaterl( long double xl, long double yl );

extern int isgreaterequalf( float xf, float yf );
extern int isgreaterequal( double xd, double yd );
extern int isgreaterequall( long double xl, long double yl );
extern int __isgreaterequalf( float xf, float yf );
extern int __isgreaterequal( double xd, double yd );
extern int __isgreaterequall( long double xl, long double yl );

extern int islessf( float xf, float yf );
extern int isless( double xd, double yd );
extern int islessl( long double xl, long double yl );
extern int __islessf( float xf, float yf );
extern int __isless( double xd, double yd );
extern int __islessl( long double xl, long double yl );

extern int islessequalf( float xf, float yf );
extern int islessequal( double xd, double yd );
extern int islessequall( long double xl, long double yl );
extern int __islessequalf( float xf, float yf );
extern int __islessequal( double xd, double yd );
extern int __islessequall( long double xl, long double yl );

extern int islessgreaterf( float xf, float yf );
extern int islessgreater( double xd, double yd );
extern int islessgreaterl( long double xl, long double yl );
extern int __islessgreaterf( float xf, float yf );
extern int __islessgreater( double xd, double yd );
extern int __islessgreaterl( long double xl, long double yl );

extern int isunorderedf( float xf, float yf );
extern int isunordered( double xd, double yd );
extern int isunorderedl( long double xl, long double yl );
extern int __isunorderedf( float xf, float yf );
extern int __isunordered( double xd, double yd );
extern int __isunorderedl( long double xl, long double yl );

# 383 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 390 "/opt/intel/Compiler/11.1/075/include/math.h" 3

 

 

# 406 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 416 "/opt/intel/Compiler/11.1/075/include/math.h" 3

extern double    cot( double __x );
extern float     cotf( float __x );
extern long double   cotl( long double __x );


extern void      sincos( double __x, double *__psin, double *__pcos );
extern void      sincosf( float __x, float *__psin, float *__pcos );
extern void      sincosl( long double __x, long double *__psin, long double *__pcos );


 

extern double    cosd( double __x );
extern float     cosdf( float __x );
extern long double   cosdl( long double __x );

extern double    sind( double __x );
extern float     sindf( float __x );
extern long double   sindl( long double __x );

extern double    tand( double __x );
extern float     tandf( float __x );
extern long double   tandl( long double __x );

extern double    cotd( double __x );
extern float     cotdf( float __x );
extern long double   cotdl( long double __x );

extern double    acosd( double __x );
extern float     acosdf( float __x );
extern long double   acosdl( long double __x );

extern double    asind( double __x );
extern float     asindf( float __x );
extern long double   asindl( long double __x );

extern double    atand( double __x );
extern float     atandf( float __x );
extern long double   atandl( long double __x );

extern double    atand2( double __y, double __x );
extern float     atand2f( float __y, float __x );
extern long double   atand2l( long double __y, long double __x );

extern double    atan2d( double __y, double __x );
extern float     atan2df( float __y, float __x );
extern long double   atan2dl( long double __y, long double __x );

extern void      sincosd( double __x, double *__psin, double *__pcos );
extern void      sincosdf( float __x, float *__psin, float *__pcos );
extern void      sincosdl( long double __x, long double *__psin, long double *__pcos );

 

# 482 "/opt/intel/Compiler/11.1/075/include/math.h" 3

extern void      sinhcosh( double __x, double *__psinh, double *__pcosh );
extern void      sinhcoshf( float __x, float *__psinh, float *__pcosh );
extern void      sinhcoshl( long double __x, long double *__psinh, long double *__pcosh );

# 496 "/opt/intel/Compiler/11.1/075/include/math.h" 3







 












extern double    expm1( double __x );
extern float     expm1f( float __x );

extern double    exp2( double __x );
extern float     exp2f( float __x );




extern double    exp10( double __x );
extern float     exp10f( float __x );
extern long double   exp10l( long double __x );


# 537 "/opt/intel/Compiler/11.1/075/include/math.h" 3







extern double    scalb( double __x, double __y );



extern float     scalbf( float __x, float __y );
extern long double   scalbl( long double __x, long double __y );









extern double    scalbln( double __x, long int __n );
extern float     scalblnf( float __x, long int __n );


 

# 572 "/opt/intel/Compiler/11.1/075/include/math.h" 3







extern double    log2( double __x );
extern float     log2f( float __x );


# 595 "/opt/intel/Compiler/11.1/075/include/math.h" 3











 

# 614 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 625 "/opt/intel/Compiler/11.1/075/include/math.h" 3


# 634 "/opt/intel/Compiler/11.1/075/include/math.h" 3

extern double    invsqrt( double __x );
extern float     invsqrtf( float __x );
extern long double   invsqrtl( long double __x );

 

# 653 "/opt/intel/Compiler/11.1/075/include/math.h" 3

extern double    erfinv( double __x );
extern float     erfinvf( float __x );
extern long double   erfinvl( long double __x );

extern double    gamma_r( double __x, int *__signgam );
extern float     gammaf_r( float __x, int *__signgam );
extern long double   gammal_r( long double __x, int *__signgam );

# 672 "/opt/intel/Compiler/11.1/075/include/math.h" 3



extern double    tgamma( double __x );
extern float     tgammaf( float __x );


 

# 688 "/opt/intel/Compiler/11.1/075/include/math.h" 3








extern double    nearbyint( double __x );
extern float     nearbyintf( float __x );


# 706 "/opt/intel/Compiler/11.1/075/include/math.h" 3


extern long int   lrint( double __x );
extern long int   lrintf( float __x );

extern long long int  llrint( double __x );
extern long long int  llrintf( float __x );

extern double    round( double __x );
extern float     roundf( float __x );

extern long int   lround( double __x );
extern long int   lroundf( float __x );

extern long long int  llround( double __x );
extern long long int  llroundf( float __x );

extern double    trunc( double __x );
extern float     truncf( float __x );


 











# 745 "/opt/intel/Compiler/11.1/075/include/math.h" 3


extern double    remquo( double __x, double __y, int *__quo );
extern float     remquof( float __x, float __y, int *__quo );


 

# 760 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 769 "/opt/intel/Compiler/11.1/075/include/math.h" 3


extern double    nexttoward( double __x, long double __y );
extern float     nexttowardf( float __x, long double __y );


 


extern double    fdim( double __x, double __y );
extern float     fdimf( float __x, float __y );

extern double    fmax( double __x, double __y );
extern float     fmaxf( float __x, float __y );

extern double    fmin( double __x, double __y );
extern float     fminf( float __x, float __y );

 

extern double    fma( double __x, double __y, double __z );
extern float     fmaf( float __x, float __y, float __z );


 

extern double    annuity( double __x, double __y );
extern double    compound( double __x, double __y );

extern float     annuityf( float __x, float __y );
extern long double   annuityl( long double __x, long double __y );

extern float     compoundf( float __x, float __y );
extern long double   compoundl( long double __x, long double __y );

# 812 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 823 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 834 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 875 "/opt/intel/Compiler/11.1/075/include/math.h" 3


extern long double   exp2l( long double __x );
extern long double   expm1l( long double __x );
extern long double   scalblnl( long double __x, long int __n );
extern long double   log2l( long double __x );
extern long double   remquol( long double __x, long double __y, int *__quo );
extern long double   roundl( long double __x );
extern long int   lroundl( long double __x );
extern long long int  llroundl( long double __x );
extern long int   lrintl( long double __x );
extern long long int  llrintl( long double __x );
extern long double   truncl( long double __x );
extern long double   nearbyintl( long double __x );
extern long double   tgammal( long double __x );
extern long double   nexttowardl( long double __x, long double __y );
extern long double   fdiml( long double __x, long double __y );
extern long double   fmaxl( long double __x, long double __y );
extern long double   fminl( long double __x, long double __y );
extern long double   fmal( long double __x, long double __y, long double __z );


# 1051 "/opt/intel/Compiler/11.1/075/include/math.h" 3


 

 

# 1065 "/opt/intel/Compiler/11.1/075/include/math.h" 3

typedef struct ____exception {
    int     type;
    const char  *name;
    double  arg1;
    double  arg2;
    double  retval;
} ___exception;

# 1086 "/opt/intel/Compiler/11.1/075/include/math.h" 3

typedef struct ____exceptionf {
    int    type;
    const char *name;
    float  arg1;
    float  arg2;
    float  retval;
} ___exceptionf;

typedef struct ____exceptionl {
    int      type;
    const char   *name;
    long double  arg1;
    long double  arg2;
    long double  retval;
} ___exceptionl;




extern int  matherrf( struct ____exceptionf *__e );
extern int  matherrl( struct ____exceptionl *__e );

# 1118 "/opt/intel/Compiler/11.1/075/include/math.h" 3















 

typedef int (  *___pmatherr )( struct ____exception  *__e );
typedef int (  *___pmatherrf )( struct ____exceptionf *__e );
typedef int (  *___pmatherrl )( struct ____exceptionl *__e );

extern ___pmatherr   __libm_setusermatherr( ___pmatherr  __user_matherr );
extern ___pmatherrf  __libm_setusermatherrf( ___pmatherrf __user_matherrf );
extern ___pmatherrl  __libm_setusermatherrl( ___pmatherrl __user_matherrl );

 

# 1156 "/opt/intel/Compiler/11.1/075/include/math.h" 3

extern _LIB_VERSION_TYPE  _LIB_VERSIONIMF;

# 1170 "/opt/intel/Compiler/11.1/075/include/math.h" 3

# 1383 "/opt/intel/Compiler/11.1/075/include/math.h" 3









# 5 "PreFoF.c" 2
# 1 "/opt/intel/Compiler/11.1/075/include/omp.h" 1 3



 
























 













# 50 "/opt/intel/Compiler/11.1/075/include/omp.h" 3


# 62 "/opt/intel/Compiler/11.1/075/include/omp.h" 3








 























     
    typedef enum omp_sched_t {
	omp_sched_static  = 1,
	omp_sched_dynamic = 2,
	omp_sched_guided  = 3,
	omp_sched_auto    = 4
    } omp_sched_t;

     
    extern void     ompc_set_num_threads (int);
    extern void     ompc_set_dynamic     (int);
    extern void     ompc_set_nested      (int);
    extern void     ompc_set_max_active_levels (int);
    extern void     ompc_set_schedule          (omp_sched_t, int);

     
    extern int      omp_get_num_threads  (void);
    extern int      omp_get_dynamic      (void);
    extern int      omp_get_nested       (void);
    extern int      omp_get_max_threads  (void);
    extern int      omp_get_thread_num   (void);
    extern int      omp_get_num_procs    (void);
    extern int      omp_in_parallel      (void);
    extern int      omp_get_active_level        (void);
    extern int      omp_get_level               (void);
    extern int      ompc_get_ancestor_thread_num (int);
    extern int      ompc_get_team_size           (int);
    extern int      omp_get_thread_limit        (void);
    extern int      omp_get_max_active_levels   (void);
    extern void     omp_get_schedule            (omp_sched_t *, int *);

     
    typedef struct omp_lock_t {
        void * _lk;
    } omp_lock_t;

    extern void     omp_init_lock    (omp_lock_t *);
    extern void     omp_set_lock     (omp_lock_t *);
    extern void     omp_unset_lock   (omp_lock_t *);
    extern void     omp_destroy_lock (omp_lock_t *);
    extern int      omp_test_lock    (omp_lock_t *);

     
    typedef struct omp_nest_lock_t {
        void * _lk;
    } omp_nest_lock_t;

    extern void     omp_init_nest_lock    (omp_nest_lock_t *);
    extern void     omp_set_nest_lock     (omp_nest_lock_t *);
    extern void     omp_unset_nest_lock   (omp_nest_lock_t *);
    extern void     omp_destroy_nest_lock (omp_nest_lock_t *);
    extern int      omp_test_nest_lock    (omp_nest_lock_t *);

     
    extern double   omp_get_wtime (void);
    extern double   omp_get_wtick (void);


     
    extern int      kmp_get_stacksize          (void);
    extern void     kmpc_set_stacksize          (int);
    extern size_t   kmp_get_stacksize_s        (void);
    extern void     kmpc_set_stacksize_s        (size_t);
    extern int      kmp_get_blocktime          (void);
    extern int      kmp_get_library            (void);
    extern void     kmpc_set_blocktime          (int);
    extern void     kmpc_set_library            (int);
    extern void     kmpc_set_parallel_name      (char*);
    extern void     kmpc_set_stats              (int);
    extern void     kmp_set_library_serial     (void);
    extern void     kmp_set_library_turnaround (void);
    extern void     kmp_set_library_throughput (void);
    extern void     kmpc_set_defaults           (char const *);

     
    typedef void * kmp_affinity_mask_t;

    extern int      kmp_set_affinity             (kmp_affinity_mask_t *);
    extern int      kmp_get_affinity             (kmp_affinity_mask_t *);
    extern int      kmp_get_affinity_max_proc    (void);
    extern void     kmp_create_affinity_mask     (kmp_affinity_mask_t *);
    extern void     kmp_destroy_affinity_mask    (kmp_affinity_mask_t *);
    extern int      kmpc_set_affinity_mask_proc   (int, kmp_affinity_mask_t *);
    extern int      kmpc_unset_affinity_mask_proc (int, kmp_affinity_mask_t *);
    extern int      kmpc_get_affinity_mask_proc   (int, kmp_affinity_mask_t *);

    extern void *   kmpc_malloc  (size_t);
    extern void *   kmpc_calloc  (size_t, size_t);
    extern void *   kmpc_realloc (void *, size_t);
    extern void     kmpc_free    (void *);

     
    extern void *   kmpc_sharable_malloc  (size_t);
    extern void *   kmpc_aligned_sharable_malloc  (size_t);
    extern void *   kmpc_sharable_calloc  (size_t, size_t);
    extern void *   kmpc_sharable_realloc (void *, size_t);
    extern void     kmpc_sharable_free    (void *);

    extern void     kmp_lock_cond_wait           (omp_lock_t *);
    extern void     kmp_lock_cond_signal         (omp_lock_t *);
    extern void     kmp_lock_cond_broadcast      (omp_lock_t *);
    extern void     kmp_nest_lock_cond_wait      (omp_nest_lock_t *);
    extern void     kmp_nest_lock_cond_signal    (omp_nest_lock_t *);
    extern void     kmp_nest_lock_cond_broadcast (omp_nest_lock_t *);

    extern int      kmpc_sharable_mmap(char *, size_t *, void **);
    extern int      kmpc_sharable_munmap(void *);
    extern int      kmpc_private_mmap(char *, size_t *, void **);
    extern int      kmpc_private_munmap(void *);

    extern void     kmpc_deferred_atomic_add_i4(void *addr, int val);
    extern void     kmpc_deferred_atomic_add_i8(void *addr, long long val);
    extern void     kmpc_deferred_atomic_add_r4(void *addr, float val);
    extern void     kmpc_deferred_atomic_add_r8(void *addr, double val);

    extern int      kmp_get_process_num(void);
    extern int      kmp_get_num_processes(void);
    extern int      kmp_get_process_thread_num(void);

    extern void     kmp_set_warnings_on(void);
    extern void     kmp_set_warnings_off(void);
    extern int      kmp_is_sharable(void*);



    

 
    typedef int     omp_int_t;
    typedef double  omp_wtime_t;







# 6 "PreFoF.c" 2
# 1 "/opt/openmpi-intel11_ib/include/mpi.h" 1
 


















 





 

 







 

 


 


 
 

 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 





 


 


 


 


# 155 "/opt/openmpi-intel11_ib/include/mpi.h"


 





 

 
# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 168 "/opt/openmpi-intel11_ib/include/mpi.h" 2









 




 






 















 











 

typedef ptrdiff_t MPI_Aint;
typedef long long MPI_Offset;
typedef struct ompi_communicator_t *MPI_Comm;
typedef struct ompi_datatype_t *MPI_Datatype;
typedef struct ompi_errhandler_t *MPI_Errhandler;

typedef struct ompi_file_t *MPI_File;

typedef struct ompi_group_t *MPI_Group;
typedef struct ompi_info_t *MPI_Info;
typedef struct ompi_op_t *MPI_Op;
typedef struct ompi_request_t *MPI_Request;
typedef struct ompi_status_public_t MPI_Status;
typedef struct ompi_win_t *MPI_Win;



 
struct ompi_status_public_t { 
  int MPI_SOURCE;
  int MPI_TAG;
  int MPI_ERROR;
  int _count;
  int _cancelled;
};
typedef struct ompi_status_public_t ompi_status_public_t;



 
typedef int (MPI_Copy_function)(MPI_Comm, int, void *,
                                void *, void *, int *);
typedef int (MPI_Delete_function)(MPI_Comm, int, void *, void *);
typedef int (MPI_Datarep_extent_function)(MPI_Datatype, MPI_Aint *, void *);
typedef int (MPI_Datarep_conversion_function)(void *, MPI_Datatype, 
                                              int, void *, MPI_Offset, void *);
typedef void (MPI_Comm_errhandler_fn)(MPI_Comm *, int *, ...);

    


 
typedef void (ompi_file_errhandler_fn)(MPI_File *, int *, ...);
typedef ompi_file_errhandler_fn MPI_File_errhandler_fn;




typedef void (MPI_Win_errhandler_fn)(MPI_Win *, int *, ...);
typedef void (MPI_Handler_function)(MPI_Comm *, int *, ...);
typedef void (MPI_User_function)(void *, void *, int *, MPI_Datatype *);
typedef int (MPI_Comm_copy_attr_function)(MPI_Comm, int, void *,
                                            void *, void *, int *);
typedef int (MPI_Comm_delete_attr_function)(MPI_Comm, int, void *, void *);
typedef int (MPI_Type_copy_attr_function)(MPI_Datatype, int, void *,
                                            void *, void *, int *);
typedef int (MPI_Type_delete_attr_function)(MPI_Datatype, int,
                                              void *, void *);
typedef int (MPI_Win_copy_attr_function)(MPI_Win, int, void *,
                                           void *, void *, int *);
typedef int (MPI_Win_delete_attr_function)(MPI_Win, int, void *, void *);
typedef int (MPI_Grequest_query_function)(void *, MPI_Status *);
typedef int (MPI_Grequest_free_function)(void *);
typedef int (MPI_Grequest_cancel_function)(void *, int); 



 
# 298 "/opt/openmpi-intel11_ib/include/mpi.h"



 
# 318 "/opt/openmpi-intel11_ib/include/mpi.h"






 
# 334 "/opt/openmpi-intel11_ib/include/mpi.h"












 















 
enum {
     
    MPI_TAG_UB,
    MPI_HOST,
    MPI_IO,
    MPI_WTIME_IS_GLOBAL,

     
    MPI_APPNUM,
    MPI_LASTUSEDCODE,
    MPI_UNIVERSE_SIZE,
    MPI_WIN_BASE,
    MPI_WIN_SIZE,
    MPI_WIN_DISP_UNIT,

    
 
    IMPI_CLIENT_SIZE,
    IMPI_CLIENT_COLOR,
    IMPI_HOST_SIZE,
    IMPI_HOST_COLOR
};




 
# 445 "/opt/openmpi-intel11_ib/include/mpi.h"








 
enum {
  MPI_IDENT,
  MPI_CONGRUENT,
  MPI_SIMILAR,
  MPI_UNEQUAL
};




 
enum {
  MPI_THREAD_SINGLE,
  MPI_THREAD_FUNNELED,
  MPI_THREAD_SERIALIZED,
  MPI_THREAD_MULTIPLE
};




 
enum {
  MPI_COMBINER_NAMED,
  MPI_COMBINER_DUP,
  MPI_COMBINER_CONTIGUOUS,
  MPI_COMBINER_VECTOR,
  MPI_COMBINER_HVECTOR_INTEGER,
  MPI_COMBINER_HVECTOR,
  MPI_COMBINER_INDEXED,
  MPI_COMBINER_HINDEXED_INTEGER,
  MPI_COMBINER_HINDEXED,
  MPI_COMBINER_INDEXED_BLOCK,
  MPI_COMBINER_STRUCT_INTEGER,
  MPI_COMBINER_STRUCT,
  MPI_COMBINER_SUBARRAY,
  MPI_COMBINER_DARRAY,
  MPI_COMBINER_F90_REAL,
  MPI_COMBINER_F90_COMPLEX,
  MPI_COMBINER_F90_INTEGER,
  MPI_COMBINER_RESIZED
};



 
# 510 "/opt/openmpi-intel11_ib/include/mpi.h"


















 
























 



__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_NULL_DELETE_FN( MPI_Datatype datatype, 
                                                  int type_keyval,
                                                  void* attribute_val_out, 
                                                  void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_NULL_COPY_FN( MPI_Datatype datatype, 
                                                int type_keyval, 
                                                void* extra_state,
                                                void* attribute_val_in, 
                                                void* attribute_val_out, 
                                                int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_DUP_FN( MPI_Datatype datatype, 
                                          int type_keyval, 
                                          void* extra_state, 
                                          void* attribute_val_in, 
                                          void* attribute_val_out, 
                                          int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_NULL_DELETE_FN( MPI_Comm comm, 
                                                  int comm_keyval,
                                                  void* attribute_val_out, 
                                                  void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_NULL_COPY_FN( MPI_Comm comm, 
                                                int comm_keyval, 
                                                void* extra_state, 
                                                void* attribute_val_in,
                                                void* attribute_val_out, 
                                                int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_DUP_FN( MPI_Comm comm, int comm_keyval, 
                                          void* extra_state,
                                          void* attribute_val_in, 
                                          void* attribute_val_out,
                                          int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_NULL_DELETE_FN( MPI_Comm comm, int comm_keyval,
                                             void* attribute_val_out, 
                                             void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_NULL_COPY_FN( MPI_Comm comm, int comm_keyval, 
                                           void* extra_state,
                                           void* attribute_val_in, 
                                           void* attribute_val_out,
                                           int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_DUP_FN( MPI_Comm comm, int comm_keyval, 
                                     void* extra_state,
                                     void* attribute_val_in, 
                                     void* attribute_val_out,
                                     int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_NULL_DELETE_FN( MPI_Win window, 
                                                 int win_keyval,
                                                 void* attribute_val_out, 
                                                 void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_NULL_COPY_FN( MPI_Win window, int win_keyval, 
                                               void* extra_state, 
                                               void* attribute_val_in,
                                               void* attribute_val_out, 
                                               int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_DUP_FN( MPI_Win window, int win_keyval, 
                                         void* extra_state,
                                         void* attribute_val_in, 
                                         void* attribute_val_out,
                                         int* flag );








 
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_world;
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_self;
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_group_t ompi_mpi_group_empty;
__attribute__((visibility("default"))) extern struct ompi_predefined_group_t ompi_mpi_group_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_request_t ompi_request_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_max, ompi_mpi_op_min;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_sum;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_prod;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_land;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_band;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_lor, ompi_mpi_op_bor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_lxor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_bxor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_maxloc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_minloc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_replace;

__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_char, ompi_mpi_byte;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int, ompi_mpi_logic;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_short, ompi_mpi_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_float, ompi_mpi_double;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_double;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cplex, ompi_mpi_packed;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_signed_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_short;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned, ompi_mpi_datatype_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long, ompi_mpi_ldblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_ub, ompi_mpi_lb;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_float_int, ompi_mpi_double_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_int, ompi_mpi_2int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_short_int, ompi_mpi_dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer, ompi_mpi_real;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_dblprec, ompi_mpi_character;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2real, ompi_mpi_2dblprec;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2integer, ompi_mpi_longdbl_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_wchar, ompi_mpi_long_long_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_cplex, ompi_mpi_cxx_dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_ldblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_bool;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2cplex, ompi_mpi_2dblcplex;
 

__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical1;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical2;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical4;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical8;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer1;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer2;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer4;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer8;
# 703 "/opt/openmpi-intel11_ib/include/mpi.h"
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real4; 


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real8;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real16;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex8;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex16;


__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex32;


__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errhandler_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errors_are_fatal;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errors_return;

__attribute__((visibility("default"))) extern struct ompi_predefined_win_t ompi_mpi_win_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_file_t ompi_mpi_file_null;

__attribute__((visibility("default"))) extern struct ompi_predefined_info_t ompi_mpi_info_null;

__attribute__((visibility("default"))) extern int *MPI_F_STATUS_IGNORE;
__attribute__((visibility("default"))) extern int *MPI_F_STATUSES_IGNORE;



 





# 754 "/opt/openmpi-intel11_ib/include/mpi.h"

 
# 787 "/opt/openmpi-intel11_ib/include/mpi.h"

 
# 844 "/opt/openmpi-intel11_ib/include/mpi.h"




 







 

__attribute__((visibility("default")))  int MPI_Abort(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int MPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                                  int target_rank, MPI_Aint target_disp, int target_count,
                                  MPI_Datatype target_datatype, MPI_Op op, MPI_Win win); 
__attribute__((visibility("default")))  int MPI_Add_error_class(int *errorclass);
__attribute__((visibility("default")))  int MPI_Add_error_code(int errorclass, int *errorcode);
__attribute__((visibility("default")))  int MPI_Add_error_string(int errorcode, char *string);
__attribute__((visibility("default")))  int MPI_Address(void *location, MPI_Aint *address);
__attribute__((visibility("default")))  int MPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                 void *recvbuf, int recvcount, 
                                 MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                  void *recvbuf, int *recvcounts, 
                                  int *displs, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, 
                                 void *baseptr);
__attribute__((visibility("default")))  int MPI_Allreduce(void *sendbuf, void *recvbuf, int count, 
                                 MPI_Datatype datatype, MPI_Op op, MPI_Comm comm); 
__attribute__((visibility("default")))  int MPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                void *recvbuf, int recvcount, 
                                MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Alltoallv(void *sendbuf, int *sendcounts, int *sdispls, 
                                 MPI_Datatype sendtype, void *recvbuf, int *recvcounts,
                                 int *rdispls, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Alltoallw(void *sendbuf, int *sendcounts, int *sdispls, MPI_Datatype *sendtypes, 
                                 void *recvbuf, int *recvcounts, int *rdispls, MPI_Datatype *recvtypes,
                                 MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Attr_delete(MPI_Comm comm, int keyval);
__attribute__((visibility("default")))  int MPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val);
__attribute__((visibility("default")))  int MPI_Barrier(MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype, 
                             int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Bsend(void *buf, int count, MPI_Datatype datatype, 
                             int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Bsend_init(void *buf, int count, MPI_Datatype datatype, 
                                  int dest, int tag, MPI_Comm comm, MPI_Request *request); 
__attribute__((visibility("default")))  int MPI_Buffer_attach(void *buffer, int size);
__attribute__((visibility("default")))  int MPI_Buffer_detach(void *buffer, int *size);
__attribute__((visibility("default")))  int MPI_Cancel(MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int *coords);
__attribute__((visibility("default")))  int MPI_Cart_create(MPI_Comm old_comm, int ndims, int *dims, 
                                   int *periods, int reorder, MPI_Comm *comm_cart);
__attribute__((visibility("default")))  int MPI_Cart_get(MPI_Comm comm, int maxdims, int *dims, 
                                int *periods, int *coords);
__attribute__((visibility("default")))  int MPI_Cart_map(MPI_Comm comm, int ndims, int *dims, 
                                int *periods, int *newrank);
__attribute__((visibility("default")))  int MPI_Cart_rank(MPI_Comm comm, int *coords, int *rank);
__attribute__((visibility("default")))  int MPI_Cart_shift(MPI_Comm comm, int direction, int disp, 
                                  int *rank_source, int *rank_dest);
__attribute__((visibility("default")))  int MPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *new_comm);
__attribute__((visibility("default")))  int MPI_Cartdim_get(MPI_Comm comm, int *ndims);
__attribute__((visibility("default")))  int MPI_Close_port(char *port_name);
__attribute__((visibility("default")))  int MPI_Comm_accept(char *port_name, MPI_Info info, int root, 
                                   MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_c2f(MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
__attribute__((visibility("default")))  int MPI_Comm_connect(char *port_name, MPI_Info info, int root, 
                                    MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_create_errhandler(MPI_Comm_errhandler_fn *function, 
                                              MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, 
                                          MPI_Comm_delete_attr_function *comm_delete_attr_fn, 
                                          int *comm_keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
__attribute__((visibility("default")))  int MPI_Comm_disconnect(MPI_Comm *comm);
__attribute__((visibility("default")))  int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  MPI_Comm MPI_Comm_f2c(int comm);
__attribute__((visibility("default")))  int MPI_Comm_free_keyval(int *comm_keyval);
__attribute__((visibility("default")))  int MPI_Comm_free(MPI_Comm *comm);
__attribute__((visibility("default")))  int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, 
                                     void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);
__attribute__((visibility("default")))  int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Comm_get_parent(MPI_Comm *parent);
__attribute__((visibility("default")))  int MPI_Comm_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Comm_join(int fd, MPI_Comm *intercomm);
__attribute__((visibility("default")))  int MPI_Comm_rank(MPI_Comm comm, int *rank);
__attribute__((visibility("default")))  int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Comm_remote_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);
__attribute__((visibility("default")))  int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_Comm_set_name(MPI_Comm comm, char *comm_name);
__attribute__((visibility("default")))  int MPI_Comm_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int MPI_Comm_spawn(char *command, char **argv, int maxprocs, MPI_Info info, 
                                  int root, MPI_Comm comm, MPI_Comm *intercomm, 
                                  int *array_of_errcodes);
__attribute__((visibility("default")))  int MPI_Comm_spawn_multiple(int count, char **array_of_commands, char ***array_of_argv, 
                                           int *array_of_maxprocs, MPI_Info *array_of_info, 
                                           int root, MPI_Comm comm, MPI_Comm *intercomm, 
                                           int *array_of_errcodes);
__attribute__((visibility("default")))  int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_test_inter(MPI_Comm comm, int *flag);
__attribute__((visibility("default")))  int MPI_Dims_create(int nnodes, int ndims, int *dims);
__attribute__((visibility("default")))  int MPI_Errhandler_c2f(MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_Errhandler_create(MPI_Handler_function *function, 
                                         MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  MPI_Errhandler MPI_Errhandler_f2c(int errhandler);
__attribute__((visibility("default")))  int MPI_Errhandler_free(MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_Error_class(int errorcode, int *errorclass);
__attribute__((visibility("default")))  int MPI_Error_string(int errorcode, char *string, int *resultlen);
__attribute__((visibility("default")))  int MPI_Exscan(void *sendbuf, void *recvbuf, int count, 
                              MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);

__attribute__((visibility("default")))  int MPI_File_c2f(MPI_File file);
__attribute__((visibility("default")))  MPI_File MPI_File_f2c(int file);
__attribute__((visibility("default")))  int MPI_File_call_errhandler(MPI_File fh, int errorcode);
__attribute__((visibility("default")))  int MPI_File_create_errhandler(MPI_File_errhandler_fn *function,
                                              MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_File_open(MPI_Comm comm, char *filename, int amode,
                                 MPI_Info info, MPI_File *fh);
__attribute__((visibility("default")))  int MPI_File_close(MPI_File *fh);
__attribute__((visibility("default")))  int MPI_File_delete(char *filename, MPI_Info info);
__attribute__((visibility("default")))  int MPI_File_set_size(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int MPI_File_preallocate(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int MPI_File_get_size(MPI_File fh, MPI_Offset *size);
__attribute__((visibility("default")))  int MPI_File_get_group(MPI_File fh, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_File_get_amode(MPI_File fh, int *amode);
__attribute__((visibility("default")))  int MPI_File_set_info(MPI_File fh, MPI_Info info);
__attribute__((visibility("default")))  int MPI_File_get_info(MPI_File fh, MPI_Info *info_used);
__attribute__((visibility("default")))  int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
                                     MPI_Datatype filetype, char *datarep, MPI_Info info);
__attribute__((visibility("default")))  int MPI_File_get_view(MPI_File fh, MPI_Offset *disp,
                                     MPI_Datatype *etype, 
                                     MPI_Datatype *filetype, char *datarep);
__attribute__((visibility("default")))  int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf,
                                    int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                        int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_at(MPI_File fh, MPI_Offset offset, void *buf,
                                     int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                         int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf,
                                     int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, void *buf,
                                      int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_read(MPI_File fh, void *buf, int count,
                                 MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_all(MPI_File fh, void *buf, int count,
                                     MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write(MPI_File fh, void *buf, int count,
                                  MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_all(MPI_File fh, void *buf, int count,
                                      MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_iread(MPI_File fh, void *buf, int count,
                                  MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite(MPI_File fh, void *buf, int count,
                                   MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int MPI_File_get_position(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
                                            MPI_Offset *disp);
__attribute__((visibility("default")))  int MPI_File_read_shared(MPI_File fh, void *buf, int count,
                                        MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_shared(MPI_File fh, void *buf, int count,
					 MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_iread_shared(MPI_File fh, void *buf, int count,
                                         MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite_shared(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_read_ordered(MPI_File fh, void *buf, int count,
                                         MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_ordered(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int MPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                              int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                               int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_write_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_all_begin(MPI_File fh, void *buf, int count,
                                           MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_all_begin(MPI_File fh, void *buf, int count,
                                            MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_write_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_ordered_begin(MPI_File fh, void *buf, int count,
                                               MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_ordered_begin(MPI_File fh, void *buf, int count,
                                                MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_write_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
                                            MPI_Aint *extent);
__attribute__((visibility("default")))  int MPI_File_set_atomicity(MPI_File fh, int flag);
__attribute__((visibility("default")))  int MPI_File_get_atomicity(MPI_File fh, int *flag);
__attribute__((visibility("default")))  int MPI_File_sync(MPI_File fh);

__attribute__((visibility("default")))  int MPI_Finalize(void);
__attribute__((visibility("default")))  int MPI_Finalized(int *flag);
__attribute__((visibility("default")))  int MPI_Free_mem(void *base);
__attribute__((visibility("default")))  int MPI_Gather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                              void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                              int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Gatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                               void *recvbuf, int *recvcounts, int *displs, 
                               MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Get_address(void *location, MPI_Aint *address);
__attribute__((visibility("default")))  int MPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int MPI_Get_elements(MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int MPI_Get(void *origin_addr, int origin_count, 
                           MPI_Datatype origin_datatype, int target_rank, 
                           MPI_Aint target_disp, int target_count, 
                           MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Get_processor_name(char *name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Get_version(int *version, int *subversion);
__attribute__((visibility("default")))  int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index, 
                                    int *edges, int reorder, MPI_Comm *comm_graph);
__attribute__((visibility("default")))  int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, 
                                 int *index, int *edges);
__attribute__((visibility("default")))  int MPI_Graph_map(MPI_Comm comm, int nnodes, int *index, int *edges, 
                                 int *newrank);
__attribute__((visibility("default")))  int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);
__attribute__((visibility("default")))  int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, 
                                       int *neighbors);
__attribute__((visibility("default")))  int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);
__attribute__((visibility("default")))  int MPI_Grequest_complete(MPI_Request request);
__attribute__((visibility("default")))  int MPI_Grequest_start(MPI_Grequest_query_function *query_fn,
                                      MPI_Grequest_free_function *free_fn,
                                      MPI_Grequest_cancel_function *cancel_fn,
                                      void *extra_state, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Group_c2f(MPI_Group group);
__attribute__((visibility("default")))  int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);
__attribute__((visibility("default")))  int MPI_Group_difference(MPI_Group group1, MPI_Group group2, 
                                        MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_excl(MPI_Group group, int n, int *ranks, 
                                  MPI_Group *newgroup);
__attribute__((visibility("default")))  MPI_Group MPI_Group_f2c(int group);
__attribute__((visibility("default")))  int MPI_Group_free(MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Group_incl(MPI_Group group, int n, int *ranks, 
                                  MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_intersection(MPI_Group group1, MPI_Group group2, 
                                          MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], 
                                        MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], 
                                        MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_rank(MPI_Group group, int *rank);
__attribute__((visibility("default")))  int MPI_Group_size(MPI_Group group, int *size);
__attribute__((visibility("default")))  int MPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1, 
                                             MPI_Group group2, int *ranks2);
__attribute__((visibility("default")))  int MPI_Group_union(MPI_Group group1, MPI_Group group2, 
                                   MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest, 
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Info_c2f(MPI_Info info);
__attribute__((visibility("default")))  int MPI_Info_create(MPI_Info *info);
__attribute__((visibility("default")))  int MPI_Info_delete(MPI_Info info, char *key);
__attribute__((visibility("default")))  int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo);
__attribute__((visibility("default")))  MPI_Info MPI_Info_f2c(int info);
__attribute__((visibility("default")))  int MPI_Info_free(MPI_Info *info);
__attribute__((visibility("default")))  int MPI_Info_get(MPI_Info info, char *key, int valuelen, 
                                char *value, int *flag);
__attribute__((visibility("default")))  int MPI_Info_get_nkeys(MPI_Info info, int *nkeys);
__attribute__((visibility("default")))  int MPI_Info_get_nthkey(MPI_Info info, int n, char *key);
__attribute__((visibility("default")))  int MPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen, 
                                         int *flag);
__attribute__((visibility("default")))  int MPI_Info_set(MPI_Info info, char *key, char *value);
__attribute__((visibility("default")))  int MPI_Init(int *argc, char ***argv);
__attribute__((visibility("default")))  int MPI_Initialized(int *flag);
__attribute__((visibility("default")))  int MPI_Init_thread(int *argc, char ***argv, int required, 
                                   int *provided);
__attribute__((visibility("default")))  int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, 
                                        MPI_Comm bridge_comm, int remote_leader, 
                                        int tag, MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int MPI_Intercomm_merge(MPI_Comm intercomm, int high, 
                                       MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, 
                              MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, 
                             int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest, 
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest, 
                             int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest, 
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Is_thread_main(int *flag);
__attribute__((visibility("default")))  int MPI_Keyval_create(MPI_Copy_function *copy_fn, 
                                     MPI_Delete_function *delete_fn, 
                                     int *keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Keyval_free(int *keyval);
__attribute__((visibility("default")))  int MPI_Lookup_name(char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default")))  int MPI_Op_c2f(MPI_Op op); 
__attribute__((visibility("default")))  int MPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);
__attribute__((visibility("default")))  int MPI_Open_port(MPI_Info info, char *port_name);
__attribute__((visibility("default")))  MPI_Op MPI_Op_f2c(int op);
__attribute__((visibility("default")))  int MPI_Op_free(MPI_Op *op);
__attribute__((visibility("default")))  int MPI_Pack_external(char *datarep, void *inbuf, int incount,
                                     MPI_Datatype datatype, void *outbuf,
                                     MPI_Aint outsize, MPI_Aint *position);
__attribute__((visibility("default")))  int MPI_Pack_external_size(char *datarep, int incount, 
                                          MPI_Datatype datatype, MPI_Aint *size);
__attribute__((visibility("default")))  int MPI_Pack(void *inbuf, int incount, MPI_Datatype datatype, 
                            void *outbuf, int outsize, int *position, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, 
                                 int *size);
__attribute__((visibility("default")))  int MPI_Pcontrol(const int level, ...);
__attribute__((visibility("default")))  int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Publish_name(char *service_name, MPI_Info info, 
                                    char *port_name);
__attribute__((visibility("default")))  int MPI_Put(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, 
                           int target_rank, MPI_Aint target_disp, int target_count, 
                           MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Query_thread(int *provided);
__attribute__((visibility("default")))  int MPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source,
                                 int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, 
                            int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Reduce(void *sendbuf, void *recvbuf, int count, 
                              MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcounts, 
                                      MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Register_datarep(char *datarep, 
                                        MPI_Datarep_conversion_function *read_conversion_fn,
                                        MPI_Datarep_conversion_function *write_conversion_fn,
                                        MPI_Datarep_extent_function *dtype_file_extent_fn,
                                        void *extra_state);
__attribute__((visibility("default")))  int MPI_Request_c2f(MPI_Request request);
__attribute__((visibility("default")))  MPI_Request MPI_Request_f2c(int request);
__attribute__((visibility("default")))  int MPI_Request_free(MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Request_get_status(MPI_Request request, int *flag, 
                                          MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Rsend(void *ibuf, int count, MPI_Datatype datatype, int dest, 
                             int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Rsend_init(void *buf, int count, MPI_Datatype datatype, 
                                  int dest, int tag, MPI_Comm comm, 
                                  MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Scan(void *sendbuf, void *recvbuf, int count, 
                            MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Scatter(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                               void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                               int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Scatterv(void *sendbuf, int *sendcounts, int *displs, 
                                MPI_Datatype sendtype, void *recvbuf, int recvcount, 
                                MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Send_init(void *buf, int count, MPI_Datatype datatype, 
                                 int dest, int tag, MPI_Comm comm, 
                                 MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, 
                            int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                int dest, int sendtag, void *recvbuf, int recvcount,
                                MPI_Datatype recvtype, int source, int recvtag, 
                                MPI_Comm comm,  MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype, 
                                        int dest, int sendtag, int source, int recvtag,
                                        MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Ssend_init(void *buf, int count, MPI_Datatype datatype, 
                                  int dest, int tag, MPI_Comm comm, 
                                  MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, 
                             int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Start(MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Startall(int count, MPI_Request *array_of_requests);
__attribute__((visibility("default")))  int MPI_Status_c2f(MPI_Status *c_status, int *f_status);
__attribute__((visibility("default")))  int MPI_Status_f2c(int *f_status, MPI_Status *c_status);
__attribute__((visibility("default")))  int MPI_Status_set_cancelled(MPI_Status *status, int flag);
__attribute__((visibility("default")))  int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype,
                                           int count);
__attribute__((visibility("default")))  int MPI_Testall(int count, MPI_Request array_of_requests[], int *flag, 
                               MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int MPI_Testany(int count, MPI_Request array_of_requests[], int *index, 
                               int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Test_cancelled(MPI_Status *status, int *flag);
__attribute__((visibility("default")))  int MPI_Testsome(int incount, MPI_Request array_of_requests[], 
                                int *outcount, int array_of_indices[], 
                                MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int MPI_Topo_test(MPI_Comm comm, int *status);
__attribute__((visibility("default")))  int MPI_Type_c2f(MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_Type_commit(MPI_Datatype *type);
__attribute__((visibility("default")))  int MPI_Type_contiguous(int count, MPI_Datatype oldtype, 
                                       MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_darray(int size, int rank, int ndims, 
                                          int gsize_array[], int distrib_array[], 
                                          int darg_array[], int psize_array[],
                                          int order, MPI_Datatype oldtype, 
                                          MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_hindexed(int count, int array_of_blocklengths[], 
                                            MPI_Aint array_of_displacements[], 
                                            MPI_Datatype oldtype, 
                                            MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, 
                                           MPI_Datatype oldtype, 
                                           MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, 
                                          MPI_Type_delete_attr_function *type_delete_attr_fn, 
                                          int *type_keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Type_create_indexed_block(int count, int blocklength,
                                                 int array_of_displacements[],
                                                 MPI_Datatype oldtype,
                                                 MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_struct(int count, int array_of_block_lengths[], 
                                          MPI_Aint array_of_displacements[], 
                                          MPI_Datatype array_of_types[], 
                                          MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_subarray(int ndims, int size_array[], int subsize_array[], 
                                            int start_array[], int order, 
                                            MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, 
                                           MPI_Aint extent, MPI_Datatype *newtype); 
__attribute__((visibility("default")))  int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
__attribute__((visibility("default")))  int MPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_extent(MPI_Datatype type, MPI_Aint *extent);
__attribute__((visibility("default")))  int MPI_Type_free(MPI_Datatype *type);
__attribute__((visibility("default")))  int MPI_Type_free_keyval(int *type_keyval);
__attribute__((visibility("default")))  MPI_Datatype MPI_Type_f2c(int datatype);
__attribute__((visibility("default")))  int MPI_Type_get_attr(MPI_Datatype type, int type_keyval, 
                                     void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Type_get_contents(MPI_Datatype mtype, int max_integers, 
                                         int max_addresses, int max_datatypes, 
                                         int array_of_integers[], 
                                         MPI_Aint array_of_addresses[], 
                                         MPI_Datatype array_of_datatypes[]);
__attribute__((visibility("default")))  int MPI_Type_get_envelope(MPI_Datatype type, int *num_integers, 
                                         int *num_addresses, int *num_datatypes, 
                                         int *combiner);
__attribute__((visibility("default")))  int MPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb, 
                                       MPI_Aint *extent);
__attribute__((visibility("default")))  int MPI_Type_get_name(MPI_Datatype type, char *type_name, 
                                     int *resultlen);
__attribute__((visibility("default")))  int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, 
                                            MPI_Aint *true_extent);
__attribute__((visibility("default")))  int MPI_Type_hindexed(int count, int array_of_blocklengths[], 
                                     MPI_Aint array_of_displacements[], 
                                     MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride, 
                                    MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_indexed(int count, int array_of_blocklengths[], 
                                    int array_of_displacements[], 
                                    MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_lb(MPI_Datatype type, MPI_Aint *lb);
__attribute__((visibility("default")))  int MPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);
__attribute__((visibility("default")))  int MPI_Type_set_attr(MPI_Datatype type, int type_keyval, 
                                     void *attr_val);
__attribute__((visibility("default")))  int MPI_Type_set_name(MPI_Datatype type, char *type_name);
__attribute__((visibility("default")))  int MPI_Type_size(MPI_Datatype type, int *size);
__attribute__((visibility("default")))  int MPI_Type_struct(int count, int array_of_blocklengths[], 
                                   MPI_Aint array_of_displacements[], 
                                   MPI_Datatype array_of_types[], 
                                   MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_ub(MPI_Datatype mtype, MPI_Aint *ub);
__attribute__((visibility("default")))  int MPI_Type_vector(int count, int blocklength, int stride, 
                                   MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Unpack(void *inbuf, int insize, int *position, 
                              void *outbuf, int outcount, MPI_Datatype datatype, 
                              MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Unpublish_name(char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default")))  int MPI_Unpack_external (char *datarep, void *inbuf, MPI_Aint insize,
                                        MPI_Aint *position, void *outbuf, int outcount,
                                        MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_Waitall(int count, MPI_Request *array_of_requests, 
                               MPI_Status *array_of_statuses);
__attribute__((visibility("default")))  int MPI_Waitany(int count, MPI_Request *array_of_requests, 
                               int *index, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Wait(MPI_Request *request, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Waitsome(int incount, MPI_Request *array_of_requests, 
                                int *outcount, int *array_of_indices, 
                                MPI_Status *array_of_statuses);
__attribute__((visibility("default")))  int MPI_Win_c2f(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_call_errhandler(MPI_Win win, int errorcode);
__attribute__((visibility("default")))  int MPI_Win_complete(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_create(void *base, MPI_Aint size, int disp_unit, 
                                  MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_create_errhandler(MPI_Win_errhandler_fn *function, 
                                             MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, 
                                         MPI_Win_delete_attr_function *win_delete_attr_fn, 
                                         int *win_keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Win_delete_attr(MPI_Win win, int win_keyval);
__attribute__((visibility("default")))  MPI_Win MPI_Win_f2c(int win);
__attribute__((visibility("default")))  int MPI_Win_fence(int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_free(MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_free_keyval(int *win_keyval);
__attribute__((visibility("default")))  int MPI_Win_get_attr(MPI_Win win, int win_keyval, 
                                    void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Win_get_group(MPI_Win win, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_post(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);
__attribute__((visibility("default")))  int MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_Win_set_name(MPI_Win win, char *win_name);
__attribute__((visibility("default")))  int MPI_Win_start(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_test(MPI_Win win, int *flag);
__attribute__((visibility("default")))  int MPI_Win_unlock(int rank, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_wait(MPI_Win win);
__attribute__((visibility("default")))  double MPI_Wtick(void);
__attribute__((visibility("default")))  double MPI_Wtime(void);


  

 
__attribute__((visibility("default")))  int PMPI_Abort(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int PMPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                                   int target_rank, MPI_Aint target_disp, int target_count,
                                   MPI_Datatype target_datatype, MPI_Op op, MPI_Win win); 
__attribute__((visibility("default")))  int PMPI_Add_error_class(int *errorclass);
__attribute__((visibility("default")))  int PMPI_Add_error_code(int errorclass, int *errorcode);
__attribute__((visibility("default")))  int PMPI_Add_error_string(int errorcode, char *string);
__attribute__((visibility("default")))  int PMPI_Address(void *location, MPI_Aint *address);
__attribute__((visibility("default")))  int PMPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                  void *recvbuf, int recvcount, 
                                  MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                   void *recvbuf, int *recvcounts, 
                                   int *displs, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Alloc_mem(MPI_Aint size, MPI_Info info, 
                                  void *baseptr);
__attribute__((visibility("default")))  int PMPI_Allreduce(void *sendbuf, void *recvbuf, int count, 
                                  MPI_Datatype datatype, MPI_Op op, MPI_Comm comm); 
__attribute__((visibility("default")))  int PMPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                 void *recvbuf, int recvcount, 
                                 MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Alltoallv(void *sendbuf, int *sendcounts, int *sdispls, 
                                  MPI_Datatype sendtype, void *recvbuf, int *recvcounts,
                                  int *rdispls, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Alltoallw(void *sendbuf, int *sendcounts, int *sdispls, MPI_Datatype *sendtypes, 
                    void *recvbuf, int *recvcounts, int *rdispls, MPI_Datatype *recvtypes,
                    MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Attr_delete(MPI_Comm comm, int keyval);
__attribute__((visibility("default")))  int PMPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val);
__attribute__((visibility("default")))  int PMPI_Barrier(MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Bcast(void *buffer, int count, MPI_Datatype datatype, 
                              int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Bsend(void *buf, int count, MPI_Datatype datatype, 
                              int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Bsend_init(void *buf, int count, MPI_Datatype datatype, 
                                   int dest, int tag, MPI_Comm comm, MPI_Request *request); 
__attribute__((visibility("default")))  int PMPI_Buffer_attach(void *buffer, int size);
__attribute__((visibility("default")))  int PMPI_Buffer_detach(void *buffer, int *size);
__attribute__((visibility("default")))  int PMPI_Cancel(MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int *coords);
__attribute__((visibility("default")))  int PMPI_Cart_create(MPI_Comm old_comm, int ndims, int *dims, 
                                    int *periods, int reorder, MPI_Comm *comm_cart);
__attribute__((visibility("default")))  int PMPI_Cart_get(MPI_Comm comm, int maxdims, int *dims, 
                                 int *periods, int *coords);
__attribute__((visibility("default")))  int PMPI_Cart_map(MPI_Comm comm, int ndims, int *dims, 
                                 int *periods, int *newrank);
__attribute__((visibility("default")))  int PMPI_Cart_rank(MPI_Comm comm, int *coords, int *rank);
__attribute__((visibility("default")))  int PMPI_Cart_shift(MPI_Comm comm, int direction, int disp, 
                                   int *rank_source, int *rank_dest);
__attribute__((visibility("default")))  int PMPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *new_comm);
__attribute__((visibility("default")))  int PMPI_Cartdim_get(MPI_Comm comm, int *ndims);
__attribute__((visibility("default")))  int PMPI_Close_port(char *port_name);
__attribute__((visibility("default")))  int PMPI_Comm_accept(char *port_name, MPI_Info info, int root, 
                                    MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_c2f(MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
__attribute__((visibility("default")))  int PMPI_Comm_connect(char *port_name, MPI_Info info, int root, 
                                     MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_create_errhandler(MPI_Comm_errhandler_fn *function, 
                                               MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, 
                                           MPI_Comm_delete_attr_function *comm_delete_attr_fn, 
                                           int *comm_keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
__attribute__((visibility("default")))  int PMPI_Comm_disconnect(MPI_Comm *comm);
__attribute__((visibility("default")))  int PMPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  MPI_Comm PMPI_Comm_f2c(int comm);
__attribute__((visibility("default")))  int PMPI_Comm_free_keyval(int *comm_keyval);
__attribute__((visibility("default")))  int PMPI_Comm_free(MPI_Comm *comm);
__attribute__((visibility("default")))  int PMPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, 
                                      void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);
__attribute__((visibility("default")))  int PMPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Comm_get_parent(MPI_Comm *parent);
__attribute__((visibility("default")))  int PMPI_Comm_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Comm_join(int fd, MPI_Comm *intercomm);
__attribute__((visibility("default")))  int PMPI_Comm_rank(MPI_Comm comm, int *rank);
__attribute__((visibility("default")))  int PMPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Comm_remote_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int PMPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);
__attribute__((visibility("default")))  int PMPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_Comm_set_name(MPI_Comm comm, char *comm_name);
__attribute__((visibility("default")))  int PMPI_Comm_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int PMPI_Comm_spawn(char *command, char **argv, int maxprocs, MPI_Info info, 
                                   int root, MPI_Comm comm, MPI_Comm *intercomm, 
                                   int *array_of_errcodes);
__attribute__((visibility("default")))  int PMPI_Comm_spawn_multiple(int count, char **array_of_commands, char ***array_of_argv, 
                                            int *array_of_maxprocs, MPI_Info *array_of_info, 
                                            int root, MPI_Comm comm, MPI_Comm *intercomm, 
                                            int *array_of_errcodes);
__attribute__((visibility("default")))  int PMPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_test_inter(MPI_Comm comm, int *flag);
__attribute__((visibility("default")))  int PMPI_Dims_create(int nnodes, int ndims, int *dims);
__attribute__((visibility("default")))  int PMPI_Errhandler_c2f(MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_Errhandler_create(MPI_Handler_function *function,
                                          MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  MPI_Errhandler PMPI_Errhandler_f2c(int errhandler);
__attribute__((visibility("default")))  int PMPI_Errhandler_free(MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_Error_class(int errorcode, int *errorclass);
__attribute__((visibility("default")))  int PMPI_Error_string(int errorcode, char *string, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Exscan(void *sendbuf, void *recvbuf, int count,
                               MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);

__attribute__((visibility("default")))  int PMPI_File_c2f(MPI_File file);
__attribute__((visibility("default")))  MPI_File PMPI_File_f2c(int file);
__attribute__((visibility("default")))  int PMPI_File_call_errhandler(MPI_File fh, int errorcode);
__attribute__((visibility("default")))  int PMPI_File_create_errhandler(MPI_File_errhandler_fn *function,
                                               MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_File_open(MPI_Comm comm, char *filename, int amode,
                                  MPI_Info info, MPI_File *fh);
__attribute__((visibility("default")))  int PMPI_File_close(MPI_File *fh);
__attribute__((visibility("default")))  int PMPI_File_delete(char *filename, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_File_set_size(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int PMPI_File_preallocate(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int PMPI_File_get_size(MPI_File fh, MPI_Offset *size);
__attribute__((visibility("default")))  int PMPI_File_get_group(MPI_File fh, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_File_get_amode(MPI_File fh, int *amode);
__attribute__((visibility("default")))  int PMPI_File_set_info(MPI_File fh, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_File_get_info(MPI_File fh, MPI_Info *info_used);
__attribute__((visibility("default")))  int PMPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
                                      MPI_Datatype filetype, char *datarep, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_File_get_view(MPI_File fh, MPI_Offset *disp,
                                      MPI_Datatype *etype, 
                                      MPI_Datatype *filetype, char *datarep);
__attribute__((visibility("default")))  int PMPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf,
                                     int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                         int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_at(MPI_File fh, MPI_Offset offset, void *buf,
                                      int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void *buf,
                                          int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf,
                                      int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, void *buf,
                                       int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_read(MPI_File fh, void *buf, int count,
                                  MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_all(MPI_File fh, void *buf, int count,
                                      MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write(MPI_File fh, void *buf, int count,
                                   MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_all(MPI_File fh, void *buf, int count,
                                       MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_iread(MPI_File fh, void *buf, int count,
                                   MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite(MPI_File fh, void *buf, int count,
                                    MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int PMPI_File_get_position(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int PMPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
                                             MPI_Offset *disp);
__attribute__((visibility("default")))  int PMPI_File_read_shared(MPI_File fh, void *buf, int count,
                                         MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_shared(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_iread_shared(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite_shared(MPI_File fh, void *buf, int count,
                                           MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_read_ordered(MPI_File fh, void *buf, int count,
                                          MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_ordered(MPI_File fh, void *buf, int count,
                                           MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int PMPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int PMPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                               int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,
                                                int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_write_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_all_begin(MPI_File fh, void *buf, int count,
                                            MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_all_begin(MPI_File fh, void *buf, int count,
                                             MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_write_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_ordered_begin(MPI_File fh, void *buf, int count,
                                                MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_ordered_begin(MPI_File fh, void *buf, int count,
                                                 MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_write_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
                                             MPI_Aint *extent);
__attribute__((visibility("default")))  int PMPI_File_set_atomicity(MPI_File fh, int flag);
__attribute__((visibility("default")))  int PMPI_File_get_atomicity(MPI_File fh, int *flag);
__attribute__((visibility("default")))  int PMPI_File_sync(MPI_File fh);

__attribute__((visibility("default")))  int PMPI_Finalize(void);
__attribute__((visibility("default")))  int PMPI_Finalized(int *flag);
__attribute__((visibility("default")))  int PMPI_Free_mem(void *base);
__attribute__((visibility("default")))  int PMPI_Gather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                               void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                               int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Gatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                void *recvbuf, int *recvcounts, int *displs, 
                                MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Get_address(void *location, MPI_Aint *address);
__attribute__((visibility("default")))  int PMPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int PMPI_Get_elements(MPI_Status *status, MPI_Datatype datatype, 
                                     int *count);
__attribute__((visibility("default")))  int PMPI_Get(void *origin_addr, int origin_count, 
                            MPI_Datatype origin_datatype, int target_rank, 
                            MPI_Aint target_disp, int target_count, 
                            MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Get_processor_name(char *name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Get_version(int *version, int *subversion);
__attribute__((visibility("default")))  int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index, 
                                     int *edges, int reorder, MPI_Comm *comm_graph);
__attribute__((visibility("default")))  int PMPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, 
                                  int *index, int *edges);
__attribute__((visibility("default")))  int PMPI_Graph_map(MPI_Comm comm, int nnodes, int *index, int *edges, 
                                  int *newrank);
__attribute__((visibility("default")))  int PMPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);
__attribute__((visibility("default")))  int PMPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, 
                                        int *neighbors);
__attribute__((visibility("default")))  int PMPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);
__attribute__((visibility("default")))  int PMPI_Grequest_complete(MPI_Request request);
__attribute__((visibility("default")))  int PMPI_Grequest_start(MPI_Grequest_query_function *query_fn,
                                       MPI_Grequest_free_function *free_fn,
                                       MPI_Grequest_cancel_function *cancel_fn,
                                       void *extra_state, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Group_c2f(MPI_Group group);
__attribute__((visibility("default")))  int PMPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);
__attribute__((visibility("default")))  int PMPI_Group_difference(MPI_Group group1, MPI_Group group2, 
                                         MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_excl(MPI_Group group, int n, int *ranks, 
                                   MPI_Group *newgroup);
__attribute__((visibility("default")))  MPI_Group PMPI_Group_f2c(int group);
__attribute__((visibility("default")))  int PMPI_Group_free(MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Group_incl(MPI_Group group, int n, int *ranks, 
                                   MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_intersection(MPI_Group group1, MPI_Group group2, 
                                           MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], 
                                         MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], 
                                         MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_rank(MPI_Group group, int *rank);
__attribute__((visibility("default")))  int PMPI_Group_size(MPI_Group group, int *size);
__attribute__((visibility("default")))  int PMPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1, 
                                              MPI_Group group2, int *ranks2);
__attribute__((visibility("default")))  int PMPI_Group_union(MPI_Group group1, MPI_Group group2, 
                                    MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest, 
                               int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Info_c2f(MPI_Info info);
__attribute__((visibility("default")))  int PMPI_Info_create(MPI_Info *info);
__attribute__((visibility("default")))  int PMPI_Info_delete(MPI_Info info, char *key);
__attribute__((visibility("default")))  int PMPI_Info_dup(MPI_Info info, MPI_Info *newinfo);
__attribute__((visibility("default")))  MPI_Info PMPI_Info_f2c(int info);
__attribute__((visibility("default")))  int PMPI_Info_free(MPI_Info *info);
__attribute__((visibility("default")))  int PMPI_Info_get(MPI_Info info, char *key, int valuelen, 
                                 char *value, int *flag);
__attribute__((visibility("default")))  int PMPI_Info_get_nkeys(MPI_Info info, int *nkeys);
__attribute__((visibility("default")))  int PMPI_Info_get_nthkey(MPI_Info info, int n, char *key);
__attribute__((visibility("default")))  int PMPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen, 
                                          int *flag);
__attribute__((visibility("default")))  int PMPI_Info_set(MPI_Info info, char *key, char *value);
__attribute__((visibility("default")))  int PMPI_Init(int *argc, char ***argv);
__attribute__((visibility("default")))  int PMPI_Initialized(int *flag);
__attribute__((visibility("default")))  int PMPI_Init_thread(int *argc, char ***argv, int required, 
                                    int *provided);
__attribute__((visibility("default")))  int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader, 
                                         MPI_Comm bridge_comm, int remote_leader, 
                                         int tag, MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int PMPI_Intercomm_merge(MPI_Comm intercomm, int high, 
                                        MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int PMPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, 
                               MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, 
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest, 
                               int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest, 
                              int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest, 
                               int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Is_thread_main(int *flag);
__attribute__((visibility("default")))  int PMPI_Keyval_create(MPI_Copy_function *copy_fn, 
                                      MPI_Delete_function *delete_fn, 
                                      int *keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Keyval_free(int *keyval);
__attribute__((visibility("default")))  int PMPI_Lookup_name(char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default")))  int PMPI_Op_c2f(MPI_Op op); 
__attribute__((visibility("default")))  int PMPI_Op_create(MPI_User_function *function, int commute, 
                                  MPI_Op *op);
__attribute__((visibility("default")))  int PMPI_Open_port(MPI_Info info, char *port_name);
__attribute__((visibility("default")))  MPI_Op PMPI_Op_f2c(int op);
__attribute__((visibility("default")))  int PMPI_Op_free(MPI_Op *op);
__attribute__((visibility("default")))  int PMPI_Pack_external(char *datarep, void *inbuf, int incount,
                                      MPI_Datatype datatype, void *outbuf,
                                      MPI_Aint outsize, MPI_Aint *position);
__attribute__((visibility("default")))  int PMPI_Pack_external_size(char *datarep, int incount, 
                                           MPI_Datatype datatype, MPI_Aint *size);
__attribute__((visibility("default")))  int PMPI_Pack(void *inbuf, int incount, MPI_Datatype datatype, 
                             void *outbuf, int outsize, int *position, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, 
                                  int *size);
__attribute__((visibility("default")))  int PMPI_Pcontrol(const int level, ...);
__attribute__((visibility("default")))  int PMPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Publish_name(char *service_name, MPI_Info info, 
                                     char *port_name);
__attribute__((visibility("default")))  int PMPI_Put(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, 
                            int target_rank, MPI_Aint target_disp, int target_count, 
                            MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Query_thread(int *provided);
__attribute__((visibility("default")))  int PMPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source,
                                  int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, 
                             int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Reduce(void *sendbuf, void *recvbuf, int count, 
                               MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcounts, 
                                       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Register_datarep(char *datarep, 
                                         MPI_Datarep_conversion_function *read_conversion_fn,
                                         MPI_Datarep_conversion_function *write_conversion_fn,
                                         MPI_Datarep_extent_function *dtype_file_extent_fn,
                                         void *extra_state);
__attribute__((visibility("default")))  int PMPI_Request_c2f(MPI_Request request);
__attribute__((visibility("default")))  MPI_Request PMPI_Request_f2c(int request);
__attribute__((visibility("default")))  int PMPI_Request_free(MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Request_get_status(MPI_Request request, int *flag, 
                                           MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Rsend(void *ibuf, int count, MPI_Datatype datatype, int dest, 
                              int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Rsend_init(void *buf, int count, MPI_Datatype datatype, 
                                   int dest, int tag, MPI_Comm comm, 
                                   MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Scan(void *sendbuf, void *recvbuf, int count, 
                             MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Scatter(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                                int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Scatterv(void *sendbuf, int *sendcounts, int *displs, 
                                 MPI_Datatype sendtype, void *recvbuf, int recvcount, 
                                 MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Send_init(void *buf, int count, MPI_Datatype datatype, 
                                  int dest, int tag, MPI_Comm comm, 
                                  MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, 
                             int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                                 int dest, int sendtag, void *recvbuf, int recvcount,
                                 MPI_Datatype recvtype, int source, int recvtag, 
                                 MPI_Comm comm,  MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype, 
                                         int dest, int sendtag, int source, int recvtag,
                                         MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Ssend_init(void *buf, int count, MPI_Datatype datatype, 
                                   int dest, int tag, MPI_Comm comm, 
                                   MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, 
                              int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Start(MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Startall(int count, MPI_Request *array_of_requests);
__attribute__((visibility("default")))  int PMPI_Status_c2f(MPI_Status *c_status, int *f_status);
__attribute__((visibility("default")))  int PMPI_Status_f2c(int *f_status, MPI_Status *c_status);
__attribute__((visibility("default")))  int PMPI_Status_set_cancelled(MPI_Status *status, int flag);
__attribute__((visibility("default")))  int PMPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype,
                                            int count);
__attribute__((visibility("default")))  int PMPI_Testall(int count, MPI_Request array_of_requests[], int *flag, 
                                MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int PMPI_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Test(MPI_Request *request, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Test_cancelled(MPI_Status *status, int *flag);
__attribute__((visibility("default")))  int PMPI_Testsome(int incount, MPI_Request array_of_requests[], 
                                 int *outcount, int array_of_indices[], 
                                 MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int PMPI_Topo_test(MPI_Comm comm, int *status);
__attribute__((visibility("default")))  int PMPI_Type_c2f(MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_Type_commit(MPI_Datatype *type);
__attribute__((visibility("default")))  int PMPI_Type_contiguous(int count, MPI_Datatype oldtype, 
                                        MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_darray(int size, int rank, int ndims, 
                                           int gsize_array[], int distrib_array[], 
                                           int darg_array[], int psize_array[],
                                           int order, MPI_Datatype oldtype, 
                                           MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_hindexed(int count, int array_of_blocklengths[], 
                                             MPI_Aint array_of_displacements[], 
                                             MPI_Datatype oldtype, 
                                             MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, 
                                            MPI_Datatype oldtype, 
                                            MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, 
                                           MPI_Type_delete_attr_function *type_delete_attr_fn, 
                                           int *type_keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Type_create_indexed_block(int count, int blocklength,
                                                  int array_of_displacements[],
                                                  MPI_Datatype oldtype,
                                                  MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_struct(int count, int array_of_block_lengths[], 
                                           MPI_Aint array_of_displacements[], 
                                           MPI_Datatype array_of_types[], 
                                           MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_subarray(int ndims, int size_array[], int subsize_array[], 
                                             int start_array[], int order, 
                                             MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, 
                                            MPI_Aint extent, MPI_Datatype *newtype); 
__attribute__((visibility("default")))  int PMPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
__attribute__((visibility("default")))  int PMPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_extent(MPI_Datatype type, MPI_Aint *extent);
__attribute__((visibility("default")))  int PMPI_Type_free(MPI_Datatype *type);
__attribute__((visibility("default")))  int PMPI_Type_free_keyval(int *type_keyval);
__attribute__((visibility("default")))  MPI_Datatype PMPI_Type_f2c(int datatype);
__attribute__((visibility("default")))  int PMPI_Type_get_attr(MPI_Datatype type, int type_keyval, 
                                      void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Type_get_contents(MPI_Datatype mtype, int max_integers, 
                                          int max_addresses, int max_datatypes, 
                                          int array_of_integers[], 
                                          MPI_Aint array_of_addresses[], 
                                          MPI_Datatype array_of_datatypes[]);
__attribute__((visibility("default")))  int PMPI_Type_get_envelope(MPI_Datatype type, int *num_integers, 
                                          int *num_addresses, int *num_datatypes, 
                                          int *combiner);
__attribute__((visibility("default")))  int PMPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb, 
                                        MPI_Aint *extent);
__attribute__((visibility("default")))  int PMPI_Type_get_name(MPI_Datatype type, char *type_name, 
                                      int *resultlen);
__attribute__((visibility("default")))  int PMPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, 
                                             MPI_Aint *true_extent);
__attribute__((visibility("default")))  int PMPI_Type_hindexed(int count, int array_of_blocklengths[], 
                                      MPI_Aint array_of_displacements[], 
                                      MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_hvector(int count, int blocklength, MPI_Aint stride, 
                                     MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_indexed(int count, int array_of_blocklengths[], 
                                     int array_of_displacements[], 
                                     MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_lb(MPI_Datatype type, MPI_Aint *lb);
__attribute__((visibility("default")))  int PMPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);
__attribute__((visibility("default")))  int PMPI_Type_set_attr(MPI_Datatype type, int type_keyval, 
                                      void *attr_val);
__attribute__((visibility("default")))  int PMPI_Type_set_name(MPI_Datatype type, char *type_name);
__attribute__((visibility("default")))  int PMPI_Type_size(MPI_Datatype type, int *size);
__attribute__((visibility("default")))  int PMPI_Type_struct(int count, int array_of_blocklengths[], 
                                    MPI_Aint array_of_displacements[], 
                                    MPI_Datatype array_of_types[], 
                                    MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_ub(MPI_Datatype mtype, MPI_Aint *ub);
__attribute__((visibility("default")))  int PMPI_Type_vector(int count, int blocklength, int stride, 
                                    MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Unpack(void *inbuf, int insize, int *position, 
                               void *outbuf, int outcount, MPI_Datatype datatype, 
                               MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Unpublish_name(char *service_name, MPI_Info info, 
                                       char *port_name);
__attribute__((visibility("default")))  int PMPI_Unpack_external (char *datarep, void *inbuf, MPI_Aint insize,
                                         MPI_Aint *position, void *outbuf, int outcount,
                                         MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_Waitall(int count, MPI_Request *array_of_requests, 
                                MPI_Status *array_of_statuses);
__attribute__((visibility("default")))  int PMPI_Waitany(int count, MPI_Request *array_of_requests, 
                                int *index, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Wait(MPI_Request *request, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Waitsome(int incount, MPI_Request *array_of_requests, 
                                 int *outcount, int *array_of_indices, 
                                 MPI_Status *array_of_statuses);
__attribute__((visibility("default")))  int PMPI_Win_c2f(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_call_errhandler(MPI_Win win, int errorcode);
__attribute__((visibility("default")))  int PMPI_Win_complete(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_create(void *base, MPI_Aint size, int disp_unit, 
                                   MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_create_errhandler(MPI_Win_errhandler_fn *function, 
                                              MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, 
                                          MPI_Win_delete_attr_function *win_delete_attr_fn, 
                                          int *win_keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Win_delete_attr(MPI_Win win, int win_keyval);
__attribute__((visibility("default")))  MPI_Win PMPI_Win_f2c(int win);
__attribute__((visibility("default")))  int PMPI_Win_fence(int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_free(MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_free_keyval(int *win_keyval);
__attribute__((visibility("default")))  int PMPI_Win_get_attr(MPI_Win win, int win_keyval, 
                                     void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Win_get_group(MPI_Win win, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_post(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);
__attribute__((visibility("default")))  int PMPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_Win_set_name(MPI_Win win, char *win_name);
__attribute__((visibility("default")))  int PMPI_Win_start(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_test(MPI_Win win, int *flag);
__attribute__((visibility("default")))  int PMPI_Win_unlock(int rank, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_wait(MPI_Win win);
__attribute__((visibility("default")))  double PMPI_Wtick(void);
__attribute__((visibility("default")))  double PMPI_Wtime(void);












 






# 1896 "/opt/openmpi-intel11_ib/include/mpi.h"

# 7 "PreFoF.c" 2
# 1 "../eunha.h" 1
# 1 "../astrounits.h" 1



 

# 2 "../eunha.h" 2

# 9 "../eunha.h"

typedef float PosType;





typedef float DenType;


















# 1 "/home/kjhan/local/include/fftw3.h" 1





























 














 












 


















 
# 88 "/home/kjhan/local/include/fftw3.h"

enum fftw_r2r_kind_do_not_use_me {
     FFTW_R2HC=0, FFTW_HC2R=1, FFTW_DHT=2,
     FFTW_REDFT00=3, FFTW_REDFT01=4, FFTW_REDFT10=5, FFTW_REDFT11=6,
     FFTW_RODFT00=7, FFTW_RODFT01=8, FFTW_RODFT10=9, FFTW_RODFT11=10
};

struct fftw_iodim_do_not_use_me {
     int n;                      
     int is;			 
     int os;			 
};

# 1 "/opt/intel/Compiler/11.1/075/include/stddef.h" 1 3







 




 


 



 

# 28 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 
# 39 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3
		 










# 57 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3

# 69 "/opt/intel/Compiler/11.1/075/include/stddef.h" 3







   
# 102 "/home/kjhan/local/include/fftw3.h" 2
struct fftw_iodim64_do_not_use_me {
     ptrdiff_t n;                      
     ptrdiff_t is;			 
     ptrdiff_t os;			 
};

typedef void (*fftw_write_char_func_do_not_use_me)(char c, void *);
typedef int (*fftw_read_char_func_do_not_use_me)(void *);








 

# 351 "/home/kjhan/local/include/fftw3.h"


 

typedef double fftw_complex[2]; typedef struct fftw_plan_s *fftw_plan; typedef struct fftw_iodim_do_not_use_me fftw_iodim; typedef struct fftw_iodim64_do_not_use_me fftw_iodim64; typedef enum fftw_r2r_kind_do_not_use_me fftw_r2r_kind; typedef fftw_write_char_func_do_not_use_me fftw_write_char_func; typedef fftw_read_char_func_do_not_use_me fftw_read_char_func; extern void fftw_execute(const fftw_plan p); extern fftw_plan fftw_plan_dft(int rank, const int *n, fftw_complex *in, fftw_complex *out, int sign, unsigned flags); extern fftw_plan fftw_plan_dft_1d(int n, fftw_complex *in, fftw_complex *out, int sign, unsigned flags); extern fftw_plan fftw_plan_dft_2d(int n0, int n1, fftw_complex *in, fftw_complex *out, int sign, unsigned flags); extern fftw_plan fftw_plan_dft_3d(int n0, int n1, int n2, fftw_complex *in, fftw_complex *out, int sign, unsigned flags); extern fftw_plan fftw_plan_many_dft(int rank, const int *n, int howmany, fftw_complex *in, const int *inembed, int istride, int idist, fftw_complex *out, const int *onembed, int ostride, int odist, int sign, unsigned flags); extern fftw_plan fftw_plan_guru_dft(int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, fftw_complex *in, fftw_complex *out, int sign, unsigned flags); extern fftw_plan fftw_plan_guru_split_dft(int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, double *ri, double *ii, double *ro, double *io, unsigned flags); extern fftw_plan fftw_plan_guru64_dft(int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, fftw_complex *in, fftw_complex *out, int sign, unsigned flags); extern fftw_plan fftw_plan_guru64_split_dft(int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, double *ri, double *ii, double *ro, double *io, unsigned flags); extern void fftw_execute_dft(const fftw_plan p, fftw_complex *in, fftw_complex *out); extern void fftw_execute_split_dft(const fftw_plan p, double *ri, double *ii, double *ro, double *io); extern fftw_plan fftw_plan_many_dft_r2c(int rank, const int *n, int howmany, double *in, const int *inembed, int istride, int idist, fftw_complex *out, const int *onembed, int ostride, int odist, unsigned flags); extern fftw_plan fftw_plan_dft_r2c(int rank, const int *n, double *in, fftw_complex *out, unsigned flags); extern fftw_plan fftw_plan_dft_r2c_1d(int n,double *in,fftw_complex *out,unsigned flags); extern fftw_plan fftw_plan_dft_r2c_2d(int n0, int n1, double *in, fftw_complex *out, unsigned flags); extern fftw_plan fftw_plan_dft_r2c_3d(int n0, int n1, int n2, double *in, fftw_complex *out, unsigned flags); extern fftw_plan fftw_plan_many_dft_c2r(int rank, const int *n, int howmany, fftw_complex *in, const int *inembed, int istride, int idist, double *out, const int *onembed, int ostride, int odist, unsigned flags); extern fftw_plan fftw_plan_dft_c2r(int rank, const int *n, fftw_complex *in, double *out, unsigned flags); extern fftw_plan fftw_plan_dft_c2r_1d(int n,fftw_complex *in,double *out,unsigned flags); extern fftw_plan fftw_plan_dft_c2r_2d(int n0, int n1, fftw_complex *in, double *out, unsigned flags); extern fftw_plan fftw_plan_dft_c2r_3d(int n0, int n1, int n2, fftw_complex *in, double *out, unsigned flags); extern fftw_plan fftw_plan_guru_dft_r2c(int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, double *in, fftw_complex *out, unsigned flags); extern fftw_plan fftw_plan_guru_dft_c2r(int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, fftw_complex *in, double *out, unsigned flags); extern fftw_plan fftw_plan_guru_split_dft_r2c( int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, double *in, double *ro, double *io, unsigned flags); extern fftw_plan fftw_plan_guru_split_dft_c2r( int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, double *ri, double *ii, double *out, unsigned flags); extern fftw_plan fftw_plan_guru64_dft_r2c(int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, double *in, fftw_complex *out, unsigned flags); extern fftw_plan fftw_plan_guru64_dft_c2r(int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, fftw_complex *in, double *out, unsigned flags); extern fftw_plan fftw_plan_guru64_split_dft_r2c( int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, double *in, double *ro, double *io, unsigned flags); extern fftw_plan fftw_plan_guru64_split_dft_c2r( int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, double *ri, double *ii, double *out, unsigned flags); extern void fftw_execute_dft_r2c(const fftw_plan p, double *in, fftw_complex *out); extern void fftw_execute_dft_c2r(const fftw_plan p, fftw_complex *in, double *out); extern void fftw_execute_split_dft_r2c(const fftw_plan p, double *in, double *ro, double *io); extern void fftw_execute_split_dft_c2r(const fftw_plan p, double *ri, double *ii, double *out); extern fftw_plan fftw_plan_many_r2r(int rank, const int *n, int howmany, double *in, const int *inembed, int istride, int idist, double *out, const int *onembed, int ostride, int odist, const fftw_r2r_kind *kind, unsigned flags); extern fftw_plan fftw_plan_r2r(int rank, const int *n, double *in, double *out, const fftw_r2r_kind *kind, unsigned flags); extern fftw_plan fftw_plan_r2r_1d(int n, double *in, double *out, fftw_r2r_kind kind, unsigned flags); extern fftw_plan fftw_plan_r2r_2d(int n0, int n1, double *in, double *out, fftw_r2r_kind kind0, fftw_r2r_kind kind1, unsigned flags); extern fftw_plan fftw_plan_r2r_3d(int n0, int n1, int n2, double *in, double *out, fftw_r2r_kind kind0, fftw_r2r_kind kind1, fftw_r2r_kind kind2, unsigned flags); extern fftw_plan fftw_plan_guru_r2r(int rank, const fftw_iodim *dims, int howmany_rank, const fftw_iodim *howmany_dims, double *in, double *out, const fftw_r2r_kind *kind, unsigned flags); extern fftw_plan fftw_plan_guru64_r2r(int rank, const fftw_iodim64 *dims, int howmany_rank, const fftw_iodim64 *howmany_dims, double *in, double *out, const fftw_r2r_kind *kind, unsigned flags); extern void fftw_execute_r2r(const fftw_plan p, double *in, double *out); extern void fftw_destroy_plan(fftw_plan p); extern void fftw_forget_wisdom(void); extern void fftw_cleanup(void); extern void fftw_set_timelimit(double t); extern void fftw_plan_with_nthreads(int nthreads); extern int fftw_init_threads(void); extern void fftw_cleanup_threads(void); extern int fftw_export_wisdom_to_filename(const char *filename); extern void fftw_export_wisdom_to_file(FILE *output_file); extern char *fftw_export_wisdom_to_string(void); extern void fftw_export_wisdom(fftw_write_char_func write_char, void *data); extern int fftw_import_system_wisdom(void); extern int fftw_import_wisdom_from_filename(const char *filename); extern int fftw_import_wisdom_from_file(FILE *input_file); extern int fftw_import_wisdom_from_string(const char *input_string); extern int fftw_import_wisdom(fftw_read_char_func read_char, void *data); extern void fftw_fprint_plan(const fftw_plan p, FILE *output_file); extern void fftw_print_plan(const fftw_plan p); extern char *fftw_sprint_plan(const fftw_plan p); extern void *fftw_malloc(size_t n); extern double *fftw_alloc_real(size_t n); extern fftw_complex *fftw_alloc_complex(size_t n); extern void fftw_free(void *p); extern void fftw_flops(const fftw_plan p, double *add, double *mul, double *fmas); extern double fftw_estimate_cost(const fftw_plan p); extern double fftw_cost(const fftw_plan p); extern int fftw_alignment_of(double *p); extern const char fftw_version[]; extern const char fftw_cc[]; extern const char fftw_codelet_optim[];
typedef float fftwf_complex[2]; typedef struct fftwf_plan_s *fftwf_plan; typedef struct fftw_iodim_do_not_use_me fftwf_iodim; typedef struct fftw_iodim64_do_not_use_me fftwf_iodim64; typedef enum fftw_r2r_kind_do_not_use_me fftwf_r2r_kind; typedef fftw_write_char_func_do_not_use_me fftwf_write_char_func; typedef fftw_read_char_func_do_not_use_me fftwf_read_char_func; extern void fftwf_execute(const fftwf_plan p); extern fftwf_plan fftwf_plan_dft(int rank, const int *n, fftwf_complex *in, fftwf_complex *out, int sign, unsigned flags); extern fftwf_plan fftwf_plan_dft_1d(int n, fftwf_complex *in, fftwf_complex *out, int sign, unsigned flags); extern fftwf_plan fftwf_plan_dft_2d(int n0, int n1, fftwf_complex *in, fftwf_complex *out, int sign, unsigned flags); extern fftwf_plan fftwf_plan_dft_3d(int n0, int n1, int n2, fftwf_complex *in, fftwf_complex *out, int sign, unsigned flags); extern fftwf_plan fftwf_plan_many_dft(int rank, const int *n, int howmany, fftwf_complex *in, const int *inembed, int istride, int idist, fftwf_complex *out, const int *onembed, int ostride, int odist, int sign, unsigned flags); extern fftwf_plan fftwf_plan_guru_dft(int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, fftwf_complex *in, fftwf_complex *out, int sign, unsigned flags); extern fftwf_plan fftwf_plan_guru_split_dft(int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, float *ri, float *ii, float *ro, float *io, unsigned flags); extern fftwf_plan fftwf_plan_guru64_dft(int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, fftwf_complex *in, fftwf_complex *out, int sign, unsigned flags); extern fftwf_plan fftwf_plan_guru64_split_dft(int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, float *ri, float *ii, float *ro, float *io, unsigned flags); extern void fftwf_execute_dft(const fftwf_plan p, fftwf_complex *in, fftwf_complex *out); extern void fftwf_execute_split_dft(const fftwf_plan p, float *ri, float *ii, float *ro, float *io); extern fftwf_plan fftwf_plan_many_dft_r2c(int rank, const int *n, int howmany, float *in, const int *inembed, int istride, int idist, fftwf_complex *out, const int *onembed, int ostride, int odist, unsigned flags); extern fftwf_plan fftwf_plan_dft_r2c(int rank, const int *n, float *in, fftwf_complex *out, unsigned flags); extern fftwf_plan fftwf_plan_dft_r2c_1d(int n,float *in,fftwf_complex *out,unsigned flags); extern fftwf_plan fftwf_plan_dft_r2c_2d(int n0, int n1, float *in, fftwf_complex *out, unsigned flags); extern fftwf_plan fftwf_plan_dft_r2c_3d(int n0, int n1, int n2, float *in, fftwf_complex *out, unsigned flags); extern fftwf_plan fftwf_plan_many_dft_c2r(int rank, const int *n, int howmany, fftwf_complex *in, const int *inembed, int istride, int idist, float *out, const int *onembed, int ostride, int odist, unsigned flags); extern fftwf_plan fftwf_plan_dft_c2r(int rank, const int *n, fftwf_complex *in, float *out, unsigned flags); extern fftwf_plan fftwf_plan_dft_c2r_1d(int n,fftwf_complex *in,float *out,unsigned flags); extern fftwf_plan fftwf_plan_dft_c2r_2d(int n0, int n1, fftwf_complex *in, float *out, unsigned flags); extern fftwf_plan fftwf_plan_dft_c2r_3d(int n0, int n1, int n2, fftwf_complex *in, float *out, unsigned flags); extern fftwf_plan fftwf_plan_guru_dft_r2c(int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, float *in, fftwf_complex *out, unsigned flags); extern fftwf_plan fftwf_plan_guru_dft_c2r(int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, fftwf_complex *in, float *out, unsigned flags); extern fftwf_plan fftwf_plan_guru_split_dft_r2c( int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, float *in, float *ro, float *io, unsigned flags); extern fftwf_plan fftwf_plan_guru_split_dft_c2r( int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, float *ri, float *ii, float *out, unsigned flags); extern fftwf_plan fftwf_plan_guru64_dft_r2c(int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, float *in, fftwf_complex *out, unsigned flags); extern fftwf_plan fftwf_plan_guru64_dft_c2r(int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, fftwf_complex *in, float *out, unsigned flags); extern fftwf_plan fftwf_plan_guru64_split_dft_r2c( int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, float *in, float *ro, float *io, unsigned flags); extern fftwf_plan fftwf_plan_guru64_split_dft_c2r( int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, float *ri, float *ii, float *out, unsigned flags); extern void fftwf_execute_dft_r2c(const fftwf_plan p, float *in, fftwf_complex *out); extern void fftwf_execute_dft_c2r(const fftwf_plan p, fftwf_complex *in, float *out); extern void fftwf_execute_split_dft_r2c(const fftwf_plan p, float *in, float *ro, float *io); extern void fftwf_execute_split_dft_c2r(const fftwf_plan p, float *ri, float *ii, float *out); extern fftwf_plan fftwf_plan_many_r2r(int rank, const int *n, int howmany, float *in, const int *inembed, int istride, int idist, float *out, const int *onembed, int ostride, int odist, const fftwf_r2r_kind *kind, unsigned flags); extern fftwf_plan fftwf_plan_r2r(int rank, const int *n, float *in, float *out, const fftwf_r2r_kind *kind, unsigned flags); extern fftwf_plan fftwf_plan_r2r_1d(int n, float *in, float *out, fftwf_r2r_kind kind, unsigned flags); extern fftwf_plan fftwf_plan_r2r_2d(int n0, int n1, float *in, float *out, fftwf_r2r_kind kind0, fftwf_r2r_kind kind1, unsigned flags); extern fftwf_plan fftwf_plan_r2r_3d(int n0, int n1, int n2, float *in, float *out, fftwf_r2r_kind kind0, fftwf_r2r_kind kind1, fftwf_r2r_kind kind2, unsigned flags); extern fftwf_plan fftwf_plan_guru_r2r(int rank, const fftwf_iodim *dims, int howmany_rank, const fftwf_iodim *howmany_dims, float *in, float *out, const fftwf_r2r_kind *kind, unsigned flags); extern fftwf_plan fftwf_plan_guru64_r2r(int rank, const fftwf_iodim64 *dims, int howmany_rank, const fftwf_iodim64 *howmany_dims, float *in, float *out, const fftwf_r2r_kind *kind, unsigned flags); extern void fftwf_execute_r2r(const fftwf_plan p, float *in, float *out); extern void fftwf_destroy_plan(fftwf_plan p); extern void fftwf_forget_wisdom(void); extern void fftwf_cleanup(void); extern void fftwf_set_timelimit(double t); extern void fftwf_plan_with_nthreads(int nthreads); extern int fftwf_init_threads(void); extern void fftwf_cleanup_threads(void); extern int fftwf_export_wisdom_to_filename(const char *filename); extern void fftwf_export_wisdom_to_file(FILE *output_file); extern char *fftwf_export_wisdom_to_string(void); extern void fftwf_export_wisdom(fftwf_write_char_func write_char, void *data); extern int fftwf_import_system_wisdom(void); extern int fftwf_import_wisdom_from_filename(const char *filename); extern int fftwf_import_wisdom_from_file(FILE *input_file); extern int fftwf_import_wisdom_from_string(const char *input_string); extern int fftwf_import_wisdom(fftwf_read_char_func read_char, void *data); extern void fftwf_fprint_plan(const fftwf_plan p, FILE *output_file); extern void fftwf_print_plan(const fftwf_plan p); extern char *fftwf_sprint_plan(const fftwf_plan p); extern void *fftwf_malloc(size_t n); extern float *fftwf_alloc_real(size_t n); extern fftwf_complex *fftwf_alloc_complex(size_t n); extern void fftwf_free(void *p); extern void fftwf_flops(const fftwf_plan p, double *add, double *mul, double *fmas); extern double fftwf_estimate_cost(const fftwf_plan p); extern double fftwf_cost(const fftwf_plan p); extern int fftwf_alignment_of(float *p); extern const char fftwf_version[]; extern const char fftwf_cc[]; extern const char fftwf_codelet_optim[];
typedef long double fftwl_complex[2]; typedef struct fftwl_plan_s *fftwl_plan; typedef struct fftw_iodim_do_not_use_me fftwl_iodim; typedef struct fftw_iodim64_do_not_use_me fftwl_iodim64; typedef enum fftw_r2r_kind_do_not_use_me fftwl_r2r_kind; typedef fftw_write_char_func_do_not_use_me fftwl_write_char_func; typedef fftw_read_char_func_do_not_use_me fftwl_read_char_func; extern void fftwl_execute(const fftwl_plan p); extern fftwl_plan fftwl_plan_dft(int rank, const int *n, fftwl_complex *in, fftwl_complex *out, int sign, unsigned flags); extern fftwl_plan fftwl_plan_dft_1d(int n, fftwl_complex *in, fftwl_complex *out, int sign, unsigned flags); extern fftwl_plan fftwl_plan_dft_2d(int n0, int n1, fftwl_complex *in, fftwl_complex *out, int sign, unsigned flags); extern fftwl_plan fftwl_plan_dft_3d(int n0, int n1, int n2, fftwl_complex *in, fftwl_complex *out, int sign, unsigned flags); extern fftwl_plan fftwl_plan_many_dft(int rank, const int *n, int howmany, fftwl_complex *in, const int *inembed, int istride, int idist, fftwl_complex *out, const int *onembed, int ostride, int odist, int sign, unsigned flags); extern fftwl_plan fftwl_plan_guru_dft(int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, fftwl_complex *in, fftwl_complex *out, int sign, unsigned flags); extern fftwl_plan fftwl_plan_guru_split_dft(int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, long double *ri, long double *ii, long double *ro, long double *io, unsigned flags); extern fftwl_plan fftwl_plan_guru64_dft(int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, fftwl_complex *in, fftwl_complex *out, int sign, unsigned flags); extern fftwl_plan fftwl_plan_guru64_split_dft(int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, long double *ri, long double *ii, long double *ro, long double *io, unsigned flags); extern void fftwl_execute_dft(const fftwl_plan p, fftwl_complex *in, fftwl_complex *out); extern void fftwl_execute_split_dft(const fftwl_plan p, long double *ri, long double *ii, long double *ro, long double *io); extern fftwl_plan fftwl_plan_many_dft_r2c(int rank, const int *n, int howmany, long double *in, const int *inembed, int istride, int idist, fftwl_complex *out, const int *onembed, int ostride, int odist, unsigned flags); extern fftwl_plan fftwl_plan_dft_r2c(int rank, const int *n, long double *in, fftwl_complex *out, unsigned flags); extern fftwl_plan fftwl_plan_dft_r2c_1d(int n,long double *in,fftwl_complex *out,unsigned flags); extern fftwl_plan fftwl_plan_dft_r2c_2d(int n0, int n1, long double *in, fftwl_complex *out, unsigned flags); extern fftwl_plan fftwl_plan_dft_r2c_3d(int n0, int n1, int n2, long double *in, fftwl_complex *out, unsigned flags); extern fftwl_plan fftwl_plan_many_dft_c2r(int rank, const int *n, int howmany, fftwl_complex *in, const int *inembed, int istride, int idist, long double *out, const int *onembed, int ostride, int odist, unsigned flags); extern fftwl_plan fftwl_plan_dft_c2r(int rank, const int *n, fftwl_complex *in, long double *out, unsigned flags); extern fftwl_plan fftwl_plan_dft_c2r_1d(int n,fftwl_complex *in,long double *out,unsigned flags); extern fftwl_plan fftwl_plan_dft_c2r_2d(int n0, int n1, fftwl_complex *in, long double *out, unsigned flags); extern fftwl_plan fftwl_plan_dft_c2r_3d(int n0, int n1, int n2, fftwl_complex *in, long double *out, unsigned flags); extern fftwl_plan fftwl_plan_guru_dft_r2c(int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, long double *in, fftwl_complex *out, unsigned flags); extern fftwl_plan fftwl_plan_guru_dft_c2r(int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, fftwl_complex *in, long double *out, unsigned flags); extern fftwl_plan fftwl_plan_guru_split_dft_r2c( int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, long double *in, long double *ro, long double *io, unsigned flags); extern fftwl_plan fftwl_plan_guru_split_dft_c2r( int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, long double *ri, long double *ii, long double *out, unsigned flags); extern fftwl_plan fftwl_plan_guru64_dft_r2c(int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, long double *in, fftwl_complex *out, unsigned flags); extern fftwl_plan fftwl_plan_guru64_dft_c2r(int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, fftwl_complex *in, long double *out, unsigned flags); extern fftwl_plan fftwl_plan_guru64_split_dft_r2c( int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, long double *in, long double *ro, long double *io, unsigned flags); extern fftwl_plan fftwl_plan_guru64_split_dft_c2r( int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, long double *ri, long double *ii, long double *out, unsigned flags); extern void fftwl_execute_dft_r2c(const fftwl_plan p, long double *in, fftwl_complex *out); extern void fftwl_execute_dft_c2r(const fftwl_plan p, fftwl_complex *in, long double *out); extern void fftwl_execute_split_dft_r2c(const fftwl_plan p, long double *in, long double *ro, long double *io); extern void fftwl_execute_split_dft_c2r(const fftwl_plan p, long double *ri, long double *ii, long double *out); extern fftwl_plan fftwl_plan_many_r2r(int rank, const int *n, int howmany, long double *in, const int *inembed, int istride, int idist, long double *out, const int *onembed, int ostride, int odist, const fftwl_r2r_kind *kind, unsigned flags); extern fftwl_plan fftwl_plan_r2r(int rank, const int *n, long double *in, long double *out, const fftwl_r2r_kind *kind, unsigned flags); extern fftwl_plan fftwl_plan_r2r_1d(int n, long double *in, long double *out, fftwl_r2r_kind kind, unsigned flags); extern fftwl_plan fftwl_plan_r2r_2d(int n0, int n1, long double *in, long double *out, fftwl_r2r_kind kind0, fftwl_r2r_kind kind1, unsigned flags); extern fftwl_plan fftwl_plan_r2r_3d(int n0, int n1, int n2, long double *in, long double *out, fftwl_r2r_kind kind0, fftwl_r2r_kind kind1, fftwl_r2r_kind kind2, unsigned flags); extern fftwl_plan fftwl_plan_guru_r2r(int rank, const fftwl_iodim *dims, int howmany_rank, const fftwl_iodim *howmany_dims, long double *in, long double *out, const fftwl_r2r_kind *kind, unsigned flags); extern fftwl_plan fftwl_plan_guru64_r2r(int rank, const fftwl_iodim64 *dims, int howmany_rank, const fftwl_iodim64 *howmany_dims, long double *in, long double *out, const fftwl_r2r_kind *kind, unsigned flags); extern void fftwl_execute_r2r(const fftwl_plan p, long double *in, long double *out); extern void fftwl_destroy_plan(fftwl_plan p); extern void fftwl_forget_wisdom(void); extern void fftwl_cleanup(void); extern void fftwl_set_timelimit(double t); extern void fftwl_plan_with_nthreads(int nthreads); extern int fftwl_init_threads(void); extern void fftwl_cleanup_threads(void); extern int fftwl_export_wisdom_to_filename(const char *filename); extern void fftwl_export_wisdom_to_file(FILE *output_file); extern char *fftwl_export_wisdom_to_string(void); extern void fftwl_export_wisdom(fftwl_write_char_func write_char, void *data); extern int fftwl_import_system_wisdom(void); extern int fftwl_import_wisdom_from_filename(const char *filename); extern int fftwl_import_wisdom_from_file(FILE *input_file); extern int fftwl_import_wisdom_from_string(const char *input_string); extern int fftwl_import_wisdom(fftwl_read_char_func read_char, void *data); extern void fftwl_fprint_plan(const fftwl_plan p, FILE *output_file); extern void fftwl_print_plan(const fftwl_plan p); extern char *fftwl_sprint_plan(const fftwl_plan p); extern void *fftwl_malloc(size_t n); extern long double *fftwl_alloc_real(size_t n); extern fftwl_complex *fftwl_alloc_complex(size_t n); extern void fftwl_free(void *p); extern void fftwl_flops(const fftwl_plan p, double *add, double *mul, double *fmas); extern double fftwl_estimate_cost(const fftwl_plan p); extern double fftwl_cost(const fftwl_plan p); extern int fftwl_alignment_of(long double *p); extern const char fftwl_version[]; extern const char fftwl_cc[]; extern const char fftwl_codelet_optim[];


 
# 375 "/home/kjhan/local/include/fftw3.h"






 
# 391 "/home/kjhan/local/include/fftw3.h"

 
# 407 "/home/kjhan/local/include/fftw3.h"





# 37 "../eunha.h" 2
# 1 "/home/kjhan/local/include/fftw3-mpi.h" 1





























 














 












struct fftw_mpi_ddim_do_not_use_me {
     ptrdiff_t n;                      
     ptrdiff_t ib;                     
     ptrdiff_t ob;                     
};









 

# 196 "/home/kjhan/local/include/fftw3-mpi.h"



 





typedef struct fftw_mpi_ddim_do_not_use_me fftw_mpi_ddim; extern void fftw_mpi_init(void); extern void fftw_mpi_cleanup(void); extern ptrdiff_t fftw_mpi_local_size_many_transposed (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftw_mpi_local_size_many (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block0, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftw_mpi_local_size_transposed (int rnk, const ptrdiff_t *n, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftw_mpi_local_size (int rnk, const ptrdiff_t *n, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftw_mpi_local_size_many_1d( ptrdiff_t n0, ptrdiff_t howmany, MPI_Comm comm, int sign, unsigned flags, ptrdiff_t *local_ni, ptrdiff_t *local_i_start, ptrdiff_t *local_no, ptrdiff_t *local_o_start); extern ptrdiff_t fftw_mpi_local_size_1d( ptrdiff_t n0, MPI_Comm comm, int sign, unsigned flags, ptrdiff_t *local_ni, ptrdiff_t *local_i_start, ptrdiff_t *local_no, ptrdiff_t *local_o_start); extern ptrdiff_t fftw_mpi_local_size_2d( ptrdiff_t n0, ptrdiff_t n1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftw_mpi_local_size_2d_transposed( ptrdiff_t n0, ptrdiff_t n1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftw_mpi_local_size_3d( ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftw_mpi_local_size_3d_transposed( ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern fftw_plan fftw_mpi_plan_many_transpose (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, double *in, double *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_transpose (ptrdiff_t n0, ptrdiff_t n1, double *in, double *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_many_dft (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block, ptrdiff_t tblock, fftw_complex *in, fftw_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftw_plan fftw_mpi_plan_dft (int rnk, const ptrdiff_t *n, fftw_complex *in, fftw_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_1d (ptrdiff_t n0, fftw_complex *in, fftw_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_2d (ptrdiff_t n0, ptrdiff_t n1, fftw_complex *in, fftw_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, fftw_complex *in, fftw_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftw_plan fftw_mpi_plan_many_r2r (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, double *in, double *out, MPI_Comm comm, const fftw_r2r_kind *kind, unsigned flags); extern fftw_plan fftw_mpi_plan_r2r (int rnk, const ptrdiff_t *n, double *in, double *out, MPI_Comm comm, const fftw_r2r_kind *kind, unsigned flags); extern fftw_plan fftw_mpi_plan_r2r_2d (ptrdiff_t n0, ptrdiff_t n1, double *in, double *out, MPI_Comm comm, fftw_r2r_kind kind0, fftw_r2r_kind kind1, unsigned flags); extern fftw_plan fftw_mpi_plan_r2r_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, double *in, double *out, MPI_Comm comm, fftw_r2r_kind kind0, fftw_r2r_kind kind1, fftw_r2r_kind kind2, unsigned flags); extern fftw_plan fftw_mpi_plan_many_dft_r2c (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, double *in, fftw_complex *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_r2c (int rnk, const ptrdiff_t *n, double *in, fftw_complex *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_r2c_2d (ptrdiff_t n0, ptrdiff_t n1, double *in, fftw_complex *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_r2c_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, double *in, fftw_complex *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_many_dft_c2r (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, fftw_complex *in, double *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_c2r (int rnk, const ptrdiff_t *n, fftw_complex *in, double *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_c2r_2d (ptrdiff_t n0, ptrdiff_t n1, fftw_complex *in, double *out, MPI_Comm comm, unsigned flags); extern fftw_plan fftw_mpi_plan_dft_c2r_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, fftw_complex *in, double *out, MPI_Comm comm, unsigned flags); extern void fftw_mpi_gather_wisdom(MPI_Comm comm_); extern void fftw_mpi_broadcast_wisdom(MPI_Comm comm_); extern void fftw_mpi_execute_dft(fftw_plan p, fftw_complex *in, fftw_complex *out); extern void fftw_mpi_execute_dft_r2c(fftw_plan p, double *in, fftw_complex *out); extern void fftw_mpi_execute_dft_c2r(fftw_plan p, fftw_complex *in, double *out); extern void fftw_mpi_execute_r2r(fftw_plan p, double *in, double *out);
typedef struct fftw_mpi_ddim_do_not_use_me fftwf_mpi_ddim; extern void fftwf_mpi_init(void); extern void fftwf_mpi_cleanup(void); extern ptrdiff_t fftwf_mpi_local_size_many_transposed (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftwf_mpi_local_size_many (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block0, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwf_mpi_local_size_transposed (int rnk, const ptrdiff_t *n, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftwf_mpi_local_size (int rnk, const ptrdiff_t *n, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwf_mpi_local_size_many_1d( ptrdiff_t n0, ptrdiff_t howmany, MPI_Comm comm, int sign, unsigned flags, ptrdiff_t *local_ni, ptrdiff_t *local_i_start, ptrdiff_t *local_no, ptrdiff_t *local_o_start); extern ptrdiff_t fftwf_mpi_local_size_1d( ptrdiff_t n0, MPI_Comm comm, int sign, unsigned flags, ptrdiff_t *local_ni, ptrdiff_t *local_i_start, ptrdiff_t *local_no, ptrdiff_t *local_o_start); extern ptrdiff_t fftwf_mpi_local_size_2d( ptrdiff_t n0, ptrdiff_t n1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwf_mpi_local_size_2d_transposed( ptrdiff_t n0, ptrdiff_t n1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftwf_mpi_local_size_3d( ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwf_mpi_local_size_3d_transposed( ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern fftwf_plan fftwf_mpi_plan_many_transpose (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, float *in, float *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_transpose (ptrdiff_t n0, ptrdiff_t n1, float *in, float *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_many_dft (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block, ptrdiff_t tblock, fftwf_complex *in, fftwf_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft (int rnk, const ptrdiff_t *n, fftwf_complex *in, fftwf_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_1d (ptrdiff_t n0, fftwf_complex *in, fftwf_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_2d (ptrdiff_t n0, ptrdiff_t n1, fftwf_complex *in, fftwf_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, fftwf_complex *in, fftwf_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwf_plan fftwf_mpi_plan_many_r2r (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, float *in, float *out, MPI_Comm comm, const fftwf_r2r_kind *kind, unsigned flags); extern fftwf_plan fftwf_mpi_plan_r2r (int rnk, const ptrdiff_t *n, float *in, float *out, MPI_Comm comm, const fftwf_r2r_kind *kind, unsigned flags); extern fftwf_plan fftwf_mpi_plan_r2r_2d (ptrdiff_t n0, ptrdiff_t n1, float *in, float *out, MPI_Comm comm, fftwf_r2r_kind kind0, fftwf_r2r_kind kind1, unsigned flags); extern fftwf_plan fftwf_mpi_plan_r2r_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, float *in, float *out, MPI_Comm comm, fftwf_r2r_kind kind0, fftwf_r2r_kind kind1, fftwf_r2r_kind kind2, unsigned flags); extern fftwf_plan fftwf_mpi_plan_many_dft_r2c (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, float *in, fftwf_complex *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_r2c (int rnk, const ptrdiff_t *n, float *in, fftwf_complex *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_r2c_2d (ptrdiff_t n0, ptrdiff_t n1, float *in, fftwf_complex *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_r2c_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, float *in, fftwf_complex *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_many_dft_c2r (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, fftwf_complex *in, float *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_c2r (int rnk, const ptrdiff_t *n, fftwf_complex *in, float *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_c2r_2d (ptrdiff_t n0, ptrdiff_t n1, fftwf_complex *in, float *out, MPI_Comm comm, unsigned flags); extern fftwf_plan fftwf_mpi_plan_dft_c2r_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, fftwf_complex *in, float *out, MPI_Comm comm, unsigned flags); extern void fftwf_mpi_gather_wisdom(MPI_Comm comm_); extern void fftwf_mpi_broadcast_wisdom(MPI_Comm comm_); extern void fftwf_mpi_execute_dft(fftwf_plan p, fftwf_complex *in, fftwf_complex *out); extern void fftwf_mpi_execute_dft_r2c(fftwf_plan p, float *in, fftwf_complex *out); extern void fftwf_mpi_execute_dft_c2r(fftwf_plan p, fftwf_complex *in, float *out); extern void fftwf_mpi_execute_r2r(fftwf_plan p, float *in, float *out);
typedef struct fftw_mpi_ddim_do_not_use_me fftwl_mpi_ddim; extern void fftwl_mpi_init(void); extern void fftwl_mpi_cleanup(void); extern ptrdiff_t fftwl_mpi_local_size_many_transposed (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftwl_mpi_local_size_many (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block0, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwl_mpi_local_size_transposed (int rnk, const ptrdiff_t *n, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftwl_mpi_local_size (int rnk, const ptrdiff_t *n, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwl_mpi_local_size_many_1d( ptrdiff_t n0, ptrdiff_t howmany, MPI_Comm comm, int sign, unsigned flags, ptrdiff_t *local_ni, ptrdiff_t *local_i_start, ptrdiff_t *local_no, ptrdiff_t *local_o_start); extern ptrdiff_t fftwl_mpi_local_size_1d( ptrdiff_t n0, MPI_Comm comm, int sign, unsigned flags, ptrdiff_t *local_ni, ptrdiff_t *local_i_start, ptrdiff_t *local_no, ptrdiff_t *local_o_start); extern ptrdiff_t fftwl_mpi_local_size_2d( ptrdiff_t n0, ptrdiff_t n1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwl_mpi_local_size_2d_transposed( ptrdiff_t n0, ptrdiff_t n1, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern ptrdiff_t fftwl_mpi_local_size_3d( ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start); extern ptrdiff_t fftwl_mpi_local_size_3d_transposed( ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, MPI_Comm comm, ptrdiff_t *local_n0, ptrdiff_t *local_0_start, ptrdiff_t *local_n1, ptrdiff_t *local_1_start); extern fftwl_plan fftwl_mpi_plan_many_transpose (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t howmany, ptrdiff_t block0, ptrdiff_t block1, long double *in, long double *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_transpose (ptrdiff_t n0, ptrdiff_t n1, long double *in, long double *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_many_dft (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t block, ptrdiff_t tblock, fftwl_complex *in, fftwl_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft (int rnk, const ptrdiff_t *n, fftwl_complex *in, fftwl_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_1d (ptrdiff_t n0, fftwl_complex *in, fftwl_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_2d (ptrdiff_t n0, ptrdiff_t n1, fftwl_complex *in, fftwl_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, fftwl_complex *in, fftwl_complex *out, MPI_Comm comm, int sign, unsigned flags); extern fftwl_plan fftwl_mpi_plan_many_r2r (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, long double *in, long double *out, MPI_Comm comm, const fftwl_r2r_kind *kind, unsigned flags); extern fftwl_plan fftwl_mpi_plan_r2r (int rnk, const ptrdiff_t *n, long double *in, long double *out, MPI_Comm comm, const fftwl_r2r_kind *kind, unsigned flags); extern fftwl_plan fftwl_mpi_plan_r2r_2d (ptrdiff_t n0, ptrdiff_t n1, long double *in, long double *out, MPI_Comm comm, fftwl_r2r_kind kind0, fftwl_r2r_kind kind1, unsigned flags); extern fftwl_plan fftwl_mpi_plan_r2r_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, long double *in, long double *out, MPI_Comm comm, fftwl_r2r_kind kind0, fftwl_r2r_kind kind1, fftwl_r2r_kind kind2, unsigned flags); extern fftwl_plan fftwl_mpi_plan_many_dft_r2c (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, long double *in, fftwl_complex *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_r2c (int rnk, const ptrdiff_t *n, long double *in, fftwl_complex *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_r2c_2d (ptrdiff_t n0, ptrdiff_t n1, long double *in, fftwl_complex *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_r2c_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, long double *in, fftwl_complex *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_many_dft_c2r (int rnk, const ptrdiff_t *n, ptrdiff_t howmany, ptrdiff_t iblock, ptrdiff_t oblock, fftwl_complex *in, long double *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_c2r (int rnk, const ptrdiff_t *n, fftwl_complex *in, long double *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_c2r_2d (ptrdiff_t n0, ptrdiff_t n1, fftwl_complex *in, long double *out, MPI_Comm comm, unsigned flags); extern fftwl_plan fftwl_mpi_plan_dft_c2r_3d (ptrdiff_t n0, ptrdiff_t n1, ptrdiff_t n2, fftwl_complex *in, long double *out, MPI_Comm comm, unsigned flags); extern void fftwl_mpi_gather_wisdom(MPI_Comm comm_); extern void fftwl_mpi_broadcast_wisdom(MPI_Comm comm_); extern void fftwl_mpi_execute_dft(fftwl_plan p, fftwl_complex *in, fftwl_complex *out); extern void fftwl_mpi_execute_dft_r2c(fftwl_plan p, long double *in, fftwl_complex *out); extern void fftwl_mpi_execute_dft_c2r(fftwl_plan p, fftwl_complex *in, long double *out); extern void fftwl_mpi_execute_r2r(fftwl_plan p, long double *in, long double *out);



 









# 38 "../eunha.h" 2



# 1 "../RMS/mpirms.h" 1











# 22 "../RMS/mpirms.h"



# 31 "../RMS/mpirms.h"



typedef struct GridInfo{ 
	int ix,iy,iz; 
	int jx,jy,jz; 
	ptrdiff_t nx,ny,nz,nxny,nspace; 
	ptrdiff_t npix; 
	

 
} GridInfo;

typedef struct RGridInfo{
	int ngrids;
} RGridInfo;


typedef struct PrimeNumber{
	int prime, factor;
} PrimeNumber;


enum DDdirection {newway=0, oldway = 1};





 



typedef struct Range{
	PosType min,max;
}Range;
typedef struct SimBoxRange{
	Range x,y,z,w;
} SimBoxRange;
typedef struct BoxMinMax{
	PosType xmin,ymin,zmin,wmin;
	PosType xmax,ymax,zmax,wmax;
}BoxMinMax;

typedef struct DoDeFunc{
	int (*xcompare)(GridInfo *,const void *, const void *);
	int (*ycompare)(GridInfo *,const void *, const void *);
	int (*zcompare)(GridInfo *,const void *, const void *);
	int (*wcompare)(GridInfo *,const void *, const void *);
	int (*xpinner)(GridInfo *,const void *, const void *, const void *, PosType, int,Range *);
	int (*ypinner)(GridInfo *,const void *, const void *, const void *, PosType, int,Range *);
	int (*zpinner)(GridInfo *,const void *, const void *, const void *, PosType, int,Range *);
	int (*wdist)(GridInfo *,const void *, const void *, const void *, PosType, int, Range *);
	int (*muladd)(GridInfo *,const void *, const void *, float,char, int);
	int (*divdir)(GridInfo *, const void *, ptrdiff_t, MPI_Comm);
	int (*insidebox)(GridInfo *,const void *, BoxMinMax *, PosType *, SimBoxRange *, int, int);
	int (*edgeptl)(GridInfo *,const void *, SimBoxRange *, PosType *);
	char xyzchip;
}DoDeFunc;


int getprimenumber(int, PrimeNumber *);


typedef struct Offset{
	size_t x,y,z,w;
}Offset;


typedef struct DoDeInfo{
	MPI_Comm com;
	ptrdiff_t n_size;
	int myid,nid;
	int nsubgroup,npivot;
	int idirection;
	int subgroupsize,subgroupid;
	int (*xcompare)(GridInfo *,const void *, const void *);
	int (*ycompare)(GridInfo *,const void *, const void *);
	int (*zcompare)(GridInfo *,const void *, const void *);
	int (*wcompare)(GridInfo *,const void *, const void *);
	int (*xpinner)(GridInfo *,const void *, const void *, const void *, PosType, int,Range *);
	int (*ypinner)(GridInfo *,const void *, const void *, const void *, PosType, int,Range *);
	int (*zpinner)(GridInfo *,const void *, const void *, const void *, PosType, int,Range *);
	int (*wdist)(GridInfo *,const void *, const void *, const void *, PosType, int, Range *);
	int (*muladd)(GridInfo *,const void *, const void *, float,char, int);
	int (*insidebox)(GridInfo *,const void *, BoxMinMax *,PosType *, SimBoxRange *, int, int);
	int (*edgeptl)(GridInfo *,const void *, SimBoxRange *, PosType *);
	GridInfo sublocalgrid;
	char xyzchip;
	union {
		Offset xyz;
		size_t r[4];
	}memoffset;
	char *pivot;
	union {
		BoxMinMax xyz;
		struct {
			PosType rmin[4];
			PosType rmax[4];
		}r;
	}lgroup;
} DoDeInfo;



typedef struct Padding {
	ptrdiff_t npad;
	ptrdiff_t psize;
	void *ppad;
}PadType;





void mpirms(void **, ptrdiff_t *, ptrdiff_t , DoDeFunc *, DoDeInfo *, MPI_Comm, GridInfo *, enum DDdirection);
void pmigrate(void **, ptrdiff_t *, DoDeInfo *, GridInfo *);
void ExtractLocalDomainVolume(DoDeInfo *, int , SimBoxRange);

void *ExtractPtls2Send(void *, ptrdiff_t , void *, ptrdiff_t , DoDeInfo *, BoxMinMax , PosType , SimBoxRange , 
		ptrdiff_t *, ptrdiff_t , GridInfo *);

void ppadding(void *, ptrdiff_t, void **, ptrdiff_t *, DoDeInfo *, int, SimBoxRange, PosType, GridInfo *);
void buildrmscom(DoDeFunc *, DoDeInfo *, MPI_Comm );
void gmigrate(GridInfo *, GridInfo *, DoDeInfo *, int);
void getingridnpix(GridInfo *);
void *getoutgridnpix(GridInfo *, DenType);


void getgridnpix(GridInfo *);








# 208 "../RMS/mpirms.h"

# 217 "../RMS/mpirms.h"

# 228 "../RMS/mpirms.h"


# 239 "../RMS/mpirms.h"




# 259 "../RMS/mpirms.h"

# 277 "../RMS/mpirms.h"






# 43 "../eunha.h" 2



enum pmtreetype {PMTYPE=0, TREETYPE=1};

enum mattertype {total=0,cdm=1,sph=2, star=3};
enum boolean {YES=01, NO=00};
enum InitCondition {ZELD=1, TWOLPT=2};
enum dimension {X=1, Y=2, Z=3, VX = 1, VY = 2, VZ = 3};




enum SimulationModels {Cosmos=0, Static=1,ZoomedCosmos=2,KH=3,Blast=4,BowShock=5, RT=6};








 




 
# 77 "../eunha.h"


typedef struct FFTW_INFO{ 
	fftwf_plan p, ip;
	fftwf_plan np, inp;
	ptrdiff_t local_grid_size, local_z_start, local_nz;
	PosType zstart, zfinal;
	ptrdiff_t local_grid_size_after_transpose,local_y_start_after_transpose, local_ny_after_transpose;
	MPI_Comm com;
}FFTW_INFO;

# 102 "../eunha.h"

typedef struct FFTWGridInfo{
	

 
	FFTW_INFO fftw_info;
	GridInfo gridinfo;
	union{
		DenType *rden;
		fftwf_complex *cden;
	} den;
} FFTWGridInfo;





typedef struct Basic_MPI{
	int myid,nid;
	MPI_Comm com;
}Basic_MPI;


typedef struct SimBox{
	float boxsize;
	SimBoxRange simbox;
	int nddinfo;
	DoDeInfo *dm_ddinfo, *sph_ddinfo, *star_ddinfo, *agn_ddinfo;
	DoDeInfo *tdm_ddinfo, *tsph_ddinfo, *tstar_ddinfo, *tagn_ddinfo;
	DoDeFunc dm_ddfunc, sph_ddfunc, star_ddfunc, agn_ddfunc;
	DoDeFunc tdm_ddfunc, tsph_ddfunc, tstar_ddfunc, tagn_ddfunc;
} Simbox;








 








 

# 165 "../eunha.h"


typedef struct IndTInfo {
	char indTflag;
	int nowTsubdiv, maxTsubpower; 
	double abefore,astep, da,damin; 
	int nsubstep,tnumcount; 
	char iflagfixedlist; 
	int nsubsph,nsubfixed,nsubnbody;
	int nsubstepcount,isubstep;
	double anext;
}IndTInfo;


typedef struct EvolInfo{
	float pfact, fact1, fact2;
} EvolInfo;

typedef struct TimeInfo {
	int nstep,nskip,stepcount,stepnum;
	float ai,amax;
	float zinit, redshift;
	double anow, astep;
	double lookbacktime;
	int pmstatus;
	int iflagPreFoF,iflagsyncpdata; 
	IndTInfo indt;
	EvolInfo evolinfo;
} TimeInfo;


typedef struct IC{
	long iseed;
	int porder;
	float pamp[4], damp1[4], damp2[4], vamp1[4], vamp2[4];
	float growthfactor;
} IC;

typedef struct Cosmology{
	float omei,omep, omepb,omeplam,omepk, wlam0, wlam1, cosconx;
	float fNL, gNL;
	float hubble, npow;
	float bias8;
	char powfilename[100], inpapkfilename[100];
	char GlacialHeader[100];
	int powreadflag;
	IC ic;
} Cosmology;


typedef struct StaticBG{ 
	float TotMass;
	char externalforce;
	double ffTime, ffTimeellb;
} StaticBG;



typedef struct KHINS{
	float InitTemp;
	float mu;
}KHINS;


typedef struct gas_flag{
	char sphflag, flagSF, flagCOOL, flagSNFB, flagBGHEAT, flagFixedneigh;
	char constmu;
}gas_flag;

typedef struct GasInfo{
	float mu;
	float visforcefactor; 
	float Tempevolfactor,sphforcefactor; 
	float Yp,alpha,gamma,rhos2rhor; 
	float initMetal, coolfact, heatfact;
	double g1,g2, rhoc0,meanrho; 
	float entropyfact,entropyevolfact;
	float g12ratio,g1expansion,Courant,minTemp,minEntropyfactor,Durant; 
	float Trad0,SFvirialDen,SFrho577,SFgasden,SFtemp,SFrealgasdenfactor; 
	float HmassFrac,UVShieldDen,dUVShieldDen; 
	float Mstar;  
	float Cstar;
	float simden2Hnden,simden2HpHenden;
	struct gas_flag flag;
}GasInfo;
# 271 "../eunha.h"
typedef struct Gravity{
	char gravflag;
	float epsilon, efold;
	float theta, rsphere;
}Gravity;


typedef struct BlastInfo{
	float InitTemp, BlastExplodingTemp;
	int mu;
}BlastInfo;

typedef struct BowShockInfo{
	float InitTemp, highden, lowden, velshock;
	float mu;
}BowShockInfo;
typedef struct RTInfo{
	float InitTemp, highmass, lowmass, force;
	float mu;
}RTInfo;


typedef union indxflag{
	size_t indx;
	unsigned char Flag[8];
} indxflag;

typedef struct linkedlisttype{
	struct linkedlisttype *next;
	indxflag u4if;
	float x,y,z;
	float mass;
} linkedlisttype;




typedef struct dmparticletype{
	indxflag u4if;
	float x,y,z;
	float vx,vy,vz;




}dmparticletype;
typedef struct treedmparticletype{
	struct linkedlisttype *next;
	indxflag u4if;
	float x,y,z;
	float vx,vy,vz;




}treedmparticletype;






typedef struct sphparticletype{
	indxflag u4if;
	float x,y,z;
	float mass;
	float vx,vy,vz;
	float ax,ay,az;
	char indt[4];
	float Entropy,rho,fi,F1,hsml,metallicity,dAs,divVel,mu,delta_e,nden,temp; int nstar;
	struct treesphparticletype *bp;
}sphparticletype;
typedef struct treesphparticletype{
	struct linkedlisttype *next;
	indxflag u4if;
	float x,y,z;
	float mass;
	float vx,vy,vz;
	float ax,ay,az;
	char indt[4];
	float Entropy,rho,fi,F1,hsml,metallicity,dAs,divVel,mu,delta_e,nden,temp; int nstar;
	struct treesphparticletype *bp;
}treesphparticletype;



typedef struct starparticletype{
	indxflag u4if;
	float x,y,z;
	float mass;
	float vx,vy,vz;
	float ax,ay,az;
	char indt[4];
	float sftime,metallicity, swlasttime; int SNmark;
}starparticletype;
typedef struct treestarparticletype{
	struct linkedlisttype *next;
	indxflag u4if;
	float x,y,z;
	float mass;
	float vx,vy,vz;
	float ax,ay,az;
	char indt[4];
	float sftime,metallicity, swlasttime; int SNmark;
}treestarparticletype;

typedef struct agnparticletype{
	indxflag u4if;
	float x,y,z;
	float mass;
	float vx,vy,vz;
	float ax,ay,az;
	char indt[4];
}agnparticletype;
typedef struct treeagnparticletype{
	struct linkedlisttype *next;
	indxflag u4if;
	float x,y,z;
	float mass;
	float vx,vy,vz;
	float ax,ay,az;
	char indt[4];
}treeagnparticletype;

typedef struct DM{
	float mass;
	ptrdiff_t np,tnp;
	ptrdiff_t npad;
	union{ 
		dmparticletype *bp;
		treedmparticletype *tbp;
	} p;
	union{
		dmparticletype *bp;
		treedmparticletype *tbp;
	}padding;
} DM;
typedef struct SPH{
	float initmass;
	float massinsolarmass, interactionsphere;
	int NumNear,timesteplimiter, constneighborpower,init_flag;
	ptrdiff_t np,tnp;
	ptrdiff_t npad;
	union{ 
		sphparticletype *bp;
		treesphparticletype *tbp;
	} p;
	union{ 
		sphparticletype *bp;
		treesphparticletype *tbp;
	} padding;
} SPH;
typedef struct STAR{
	ptrdiff_t np,tnp;
	ptrdiff_t npad;
	union{ 
		starparticletype *bp;
		treestarparticletype *tbp;
	}p;
	union{ 
		starparticletype *bp;
		treestarparticletype *tbp;
	} padding;
} STAR;
typedef struct AGN{
	ptrdiff_t np,tnp;
	ptrdiff_t npad;
	union{ 
		agnparticletype *bp;
		treeagnparticletype *tbp;
	}p;
	union{ 
		agnparticletype *bp;
		treeagnparticletype *tbp;
	}padding;
} AGN;

typedef struct Particles{
	int xyzshiftflag;
	enum pmtreetype ptype;
	size_t npsum, ptypesize;
	DM dm;
	SPH sph;
	STAR star;
	AGN agn;
} Particles;

typedef struct SimModels{
	char BGExpand;
	int SimModel;
	Cosmology cosmos;
	StaticBG staticworld;
	KHINS kh;
	BlastInfo blast;
	BowShockInfo bowshock;
	RTInfo rt;
	Simbox simbox;
}SimModels;

typedef struct FILE_IO{
	char rvfilename[100], rvprefix[100];
	int WGroupSize;
} FILE_IO;
typedef struct HALF{
	char first, second;
} PMHALF;
typedef struct ControlFlag{
	char PMPreFoFflag;
	char savexzslice;
	char flagpsmeasure, flagPreFoF, flagsyncpdata,flagwholeden;
	char flagcontinue;
	int halfstep;
	PMHALF pmhalf;
} ControlFlag;

# 492 "../eunha.h"




typedef struct Animation{
	char flag;
	int nviewer;
	char viewfilename[100];
}Animation;
typedef struct ObserverMode{
	int flag;
	char observer[100];
}ObserverMode;


typedef struct Physics{
	GasInfo gasinfo;
	Gravity gravinfo;
}Physics;

typedef struct Virialization{
	PosType fof_link;
	size_t minNum;
} Virialization;



typedef struct HydroTreeLinkedCell{ 
	linkedlisttype *link; 
	size_t nmem; 
	size_t calflag;
} HydroTreeLinkedCell;
typedef struct TreeLinkedCell{ 
	linkedlisttype *link; 
	size_t nmem; 
} TreeLinkedCell;


typedef struct LinkedCell{
	PosType CellWidth;
	PosType invCellWidth;
	size_t mx,my,mz;
	TreeLinkedCell *BasicCell;
	HydroTreeLinkedCell *SPH_BasicCell;
	HydroTreeLinkedCell *STAR_BasicCell;
	HydroTreeLinkedCell *AGN_BasicCell;
} LinkedCell;

typedef struct SimParameters{
	int izoom,nzoom;
	struct Basic_MPI mpi_info;
	struct FFTWGridInfo fftwgrid;
	struct TimeInfo timeinfo;
	struct SimModels simmodel;
	struct LinkedCell linkedcell;

	struct Physics physics;
	struct Particles bp;

	struct FILE_IO fileio;
	struct ControlFlag control;
	struct Animation anim;
	struct ObserverMode obs;
	struct Virialization virial;
} SimParameters;








































# 612 "../eunha.h"


# 622 "../eunha.h"































# 663 "../eunha.h"




























# 699 "../eunha.h"













# 729 "../eunha.h"





























# 765 "../eunha.h"

# 781 "../eunha.h"





































# 826 "../eunha.h"


























 
 
 
# 864 "../eunha.h"




















# 891 "../eunha.h"

 


# 911 "../eunha.h"






# 8 "PreFoF.c" 2
# 1 "../Params/params.h" 1

void write_head(FILE *, SimParameters *);
void ReadSimulationParameters(FILE *, int *, SimParameters *);

SimParameters  read_head(FILE*);




# 20 "../Params/params.h"

# 100 "../Params/params.h"
 
# 112 "../Params/params.h"

 





 
# 126 "../Params/params.h"

 
# 137 "../Params/params.h"












 



 


 






 











# 341 "../Params/params.h"






# 355 "../Params/params.h"

# 375 "../Params/params.h"

# 9 "PreFoF.c" 2
# 1 "../OST/ost.h" 1
# 7 "../OST/ost.h"
enum where {OUT=0, IN=1, CROSS=2};





 


 
enum {TYPE_TREE = 0,TYPE_PTL = 1};














 

typedef struct TYPE {
	unsigned int type: 1;
} TYPE;
typedef struct GENERAL_TPtl_POINTER {
	unsigned int type: 1;void *sibling;
} GENERAL_TPtl_POINTER;
typedef struct TPtlStruct{
	unsigned int type: 1;void *sibling;
	float x,y,z;
	float mass;
	size_t indx;
} TPtlStruct;
typedef struct TStruct{
	unsigned int type: 1;void *sibling;
	void *daughter;
	float nodesize;
	float mass;
	int Nparticle;
	float dist_over_thetasq;
	float monox,monoy,monoz;
	float quad[6],trQ;
} TStruct;



 
typedef struct FoFTPtlStruct{
	unsigned int type: 1;void *sibling;
	float x,y,z;
	float mass;
	size_t haloindx;
	linkedlisttype *bp;
	int included;
} FoFTPtlStruct;

typedef struct FoFTStruct{
	unsigned int type: 1;void *sibling;
	void *daughter;
	float mass;
	float L;
	float nodesize;
	float dist;
	float x0,y0,z0;
	float monox,monoy,monoz;
	int Nparticle;
} FoFTStruct;

 
typedef struct DMParticle{
	float x,y,z;
	float vx,vy,vz;
} DMParticle;
typedef struct Position {
	float x,y,z;
	float mass;
	float *axyz;
} Position;

typedef struct FoFPosition {
	float x,y,z;
	float mass;
	float vx,vy,vz;
} FoFPosition;

typedef struct pforce {
	float x,y,z;
} pforce;

# 114 "../OST/ost.h"
void treeforce(SimParameters *, Position *, TStruct *, size_t ,float , float*);
void Make_Tree(TStruct *,size_t, TPtlStruct *,size_t , float, int);
float treeplumpotential(Position*,float, TStruct *,TPtlStruct *);
TStruct *divide_node(TStruct *,TStruct *, float, int );




 
size_t pnew_fof_link(FoFPosition *, FoFTStruct *, float , FoFPosition *, size_t );
void FoF_Make_Tree(FoFTStruct *,size_t, FoFTPtlStruct *,size_t , int);
int Find_Near(Position *,int ,TStruct *, TPtlStruct *,float *,float);


 
ptrdiff_t insidecount(Position , TStruct *, float );
# 10 "PreFoF.c" 2
# 1 "BasicCell.h" 1



# 31 "BasicCell.h"



# 43 "BasicCell.h"
 

# 91 "BasicCell.h"



void BasicLinkedList(SimParameters *,ptrdiff_t, ptrdiff_t, ptrdiff_t, 
		float, float, float);
# 11 "PreFoF.c" 2
# 1 "PreFoF.h" 1




# 11 "PreFoF.h"


# 19 "PreFoF.h"



void write_zminmax_header(ptrdiff_t, SimParameters *, FILE *, double);
# 12 "PreFoF.c" 2






typedef struct HaloBound{
	size_t nmem;
	float xmin,ymin,zmin,xmax,ymax,zmax;
	int dumpflag;
	FoFTPtlStruct *sibling;
} HaloBound;




ptrdiff_t Dump2FoFPtl(SimParameters *simpar, size_t ix,
		size_t iy, size_t iz, size_t mx, size_t my, size_t mz, FoFTPtlStruct **point){
	size_t npoint = 0;
	TreeLinkedCell *BasicCell = ( (simpar)->linkedcell . BasicCell);

	linkedlisttype *sdm , *fdm;
	sdm = (linkedlisttype*)((simpar)->bp . dm . p . tbp);
	fdm = (linkedlisttype*)(((simpar)->bp . dm . p . tbp)+((simpar)->bp . dm . np));



	float cellxpos, cellypos, cellzpos;

	cellxpos = 4.L*(ix + 0.5L);
	cellypos = 4.L*(iy + 0.5L);
	cellzpos = 4.L*(iz + 0.5L);

	size_t i,j,k;

	npoint = BasicCell[ix+mx*(iy+my*iz)].nmem;
	*point = (FoFTPtlStruct*)malloc(sizeof(FoFTPtlStruct)*npoint);
	FoFTPtlStruct *g = *point;
	linkedlisttype *tmp = BasicCell[ix+mx*(iy+my*iz)].link;
	npoint = 0;
	while(tmp){
		g[npoint].x = ((tmp)->x) - cellxpos;
		g[npoint].y = ((tmp)->y) - cellypos;
		g[npoint].z = ((tmp)->z) - cellzpos;
		g[npoint].bp = tmp;
		g[npoint].haloindx = -1;
		tmp = tmp->next;
		npoint ++;
	}
	return npoint;
}

# 136 "PreFoF.c"

void DumpFoFP2Disk(SimParameters *simpar){
	ptrdiff_t i,j,k;
	int nfiles;
	nfiles = ((simpar)->simmodel . simbox . boxsize)/4;
	nfiles = ceil(log(nfiles)/log(2.L));
	nfiles = (1<<nfiles);
	double zspacing = ((simpar)->simmodel . simbox . boxsize)/nfiles;
	int nid = ((simpar)->mpi_info . nid);
	long nsave[nfiles], tnsave[nfiles*nid], headeroffset[nfiles];
	int nowstep = ((simpar)->timeinfo . stepcount);






	
	do{ for(i=0;i<nfiles;i++) nsave[i] = 0; for(i=0;i<((simpar)->bp . dm . np);i++) (((simpar)->bp . dm . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); ptrdiff_t offset = sizeof(struct linkedlisttype*); for(i=0;i<((simpar)->bp . dm . np);i++) if((((simpar)->bp . dm . p . tbp)[i]. u4if . Flag[0] & (1<<4) )) { treedmparticletype *tmp = (treedmparticletype *) ((char*)(((simpar)->bp . dm . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; nsave[ifile]++; } MPI_Gather(nsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), tnsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Bcast(tnsave, nfiles*nid, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); if(((simpar)->mpi_info . myid) == 0){ for(i=0;i<nfiles;i++){ char outfile[190]; sprintf(outfile,"PreFoF." "DM" ".%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"w"); float zmin = i*zspacing; float zmax = (i+1)*zspacing; do{ int isize,ncnt = 0; ncnt += fprintf(wp,"#Start of the Ascii Header of the GOTPM Simulation\n"); ncnt += fprintf(wp,"##################################################\n"); do{ ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "SIM_MODEL           = " "%d" "" " # SIMULATION MODEL 0:Cosmos, 1:Galaxy, 3: KH, 4: 3D Blast, 5: 3D Bow Shock, 6: 3D RT\n", ((simpar)->simmodel . SimModel)); ncnt += fprintf(wp,"define " "External Force      = " "%c" "" " # External Force 0:No, 1:Yes\n", ((simpar)->simmodel . staticworld . externalforce)); ncnt += fprintf(wp,"define " "Gravity included?   = " "%c" "" " # Whether to include the gravity force\n", ((simpar)->physics . gravinfo . gravflag)); if(((simpar)->simmodel . SimModel) == Cosmos){ ncnt += fprintf(wp,"define " "INITIAL CONDITION   = " "%d" "" " # How to generate initial condtion, 1: Zeldovich, 2: 2nd order LPT\n", ((simpar)->simmodel . cosmos . ic . porder)); ncnt += fprintf(wp,"### Hubble parameter is in 100km/sec/Mpc.\n"); ncnt += fprintf(wp,"define " "Hubble              = " "%f" "" " # Hubble expansion parameter\n", ((simpar)->simmodel . cosmos . hubble)); ncnt += fprintf(wp,"define " "OmegaMatter0        = " "%f" "" " # Current Omega Matter\n", ((simpar)->simmodel . cosmos . omep)); ncnt += fprintf(wp,"define " "OmegaBaryon0        = " "%f" "" " # Current Omega Baryon\n", ((simpar)->simmodel . cosmos . omepb)); ncnt += fprintf(wp,"define " "OmegaLambda0        = " "%f" "" " # Current Omega Lambda\n", ((simpar)->simmodel . cosmos . omeplam)); ncnt += fprintf(wp,"define " "fNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . fNL)); ncnt += fprintf(wp,"define " "gNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . gNL)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### nPS is the power spectral index.\n"); ncnt += fprintf(wp,"### Bias factor is inverse of sigma_8.\n"); ncnt += fprintf(wp,"define " "nPS                 = " "%f" "" " # Spectral index\n", ((simpar)->simmodel . cosmos . npow)); ncnt += fprintf(wp,"define " "Bias                = " "%f" "" " # Bias factor, inverse of sigma_8\n", ((simpar)->simmodel . cosmos . bias8)); ncnt += fprintf(wp,"define " "Iseed               = " "%ld" "" "\n", ((simpar)->simmodel . cosmos . ic . iseed)); ncnt += fprintf(wp,"define " "Powerflag           = " "%d" "" "\n", ((simpar)->simmodel . cosmos . powreadflag)); ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); } else if(((simpar)->simmodel . SimModel) == Static){ ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); ncnt += fprintf(wp,"define " "TMass_Box_inMsun    = " "%f" "" " # Total mass in the simulation box (No expansion only)\n", ((simpar)->simmodel . staticworld . TotMass)); ncnt += fprintf(wp,"define " "Free Fall Time      = " "%lg" "" " # Free Fall time in sec. (No expansion only)\n", ((simpar)->simmodel . staticworld . ffTime)); } else if(((simpar)->simmodel . SimModel) == Blast){ ncnt += fprintf(wp,"define " "Blast Init Temp     = " "%f" "" " # Initial Temperature of the Blast Test\n", ((simpar)->simmodel . blast . InitTemp)); ncnt += fprintf(wp,"define " "Blast Constat MU    = " "%f" "" " # Constant value of MU of the Blast Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "Blast Exploding Temp= " "%f" "" " # Initial Temperature of the Explosion of the Blast Test\n", ((simpar)->simmodel . blast . BlastExplodingTemp)); } else if(((simpar)->simmodel . SimModel) == KH){ ncnt += fprintf(wp,"define " "KH    Init Temp     = " "%f" "" " # Initial Temperature of the KH Test\n", ((simpar)->simmodel . kh . InitTemp)); ncnt += fprintf(wp,"define " "KH    Constat MU    = " "%f" "" " # Constant value of MU of the KH Test\n", ((simpar)->physics . gasinfo . mu)); } else if(((simpar)->simmodel . SimModel) == BowShock){ ncnt += fprintf(wp,"define " "BS    Init Temp     = " "%f" "" " # Initial Temperature of the BowShock Test\n", ((simpar)->simmodel . bowshock . InitTemp)); ncnt += fprintf(wp,"define " "BS    Constat MU    = " "%f" "" " # Constant value of MU of the BowShcok Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "BS High Density     = " "%f" "" " # High Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . highden)); ncnt += fprintf(wp,"define " "BS Low Density      = " "%f" "" " # Low Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . lowden)); ncnt += fprintf(wp,"define " "BS Supersonic Vel.  = " "%f" "" " # Supersonic Velocity in the BowShcok Test\n", ((simpar)->simmodel . bowshock . velshock)); } else if(((simpar)->simmodel . SimModel) == RT){ ncnt += fprintf(wp,"define " "RT    Init Temp     = " "%f" "" " # Initial Temperature of the RT Test\n", ((simpar)->simmodel . rt . InitTemp)); ncnt += fprintf(wp,"define " "RT    Constat MU    = " "%f" "" " # Constant value of MU of the RT Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "RT High mass        = " "%f" "" " # High Density in the RT Test\n", ((simpar)->simmodel . rt . highmass)); ncnt += fprintf(wp,"define " "RT Low mass         = " "%f" "" " # Low Density in the RT Test\n", ((simpar)->simmodel . rt . lowmass)); ncnt += fprintf(wp,"define " "RT External Force   = " "%f" "" " # Supersonic Velocity in the RT Test\n", ((simpar)->simmodel . rt . force)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Amax                = " "%f" "" " # Maximum expansion factor/ final time\n", ((simpar)->timeinfo . amax)); ncnt += fprintf(wp,"define " "Anow                = " "%lg" "" " # Current expansion factor/ current time\n", ((simpar)->timeinfo . anow)); ncnt += fprintf(wp,"define " "Astep               = " "%lg" "" "\n", ((simpar)->timeinfo . astep)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### Nx, Ny, and Nz should be same & nspace should be int.\n"); ncnt += fprintf(wp,"define " "Nx                  = " "%ld" "" " # Number of grids along x axis\n", ((simpar)->fftwgrid . gridinfo . nx)); ncnt += fprintf(wp,"define " "Ny                  = " "%ld" "" " # Number of grids along y axis\n", ((simpar)->fftwgrid . gridinfo . ny)); ncnt += fprintf(wp,"define " "Nz                  = " "%ld" "" " # Number of grids along z axis\n", ((simpar)->fftwgrid . gridinfo . nz)); { int ddinfosize=sizeof(DoDeInfo); ncnt += fprintf(wp,"define " "DDINFO SIZE         = " "%d" "" "\n", ddinfosize); if(ddinfosize != sizeof(DoDeInfo)){ fprintf(stderr, "[file %s, line %d]: " "P%d has error in the size of DoDeInfo %d : %d\n", "PreFoF.c", 154, ((simpar)->mpi_info . myid), ddinfosize, sizeof(DoDeInfo)); exit(999); } } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Theta               = " "%f" "" " # Current cell opening angle in Tree correction\n", ((simpar)->physics . gravinfo . theta)); ncnt += fprintf(wp,"define " "EPSILON             = " "%f" "" " # Force Smoothing Length\n", ((simpar)->physics . gravinfo . epsilon)); ncnt += fprintf(wp,"define " "Nstep               = " "%d" "" " # Number of time steps\n", ((simpar)->timeinfo . nstep)); ncnt += fprintf(wp,"define " "Stepcount           = " "%d" "" " # Current time step number\n", ((simpar)->timeinfo . stepcount)); ncnt += fprintf(wp,"define " "Stepnum             = " "%d" "" "\n", ((simpar)->timeinfo . stepnum)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "rvfilename          = " "%s" "" "\n", ((simpar)->fileio . rvfilename)); ncnt += fprintf(wp,"define " "rvprefix            = " "%s" "" "\n", ((simpar)->fileio . rvprefix)); if(((simpar)->simmodel . cosmos . powreadflag)!=0){ ncnt += fprintf(wp,"define " "Powerfile           = " "%s" "" " # 0: No input 1: CAMB 2: Ascii\n", ((simpar)->simmodel . cosmos . powfilename)); if(((simpar)->simmodel . cosmos . powreadflag)==2) ncnt += fprintf(wp,"define " "AsciiPowerfile      = " "%s" "" "\n", ((simpar)->simmodel . cosmos . inpapkfilename)); } if(((simpar)->anim . flag) == 'Y') { ncnt += fprintf(wp,"define " "ViewerTrackFile     = " "%s" "" "\n", ((simpar)->anim . viewfilename)); } ncnt += fprintf(wp,"define " "PM_PreFoF_flag      = " "%c" "" "\n",  ((simpar)->control . PMPreFoFflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "GlacialFileName     = " "%s" "" "\n", ((simpar)->simmodel . cosmos . GlacialHeader)); ncnt += fprintf(wp,"define " "Np                  = " "%ld" "" "\n", ((simpar)->bp . npsum)); ncnt += fprintf(wp,"define " "DNp                 = " "%ld" "" "\n", ((simpar)->bp . dm . np)); ncnt += fprintf(wp,"define " "BNp                 = " "%ld" "" "\n", ((simpar)->bp . sph . np)); ncnt += fprintf(wp,"define " "SNp                 = " "%ld" "" "\n", ((simpar)->bp . star . np)); ncnt += fprintf(wp,"define " "ANp                 = " "%ld" "" "\n", ((simpar)->bp . agn . np)); ncnt += fprintf(wp,"define " "Particle Type       = " "%d" "" "\n", ((simpar)->bp . ptype)); ncnt += fprintf(wp,"define " "Ind Time Flag       = " "%c" "" "\n",  ((simpar)->timeinfo . indt . indTflag)); if(((simpar)->timeinfo . indt . indTflag)== 'Y') { ncnt += fprintf(wp,"define " "Nsub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstep)); ncnt += fprintf(wp,"define " "Isub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . isubstep)); ncnt += fprintf(wp,"################ INDIVIDUAL TIMESTEP  ############\n"); ncnt += fprintf(wp,"define " "Ind A Before        = " "%lg" "" "\n", ((simpar)->timeinfo . indt . abefore)); ncnt += fprintf(wp,"define " "Ind astep           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . astep)); ncnt += fprintf(wp,"define " "Ind da              = " "%lg" "" "\n", ((simpar)->timeinfo . indt . da)); ncnt += fprintf(wp,"define " "Ind nowTsubdiv      = " "%d" "" "\n", ((simpar)->timeinfo . indt . nowTsubdiv)); ncnt += fprintf(wp,"define " "Ind maxTsubpower    = " "%d" "" "\n", ((simpar)->timeinfo . indt . maxTsubpower)); ncnt += fprintf(wp,"define " "Ind flag 4 PreFoF   = " "%d" "" "\n", ((simpar)->timeinfo . iflagPreFoF)); ncnt += fprintf(wp,"define " "Ind flag 4 syncp    = " "%d" "" "\n", ((simpar)->timeinfo . iflagsyncpdata)); ncnt += fprintf(wp,"define " "Ind nsubstepcount   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstepcount)); ncnt += fprintf(wp,"define " "Ind tnumcount       = " "%d" "" "\n", ((simpar)->timeinfo . indt . tnumcount)); ncnt += fprintf(wp,"define " "Ind anext           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . anext)); ncnt += fprintf(wp,"################ SubStep Power  ############\n"); ncnt += fprintf(wp,"define " "SubStep fixed Flag  = " "%c" "" "\n", ((simpar)->timeinfo . indt . iflagfixedlist)); ncnt += fprintf(wp,"define " "SubStep sph power   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubsph)); ncnt += fprintf(wp,"define " "SubStep Nbody power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubnbody)); ncnt += fprintf(wp,"define " "SubStep Fixed power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubfixed)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"################    SPH FLAGS   ##################\n"); ncnt += fprintf(wp,"define " "Flag for SPH        = " "%c" "" " # flag for basic SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . sphflag)); if(((simpar)->physics . gasinfo . flag . sphflag)== 'Y'){ ncnt += fprintf(wp,"define " "Flag CONST MU       = " "%c" "" " # flag for Constant Mu in sph  (Y/N)\n", ((simpar)->physics . gasinfo . flag . constmu)); ncnt += fprintf(wp,"define " "FlagStarformation   = " "%c" "" " # flag for star formation in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSF)); ncnt += fprintf(wp,"define " "FlagCooling         = " "%c" "" " # flag for cooling in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagCOOL)); ncnt += fprintf(wp,"define " "FlagSNFeedBack      = " "%c" "" " # flag for supernovae feedback in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSNFB)); ncnt += fprintf(wp,"define " "FlagBackgroundHeat  = " "%c" "" " # flag for background heating in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagBGHEAT)); ncnt += fprintf(wp,"define " "Fixed Neighbor List = " "%c" "" " # Fixed Neighbor List (Y/N)\n" , ((simpar)->physics . gasinfo . flag . flagFixedneigh)); ncnt += fprintf(wp,"define " "Durant Factor       = " "%f" "" " # Durant factor (float)\n" , ((simpar)->physics . gasinfo . Durant)); ncnt += fprintf(wp,"################ SPH parameters ##################\n"); ncnt += fprintf(wp,"define " "Yp_SPH              = " "%f" "" " # Mass ratio of H to He (SPH)\n", ((simpar)->physics . gasinfo . Yp)); ncnt += fprintf(wp,"define " "Num_nearby_SPH      = " "%d" "" " # Number of neighbor particles (SPH)\n", ((simpar)->bp . sph . NumNear)); ncnt += fprintf(wp,"define " "Trad0_SPH           = " "%f" "" " # Current background radiation temperature (SPH)\n", ((simpar)->physics . gasinfo . Trad0)); ncnt += fprintf(wp,"define " "Gamma_SPH           = " "%f" "" " # Adiabatic index (SPH)\n", ((simpar)->physics . gasinfo . gamma)); ncnt += fprintf(wp,"define " "Alpha_SPH           = " "%f" "" "\n", ((simpar)->physics . gasinfo . alpha)); ncnt += fprintf(wp,"define " "Courant_SPH         = " "%f" "" " # Courant number (SPH)\n", ((simpar)->physics . gasinfo . Courant)); ncnt += fprintf(wp,"define " "UV Shielding GasDen = " "%f" "" " # UV shielding gas density\n", ((simpar)->physics . gasinfo . UVShieldDen)); ncnt += fprintf(wp,"define " "UV Shielding dGasDen= " "%f" "" " # Transition Width of UV shielding gas density\n", ((simpar)->physics . gasinfo . dUVShieldDen)); ncnt += fprintf(wp,"define " "Init Metallicity    = " "%f" "" " # Initial metallicity\n", ((simpar)->physics . gasinfo . initMetal)); ncnt += fprintf(wp,"define " "MIN_TEMP_SPH        = " "%f" "" " # Minimum temperature of gas particle\n", ((simpar)->physics . gasinfo . minTemp)); ncnt += fprintf(wp,"define " "Pow. of Const Neigh = " "%d" "" " # subPower of Constant Neighbor Approximation\n", ((simpar)->bp . sph . constneighborpower)); ncnt += fprintf(wp,"##################################################\n"); if(((simpar)->physics . gasinfo . flag . flagSF) == 'Y') { ncnt += fprintf(wp,"define " "SF_Virial_Den       = " "%f" "" " # Cosmic virial density criteria for SF\n", ((simpar)->physics . gasinfo . SFvirialDen)); ncnt += fprintf(wp,"define " "SF_Gas_Den          = " "%f" "" " # Gas density criterion for SF\n", ((simpar)->physics . gasinfo . SFgasden)); ncnt += fprintf(wp,"define " "SF_Temperature      = " "%f" "" " # Temperature criterion for SF\n", ((simpar)->physics . gasinfo . SFtemp)); ncnt += fprintf(wp,"define " "SF_Mstar            = " "%f" "" " # Maximum Number of stars per gas particle (SF)\n" , ((simpar)->physics . gasinfo . Mstar)); ncnt += fprintf(wp,"define " "SF_Cstar            = " "%f" "" " # Star formation efficiency (SF)\n" , ((simpar)->physics . gasinfo . Cstar)); } ncnt += fprintf(wp,"define " "Time Step Limiter   = " "%d" "" " # Step number in the timestep limiter\n" , ((simpar)->bp . sph . timesteplimiter)); } ncnt += fprintf(wp,"define " "FILE I/O Group Size = " "%d" "" " # FILE I/O Group Size\n", ((simpar)->fileio . WGroupSize)); ncnt += fprintf(wp,"##################################################\n");}while(0); ncnt += fprintf(wp,"define " "Zmin                = " "%f" "" " # Bottom z value of local domain slab\n", zmin); ncnt += fprintf(wp,"define " "Zmax                = " "%f" "" " # Top z value of local domain slab\n", zmax); ncnt += fprintf(wp,"define " "XYZ_Shift_Flag      = " "%d" "" "\n", ((simpar)->bp . xyzshiftflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"#End of Ascii Header\n");}while(0); headeroffset[i] = ftell(wp); fclose(wp); } } MPI_Bcast(headeroffset, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Status status; for(i=0;i<nfiles;i++){ nsave[i] = 0; for(j=0;j<((simpar)->mpi_info . myid);j++){ nsave[i] += tnsave[i +nfiles*j]; } headeroffset[i] += nsave[i] * sizeof(treedmparticletype); } int itag = 1; int isend, iget, WGroupSize = ((simpar)->fileio . WGroupSize); int src = ((simpar)->mpi_info . myid) - 1; int tgt = ((simpar)->mpi_info . myid) + 1; treedmparticletype *tmp; for(i=0;i<nfiles;i++) nsave[i] = 0; treedmparticletype pbuff[nfiles][(1<<20)]; if(( (((simpar)->mpi_info . myid))%(WGroupSize) ) != 0 ) MPI_Recv(&iget,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),src,itag,((simpar)->mpi_info . com),&status); for(i=0;i<((simpar)->bp . dm . np);i++){ if((((simpar)->bp . dm . p . tbp)[i]. u4if . Flag[0] & (1<<4) )){ treedmparticletype *tmp = (treedmparticletype *) ((char*)(((simpar)->bp . dm . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; pbuff[ifile][nsave[ifile]++] = *tmp; if(nsave[ifile]>= (1<<20)){ char outfile[190]; sprintf(outfile,"PreFoF." "DM" ".%.5d.%.5d",nowstep, (int)ifile); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[ifile], 0); fwrite(pbuff[ifile], sizeof(treedmparticletype), nsave[ifile], wp); fclose(wp); headeroffset[ifile] += nsave[ifile]*sizeof(treedmparticletype); nsave[ifile] = 0; } } } for(i=0;i<nfiles;i++){ if(nsave[i] >0){ char outfile[190]; sprintf(outfile,"PreFoF." "DM" "%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[i], 0); fwrite(pbuff[i], sizeof(treedmparticletype), nsave[i], wp); fclose(wp); headeroffset[i] += nsave[i]*sizeof(treedmparticletype); nsave[i] = 0; } } if(((((simpar)->mpi_info . myid))/(WGroupSize)) == ((tgt)/(WGroupSize)) && tgt < ((simpar)->mpi_info . nid)) MPI_Send(&isend,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),tgt,itag,((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));} while(0);

	do{ for(i=0;i<nfiles;i++) nsave[i] = 0; for(i=0;i<((simpar)->bp . sph . np);i++) (((simpar)->bp . sph . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); ptrdiff_t offset = sizeof(struct linkedlisttype*); for(i=0;i<((simpar)->bp . sph . np);i++) if((((simpar)->bp . sph . p . tbp)[i]. u4if . Flag[0] & (1<<4) )) { treesphparticletype *tmp = (treesphparticletype *) ((char*)(((simpar)->bp . sph . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; nsave[ifile]++; } MPI_Gather(nsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), tnsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Bcast(tnsave, nfiles*nid, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); if(((simpar)->mpi_info . myid) == 0){ for(i=0;i<nfiles;i++){ char outfile[190]; sprintf(outfile,"PreFoF." "SPH" ".%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"w"); float zmin = i*zspacing; float zmax = (i+1)*zspacing; do{ int isize,ncnt = 0; ncnt += fprintf(wp,"#Start of the Ascii Header of the GOTPM Simulation\n"); ncnt += fprintf(wp,"##################################################\n"); do{ ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "SIM_MODEL           = " "%d" "" " # SIMULATION MODEL 0:Cosmos, 1:Galaxy, 3: KH, 4: 3D Blast, 5: 3D Bow Shock, 6: 3D RT\n", ((simpar)->simmodel . SimModel)); ncnt += fprintf(wp,"define " "External Force      = " "%c" "" " # External Force 0:No, 1:Yes\n", ((simpar)->simmodel . staticworld . externalforce)); ncnt += fprintf(wp,"define " "Gravity included?   = " "%c" "" " # Whether to include the gravity force\n", ((simpar)->physics . gravinfo . gravflag)); if(((simpar)->simmodel . SimModel) == Cosmos){ ncnt += fprintf(wp,"define " "INITIAL CONDITION   = " "%d" "" " # How to generate initial condtion, 1: Zeldovich, 2: 2nd order LPT\n", ((simpar)->simmodel . cosmos . ic . porder)); ncnt += fprintf(wp,"### Hubble parameter is in 100km/sec/Mpc.\n"); ncnt += fprintf(wp,"define " "Hubble              = " "%f" "" " # Hubble expansion parameter\n", ((simpar)->simmodel . cosmos . hubble)); ncnt += fprintf(wp,"define " "OmegaMatter0        = " "%f" "" " # Current Omega Matter\n", ((simpar)->simmodel . cosmos . omep)); ncnt += fprintf(wp,"define " "OmegaBaryon0        = " "%f" "" " # Current Omega Baryon\n", ((simpar)->simmodel . cosmos . omepb)); ncnt += fprintf(wp,"define " "OmegaLambda0        = " "%f" "" " # Current Omega Lambda\n", ((simpar)->simmodel . cosmos . omeplam)); ncnt += fprintf(wp,"define " "fNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . fNL)); ncnt += fprintf(wp,"define " "gNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . gNL)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### nPS is the power spectral index.\n"); ncnt += fprintf(wp,"### Bias factor is inverse of sigma_8.\n"); ncnt += fprintf(wp,"define " "nPS                 = " "%f" "" " # Spectral index\n", ((simpar)->simmodel . cosmos . npow)); ncnt += fprintf(wp,"define " "Bias                = " "%f" "" " # Bias factor, inverse of sigma_8\n", ((simpar)->simmodel . cosmos . bias8)); ncnt += fprintf(wp,"define " "Iseed               = " "%ld" "" "\n", ((simpar)->simmodel . cosmos . ic . iseed)); ncnt += fprintf(wp,"define " "Powerflag           = " "%d" "" "\n", ((simpar)->simmodel . cosmos . powreadflag)); ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); } else if(((simpar)->simmodel . SimModel) == Static){ ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); ncnt += fprintf(wp,"define " "TMass_Box_inMsun    = " "%f" "" " # Total mass in the simulation box (No expansion only)\n", ((simpar)->simmodel . staticworld . TotMass)); ncnt += fprintf(wp,"define " "Free Fall Time      = " "%lg" "" " # Free Fall time in sec. (No expansion only)\n", ((simpar)->simmodel . staticworld . ffTime)); } else if(((simpar)->simmodel . SimModel) == Blast){ ncnt += fprintf(wp,"define " "Blast Init Temp     = " "%f" "" " # Initial Temperature of the Blast Test\n", ((simpar)->simmodel . blast . InitTemp)); ncnt += fprintf(wp,"define " "Blast Constat MU    = " "%f" "" " # Constant value of MU of the Blast Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "Blast Exploding Temp= " "%f" "" " # Initial Temperature of the Explosion of the Blast Test\n", ((simpar)->simmodel . blast . BlastExplodingTemp)); } else if(((simpar)->simmodel . SimModel) == KH){ ncnt += fprintf(wp,"define " "KH    Init Temp     = " "%f" "" " # Initial Temperature of the KH Test\n", ((simpar)->simmodel . kh . InitTemp)); ncnt += fprintf(wp,"define " "KH    Constat MU    = " "%f" "" " # Constant value of MU of the KH Test\n", ((simpar)->physics . gasinfo . mu)); } else if(((simpar)->simmodel . SimModel) == BowShock){ ncnt += fprintf(wp,"define " "BS    Init Temp     = " "%f" "" " # Initial Temperature of the BowShock Test\n", ((simpar)->simmodel . bowshock . InitTemp)); ncnt += fprintf(wp,"define " "BS    Constat MU    = " "%f" "" " # Constant value of MU of the BowShcok Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "BS High Density     = " "%f" "" " # High Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . highden)); ncnt += fprintf(wp,"define " "BS Low Density      = " "%f" "" " # Low Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . lowden)); ncnt += fprintf(wp,"define " "BS Supersonic Vel.  = " "%f" "" " # Supersonic Velocity in the BowShcok Test\n", ((simpar)->simmodel . bowshock . velshock)); } else if(((simpar)->simmodel . SimModel) == RT){ ncnt += fprintf(wp,"define " "RT    Init Temp     = " "%f" "" " # Initial Temperature of the RT Test\n", ((simpar)->simmodel . rt . InitTemp)); ncnt += fprintf(wp,"define " "RT    Constat MU    = " "%f" "" " # Constant value of MU of the RT Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "RT High mass        = " "%f" "" " # High Density in the RT Test\n", ((simpar)->simmodel . rt . highmass)); ncnt += fprintf(wp,"define " "RT Low mass         = " "%f" "" " # Low Density in the RT Test\n", ((simpar)->simmodel . rt . lowmass)); ncnt += fprintf(wp,"define " "RT External Force   = " "%f" "" " # Supersonic Velocity in the RT Test\n", ((simpar)->simmodel . rt . force)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Amax                = " "%f" "" " # Maximum expansion factor/ final time\n", ((simpar)->timeinfo . amax)); ncnt += fprintf(wp,"define " "Anow                = " "%lg" "" " # Current expansion factor/ current time\n", ((simpar)->timeinfo . anow)); ncnt += fprintf(wp,"define " "Astep               = " "%lg" "" "\n", ((simpar)->timeinfo . astep)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### Nx, Ny, and Nz should be same & nspace should be int.\n"); ncnt += fprintf(wp,"define " "Nx                  = " "%ld" "" " # Number of grids along x axis\n", ((simpar)->fftwgrid . gridinfo . nx)); ncnt += fprintf(wp,"define " "Ny                  = " "%ld" "" " # Number of grids along y axis\n", ((simpar)->fftwgrid . gridinfo . ny)); ncnt += fprintf(wp,"define " "Nz                  = " "%ld" "" " # Number of grids along z axis\n", ((simpar)->fftwgrid . gridinfo . nz)); { int ddinfosize=sizeof(DoDeInfo); ncnt += fprintf(wp,"define " "DDINFO SIZE         = " "%d" "" "\n", ddinfosize); if(ddinfosize != sizeof(DoDeInfo)){ fprintf(stderr, "[file %s, line %d]: " "P%d has error in the size of DoDeInfo %d : %d\n", "PreFoF.c", 156, ((simpar)->mpi_info . myid), ddinfosize, sizeof(DoDeInfo)); exit(999); } } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Theta               = " "%f" "" " # Current cell opening angle in Tree correction\n", ((simpar)->physics . gravinfo . theta)); ncnt += fprintf(wp,"define " "EPSILON             = " "%f" "" " # Force Smoothing Length\n", ((simpar)->physics . gravinfo . epsilon)); ncnt += fprintf(wp,"define " "Nstep               = " "%d" "" " # Number of time steps\n", ((simpar)->timeinfo . nstep)); ncnt += fprintf(wp,"define " "Stepcount           = " "%d" "" " # Current time step number\n", ((simpar)->timeinfo . stepcount)); ncnt += fprintf(wp,"define " "Stepnum             = " "%d" "" "\n", ((simpar)->timeinfo . stepnum)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "rvfilename          = " "%s" "" "\n", ((simpar)->fileio . rvfilename)); ncnt += fprintf(wp,"define " "rvprefix            = " "%s" "" "\n", ((simpar)->fileio . rvprefix)); if(((simpar)->simmodel . cosmos . powreadflag)!=0){ ncnt += fprintf(wp,"define " "Powerfile           = " "%s" "" " # 0: No input 1: CAMB 2: Ascii\n", ((simpar)->simmodel . cosmos . powfilename)); if(((simpar)->simmodel . cosmos . powreadflag)==2) ncnt += fprintf(wp,"define " "AsciiPowerfile      = " "%s" "" "\n", ((simpar)->simmodel . cosmos . inpapkfilename)); } if(((simpar)->anim . flag) == 'Y') { ncnt += fprintf(wp,"define " "ViewerTrackFile     = " "%s" "" "\n", ((simpar)->anim . viewfilename)); } ncnt += fprintf(wp,"define " "PM_PreFoF_flag      = " "%c" "" "\n",  ((simpar)->control . PMPreFoFflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "GlacialFileName     = " "%s" "" "\n", ((simpar)->simmodel . cosmos . GlacialHeader)); ncnt += fprintf(wp,"define " "Np                  = " "%ld" "" "\n", ((simpar)->bp . npsum)); ncnt += fprintf(wp,"define " "DNp                 = " "%ld" "" "\n", ((simpar)->bp . dm . np)); ncnt += fprintf(wp,"define " "BNp                 = " "%ld" "" "\n", ((simpar)->bp . sph . np)); ncnt += fprintf(wp,"define " "SNp                 = " "%ld" "" "\n", ((simpar)->bp . star . np)); ncnt += fprintf(wp,"define " "ANp                 = " "%ld" "" "\n", ((simpar)->bp . agn . np)); ncnt += fprintf(wp,"define " "Particle Type       = " "%d" "" "\n", ((simpar)->bp . ptype)); ncnt += fprintf(wp,"define " "Ind Time Flag       = " "%c" "" "\n",  ((simpar)->timeinfo . indt . indTflag)); if(((simpar)->timeinfo . indt . indTflag)== 'Y') { ncnt += fprintf(wp,"define " "Nsub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstep)); ncnt += fprintf(wp,"define " "Isub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . isubstep)); ncnt += fprintf(wp,"################ INDIVIDUAL TIMESTEP  ############\n"); ncnt += fprintf(wp,"define " "Ind A Before        = " "%lg" "" "\n", ((simpar)->timeinfo . indt . abefore)); ncnt += fprintf(wp,"define " "Ind astep           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . astep)); ncnt += fprintf(wp,"define " "Ind da              = " "%lg" "" "\n", ((simpar)->timeinfo . indt . da)); ncnt += fprintf(wp,"define " "Ind nowTsubdiv      = " "%d" "" "\n", ((simpar)->timeinfo . indt . nowTsubdiv)); ncnt += fprintf(wp,"define " "Ind maxTsubpower    = " "%d" "" "\n", ((simpar)->timeinfo . indt . maxTsubpower)); ncnt += fprintf(wp,"define " "Ind flag 4 PreFoF   = " "%d" "" "\n", ((simpar)->timeinfo . iflagPreFoF)); ncnt += fprintf(wp,"define " "Ind flag 4 syncp    = " "%d" "" "\n", ((simpar)->timeinfo . iflagsyncpdata)); ncnt += fprintf(wp,"define " "Ind nsubstepcount   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstepcount)); ncnt += fprintf(wp,"define " "Ind tnumcount       = " "%d" "" "\n", ((simpar)->timeinfo . indt . tnumcount)); ncnt += fprintf(wp,"define " "Ind anext           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . anext)); ncnt += fprintf(wp,"################ SubStep Power  ############\n"); ncnt += fprintf(wp,"define " "SubStep fixed Flag  = " "%c" "" "\n", ((simpar)->timeinfo . indt . iflagfixedlist)); ncnt += fprintf(wp,"define " "SubStep sph power   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubsph)); ncnt += fprintf(wp,"define " "SubStep Nbody power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubnbody)); ncnt += fprintf(wp,"define " "SubStep Fixed power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubfixed)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"################    SPH FLAGS   ##################\n"); ncnt += fprintf(wp,"define " "Flag for SPH        = " "%c" "" " # flag for basic SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . sphflag)); if(((simpar)->physics . gasinfo . flag . sphflag)== 'Y'){ ncnt += fprintf(wp,"define " "Flag CONST MU       = " "%c" "" " # flag for Constant Mu in sph  (Y/N)\n", ((simpar)->physics . gasinfo . flag . constmu)); ncnt += fprintf(wp,"define " "FlagStarformation   = " "%c" "" " # flag for star formation in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSF)); ncnt += fprintf(wp,"define " "FlagCooling         = " "%c" "" " # flag for cooling in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagCOOL)); ncnt += fprintf(wp,"define " "FlagSNFeedBack      = " "%c" "" " # flag for supernovae feedback in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSNFB)); ncnt += fprintf(wp,"define " "FlagBackgroundHeat  = " "%c" "" " # flag for background heating in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagBGHEAT)); ncnt += fprintf(wp,"define " "Fixed Neighbor List = " "%c" "" " # Fixed Neighbor List (Y/N)\n" , ((simpar)->physics . gasinfo . flag . flagFixedneigh)); ncnt += fprintf(wp,"define " "Durant Factor       = " "%f" "" " # Durant factor (float)\n" , ((simpar)->physics . gasinfo . Durant)); ncnt += fprintf(wp,"################ SPH parameters ##################\n"); ncnt += fprintf(wp,"define " "Yp_SPH              = " "%f" "" " # Mass ratio of H to He (SPH)\n", ((simpar)->physics . gasinfo . Yp)); ncnt += fprintf(wp,"define " "Num_nearby_SPH      = " "%d" "" " # Number of neighbor particles (SPH)\n", ((simpar)->bp . sph . NumNear)); ncnt += fprintf(wp,"define " "Trad0_SPH           = " "%f" "" " # Current background radiation temperature (SPH)\n", ((simpar)->physics . gasinfo . Trad0)); ncnt += fprintf(wp,"define " "Gamma_SPH           = " "%f" "" " # Adiabatic index (SPH)\n", ((simpar)->physics . gasinfo . gamma)); ncnt += fprintf(wp,"define " "Alpha_SPH           = " "%f" "" "\n", ((simpar)->physics . gasinfo . alpha)); ncnt += fprintf(wp,"define " "Courant_SPH         = " "%f" "" " # Courant number (SPH)\n", ((simpar)->physics . gasinfo . Courant)); ncnt += fprintf(wp,"define " "UV Shielding GasDen = " "%f" "" " # UV shielding gas density\n", ((simpar)->physics . gasinfo . UVShieldDen)); ncnt += fprintf(wp,"define " "UV Shielding dGasDen= " "%f" "" " # Transition Width of UV shielding gas density\n", ((simpar)->physics . gasinfo . dUVShieldDen)); ncnt += fprintf(wp,"define " "Init Metallicity    = " "%f" "" " # Initial metallicity\n", ((simpar)->physics . gasinfo . initMetal)); ncnt += fprintf(wp,"define " "MIN_TEMP_SPH        = " "%f" "" " # Minimum temperature of gas particle\n", ((simpar)->physics . gasinfo . minTemp)); ncnt += fprintf(wp,"define " "Pow. of Const Neigh = " "%d" "" " # subPower of Constant Neighbor Approximation\n", ((simpar)->bp . sph . constneighborpower)); ncnt += fprintf(wp,"##################################################\n"); if(((simpar)->physics . gasinfo . flag . flagSF) == 'Y') { ncnt += fprintf(wp,"define " "SF_Virial_Den       = " "%f" "" " # Cosmic virial density criteria for SF\n", ((simpar)->physics . gasinfo . SFvirialDen)); ncnt += fprintf(wp,"define " "SF_Gas_Den          = " "%f" "" " # Gas density criterion for SF\n", ((simpar)->physics . gasinfo . SFgasden)); ncnt += fprintf(wp,"define " "SF_Temperature      = " "%f" "" " # Temperature criterion for SF\n", ((simpar)->physics . gasinfo . SFtemp)); ncnt += fprintf(wp,"define " "SF_Mstar            = " "%f" "" " # Maximum Number of stars per gas particle (SF)\n" , ((simpar)->physics . gasinfo . Mstar)); ncnt += fprintf(wp,"define " "SF_Cstar            = " "%f" "" " # Star formation efficiency (SF)\n" , ((simpar)->physics . gasinfo . Cstar)); } ncnt += fprintf(wp,"define " "Time Step Limiter   = " "%d" "" " # Step number in the timestep limiter\n" , ((simpar)->bp . sph . timesteplimiter)); } ncnt += fprintf(wp,"define " "FILE I/O Group Size = " "%d" "" " # FILE I/O Group Size\n", ((simpar)->fileio . WGroupSize)); ncnt += fprintf(wp,"##################################################\n");}while(0); ncnt += fprintf(wp,"define " "Zmin                = " "%f" "" " # Bottom z value of local domain slab\n", zmin); ncnt += fprintf(wp,"define " "Zmax                = " "%f" "" " # Top z value of local domain slab\n", zmax); ncnt += fprintf(wp,"define " "XYZ_Shift_Flag      = " "%d" "" "\n", ((simpar)->bp . xyzshiftflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"#End of Ascii Header\n");}while(0); headeroffset[i] = ftell(wp); fclose(wp); } } MPI_Bcast(headeroffset, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Status status; for(i=0;i<nfiles;i++){ nsave[i] = 0; for(j=0;j<((simpar)->mpi_info . myid);j++){ nsave[i] += tnsave[i +nfiles*j]; } headeroffset[i] += nsave[i] * sizeof(treesphparticletype); } int itag = 1; int isend, iget, WGroupSize = ((simpar)->fileio . WGroupSize); int src = ((simpar)->mpi_info . myid) - 1; int tgt = ((simpar)->mpi_info . myid) + 1; treesphparticletype *tmp; for(i=0;i<nfiles;i++) nsave[i] = 0; treesphparticletype pbuff[nfiles][(1<<20)]; if(( (((simpar)->mpi_info . myid))%(WGroupSize) ) != 0 ) MPI_Recv(&iget,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),src,itag,((simpar)->mpi_info . com),&status); for(i=0;i<((simpar)->bp . sph . np);i++){ if((((simpar)->bp . sph . p . tbp)[i]. u4if . Flag[0] & (1<<4) )){ treesphparticletype *tmp = (treesphparticletype *) ((char*)(((simpar)->bp . sph . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; pbuff[ifile][nsave[ifile]++] = *tmp; if(nsave[ifile]>= (1<<20)){ char outfile[190]; sprintf(outfile,"PreFoF." "SPH" ".%.5d.%.5d",nowstep, (int)ifile); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[ifile], 0); fwrite(pbuff[ifile], sizeof(treesphparticletype), nsave[ifile], wp); fclose(wp); headeroffset[ifile] += nsave[ifile]*sizeof(treesphparticletype); nsave[ifile] = 0; } } } for(i=0;i<nfiles;i++){ if(nsave[i] >0){ char outfile[190]; sprintf(outfile,"PreFoF." "SPH" "%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[i], 0); fwrite(pbuff[i], sizeof(treesphparticletype), nsave[i], wp); fclose(wp); headeroffset[i] += nsave[i]*sizeof(treesphparticletype); nsave[i] = 0; } } if(((((simpar)->mpi_info . myid))/(WGroupSize)) == ((tgt)/(WGroupSize)) && tgt < ((simpar)->mpi_info . nid)) MPI_Send(&isend,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),tgt,itag,((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));} while(0);

	do{ for(i=0;i<nfiles;i++) nsave[i] = 0; for(i=0;i<((simpar)->bp . star . np);i++) (((simpar)->bp . star . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); ptrdiff_t offset = sizeof(struct linkedlisttype*); for(i=0;i<((simpar)->bp . star . np);i++) if((((simpar)->bp . star . p . tbp)[i]. u4if . Flag[0] & (1<<4) )) { treestarparticletype *tmp = (treestarparticletype *) ((char*)(((simpar)->bp . star . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; nsave[ifile]++; } MPI_Gather(nsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), tnsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Bcast(tnsave, nfiles*nid, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); if(((simpar)->mpi_info . myid) == 0){ for(i=0;i<nfiles;i++){ char outfile[190]; sprintf(outfile,"PreFoF." "STAR" ".%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"w"); float zmin = i*zspacing; float zmax = (i+1)*zspacing; do{ int isize,ncnt = 0; ncnt += fprintf(wp,"#Start of the Ascii Header of the GOTPM Simulation\n"); ncnt += fprintf(wp,"##################################################\n"); do{ ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "SIM_MODEL           = " "%d" "" " # SIMULATION MODEL 0:Cosmos, 1:Galaxy, 3: KH, 4: 3D Blast, 5: 3D Bow Shock, 6: 3D RT\n", ((simpar)->simmodel . SimModel)); ncnt += fprintf(wp,"define " "External Force      = " "%c" "" " # External Force 0:No, 1:Yes\n", ((simpar)->simmodel . staticworld . externalforce)); ncnt += fprintf(wp,"define " "Gravity included?   = " "%c" "" " # Whether to include the gravity force\n", ((simpar)->physics . gravinfo . gravflag)); if(((simpar)->simmodel . SimModel) == Cosmos){ ncnt += fprintf(wp,"define " "INITIAL CONDITION   = " "%d" "" " # How to generate initial condtion, 1: Zeldovich, 2: 2nd order LPT\n", ((simpar)->simmodel . cosmos . ic . porder)); ncnt += fprintf(wp,"### Hubble parameter is in 100km/sec/Mpc.\n"); ncnt += fprintf(wp,"define " "Hubble              = " "%f" "" " # Hubble expansion parameter\n", ((simpar)->simmodel . cosmos . hubble)); ncnt += fprintf(wp,"define " "OmegaMatter0        = " "%f" "" " # Current Omega Matter\n", ((simpar)->simmodel . cosmos . omep)); ncnt += fprintf(wp,"define " "OmegaBaryon0        = " "%f" "" " # Current Omega Baryon\n", ((simpar)->simmodel . cosmos . omepb)); ncnt += fprintf(wp,"define " "OmegaLambda0        = " "%f" "" " # Current Omega Lambda\n", ((simpar)->simmodel . cosmos . omeplam)); ncnt += fprintf(wp,"define " "fNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . fNL)); ncnt += fprintf(wp,"define " "gNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . gNL)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### nPS is the power spectral index.\n"); ncnt += fprintf(wp,"### Bias factor is inverse of sigma_8.\n"); ncnt += fprintf(wp,"define " "nPS                 = " "%f" "" " # Spectral index\n", ((simpar)->simmodel . cosmos . npow)); ncnt += fprintf(wp,"define " "Bias                = " "%f" "" " # Bias factor, inverse of sigma_8\n", ((simpar)->simmodel . cosmos . bias8)); ncnt += fprintf(wp,"define " "Iseed               = " "%ld" "" "\n", ((simpar)->simmodel . cosmos . ic . iseed)); ncnt += fprintf(wp,"define " "Powerflag           = " "%d" "" "\n", ((simpar)->simmodel . cosmos . powreadflag)); ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); } else if(((simpar)->simmodel . SimModel) == Static){ ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); ncnt += fprintf(wp,"define " "TMass_Box_inMsun    = " "%f" "" " # Total mass in the simulation box (No expansion only)\n", ((simpar)->simmodel . staticworld . TotMass)); ncnt += fprintf(wp,"define " "Free Fall Time      = " "%lg" "" " # Free Fall time in sec. (No expansion only)\n", ((simpar)->simmodel . staticworld . ffTime)); } else if(((simpar)->simmodel . SimModel) == Blast){ ncnt += fprintf(wp,"define " "Blast Init Temp     = " "%f" "" " # Initial Temperature of the Blast Test\n", ((simpar)->simmodel . blast . InitTemp)); ncnt += fprintf(wp,"define " "Blast Constat MU    = " "%f" "" " # Constant value of MU of the Blast Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "Blast Exploding Temp= " "%f" "" " # Initial Temperature of the Explosion of the Blast Test\n", ((simpar)->simmodel . blast . BlastExplodingTemp)); } else if(((simpar)->simmodel . SimModel) == KH){ ncnt += fprintf(wp,"define " "KH    Init Temp     = " "%f" "" " # Initial Temperature of the KH Test\n", ((simpar)->simmodel . kh . InitTemp)); ncnt += fprintf(wp,"define " "KH    Constat MU    = " "%f" "" " # Constant value of MU of the KH Test\n", ((simpar)->physics . gasinfo . mu)); } else if(((simpar)->simmodel . SimModel) == BowShock){ ncnt += fprintf(wp,"define " "BS    Init Temp     = " "%f" "" " # Initial Temperature of the BowShock Test\n", ((simpar)->simmodel . bowshock . InitTemp)); ncnt += fprintf(wp,"define " "BS    Constat MU    = " "%f" "" " # Constant value of MU of the BowShcok Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "BS High Density     = " "%f" "" " # High Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . highden)); ncnt += fprintf(wp,"define " "BS Low Density      = " "%f" "" " # Low Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . lowden)); ncnt += fprintf(wp,"define " "BS Supersonic Vel.  = " "%f" "" " # Supersonic Velocity in the BowShcok Test\n", ((simpar)->simmodel . bowshock . velshock)); } else if(((simpar)->simmodel . SimModel) == RT){ ncnt += fprintf(wp,"define " "RT    Init Temp     = " "%f" "" " # Initial Temperature of the RT Test\n", ((simpar)->simmodel . rt . InitTemp)); ncnt += fprintf(wp,"define " "RT    Constat MU    = " "%f" "" " # Constant value of MU of the RT Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "RT High mass        = " "%f" "" " # High Density in the RT Test\n", ((simpar)->simmodel . rt . highmass)); ncnt += fprintf(wp,"define " "RT Low mass         = " "%f" "" " # Low Density in the RT Test\n", ((simpar)->simmodel . rt . lowmass)); ncnt += fprintf(wp,"define " "RT External Force   = " "%f" "" " # Supersonic Velocity in the RT Test\n", ((simpar)->simmodel . rt . force)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Amax                = " "%f" "" " # Maximum expansion factor/ final time\n", ((simpar)->timeinfo . amax)); ncnt += fprintf(wp,"define " "Anow                = " "%lg" "" " # Current expansion factor/ current time\n", ((simpar)->timeinfo . anow)); ncnt += fprintf(wp,"define " "Astep               = " "%lg" "" "\n", ((simpar)->timeinfo . astep)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### Nx, Ny, and Nz should be same & nspace should be int.\n"); ncnt += fprintf(wp,"define " "Nx                  = " "%ld" "" " # Number of grids along x axis\n", ((simpar)->fftwgrid . gridinfo . nx)); ncnt += fprintf(wp,"define " "Ny                  = " "%ld" "" " # Number of grids along y axis\n", ((simpar)->fftwgrid . gridinfo . ny)); ncnt += fprintf(wp,"define " "Nz                  = " "%ld" "" " # Number of grids along z axis\n", ((simpar)->fftwgrid . gridinfo . nz)); { int ddinfosize=sizeof(DoDeInfo); ncnt += fprintf(wp,"define " "DDINFO SIZE         = " "%d" "" "\n", ddinfosize); if(ddinfosize != sizeof(DoDeInfo)){ fprintf(stderr, "[file %s, line %d]: " "P%d has error in the size of DoDeInfo %d : %d\n", "PreFoF.c", 158, ((simpar)->mpi_info . myid), ddinfosize, sizeof(DoDeInfo)); exit(999); } } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Theta               = " "%f" "" " # Current cell opening angle in Tree correction\n", ((simpar)->physics . gravinfo . theta)); ncnt += fprintf(wp,"define " "EPSILON             = " "%f" "" " # Force Smoothing Length\n", ((simpar)->physics . gravinfo . epsilon)); ncnt += fprintf(wp,"define " "Nstep               = " "%d" "" " # Number of time steps\n", ((simpar)->timeinfo . nstep)); ncnt += fprintf(wp,"define " "Stepcount           = " "%d" "" " # Current time step number\n", ((simpar)->timeinfo . stepcount)); ncnt += fprintf(wp,"define " "Stepnum             = " "%d" "" "\n", ((simpar)->timeinfo . stepnum)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "rvfilename          = " "%s" "" "\n", ((simpar)->fileio . rvfilename)); ncnt += fprintf(wp,"define " "rvprefix            = " "%s" "" "\n", ((simpar)->fileio . rvprefix)); if(((simpar)->simmodel . cosmos . powreadflag)!=0){ ncnt += fprintf(wp,"define " "Powerfile           = " "%s" "" " # 0: No input 1: CAMB 2: Ascii\n", ((simpar)->simmodel . cosmos . powfilename)); if(((simpar)->simmodel . cosmos . powreadflag)==2) ncnt += fprintf(wp,"define " "AsciiPowerfile      = " "%s" "" "\n", ((simpar)->simmodel . cosmos . inpapkfilename)); } if(((simpar)->anim . flag) == 'Y') { ncnt += fprintf(wp,"define " "ViewerTrackFile     = " "%s" "" "\n", ((simpar)->anim . viewfilename)); } ncnt += fprintf(wp,"define " "PM_PreFoF_flag      = " "%c" "" "\n",  ((simpar)->control . PMPreFoFflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "GlacialFileName     = " "%s" "" "\n", ((simpar)->simmodel . cosmos . GlacialHeader)); ncnt += fprintf(wp,"define " "Np                  = " "%ld" "" "\n", ((simpar)->bp . npsum)); ncnt += fprintf(wp,"define " "DNp                 = " "%ld" "" "\n", ((simpar)->bp . dm . np)); ncnt += fprintf(wp,"define " "BNp                 = " "%ld" "" "\n", ((simpar)->bp . sph . np)); ncnt += fprintf(wp,"define " "SNp                 = " "%ld" "" "\n", ((simpar)->bp . star . np)); ncnt += fprintf(wp,"define " "ANp                 = " "%ld" "" "\n", ((simpar)->bp . agn . np)); ncnt += fprintf(wp,"define " "Particle Type       = " "%d" "" "\n", ((simpar)->bp . ptype)); ncnt += fprintf(wp,"define " "Ind Time Flag       = " "%c" "" "\n",  ((simpar)->timeinfo . indt . indTflag)); if(((simpar)->timeinfo . indt . indTflag)== 'Y') { ncnt += fprintf(wp,"define " "Nsub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstep)); ncnt += fprintf(wp,"define " "Isub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . isubstep)); ncnt += fprintf(wp,"################ INDIVIDUAL TIMESTEP  ############\n"); ncnt += fprintf(wp,"define " "Ind A Before        = " "%lg" "" "\n", ((simpar)->timeinfo . indt . abefore)); ncnt += fprintf(wp,"define " "Ind astep           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . astep)); ncnt += fprintf(wp,"define " "Ind da              = " "%lg" "" "\n", ((simpar)->timeinfo . indt . da)); ncnt += fprintf(wp,"define " "Ind nowTsubdiv      = " "%d" "" "\n", ((simpar)->timeinfo . indt . nowTsubdiv)); ncnt += fprintf(wp,"define " "Ind maxTsubpower    = " "%d" "" "\n", ((simpar)->timeinfo . indt . maxTsubpower)); ncnt += fprintf(wp,"define " "Ind flag 4 PreFoF   = " "%d" "" "\n", ((simpar)->timeinfo . iflagPreFoF)); ncnt += fprintf(wp,"define " "Ind flag 4 syncp    = " "%d" "" "\n", ((simpar)->timeinfo . iflagsyncpdata)); ncnt += fprintf(wp,"define " "Ind nsubstepcount   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstepcount)); ncnt += fprintf(wp,"define " "Ind tnumcount       = " "%d" "" "\n", ((simpar)->timeinfo . indt . tnumcount)); ncnt += fprintf(wp,"define " "Ind anext           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . anext)); ncnt += fprintf(wp,"################ SubStep Power  ############\n"); ncnt += fprintf(wp,"define " "SubStep fixed Flag  = " "%c" "" "\n", ((simpar)->timeinfo . indt . iflagfixedlist)); ncnt += fprintf(wp,"define " "SubStep sph power   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubsph)); ncnt += fprintf(wp,"define " "SubStep Nbody power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubnbody)); ncnt += fprintf(wp,"define " "SubStep Fixed power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubfixed)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"################    SPH FLAGS   ##################\n"); ncnt += fprintf(wp,"define " "Flag for SPH        = " "%c" "" " # flag for basic SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . sphflag)); if(((simpar)->physics . gasinfo . flag . sphflag)== 'Y'){ ncnt += fprintf(wp,"define " "Flag CONST MU       = " "%c" "" " # flag for Constant Mu in sph  (Y/N)\n", ((simpar)->physics . gasinfo . flag . constmu)); ncnt += fprintf(wp,"define " "FlagStarformation   = " "%c" "" " # flag for star formation in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSF)); ncnt += fprintf(wp,"define " "FlagCooling         = " "%c" "" " # flag for cooling in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagCOOL)); ncnt += fprintf(wp,"define " "FlagSNFeedBack      = " "%c" "" " # flag for supernovae feedback in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSNFB)); ncnt += fprintf(wp,"define " "FlagBackgroundHeat  = " "%c" "" " # flag for background heating in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagBGHEAT)); ncnt += fprintf(wp,"define " "Fixed Neighbor List = " "%c" "" " # Fixed Neighbor List (Y/N)\n" , ((simpar)->physics . gasinfo . flag . flagFixedneigh)); ncnt += fprintf(wp,"define " "Durant Factor       = " "%f" "" " # Durant factor (float)\n" , ((simpar)->physics . gasinfo . Durant)); ncnt += fprintf(wp,"################ SPH parameters ##################\n"); ncnt += fprintf(wp,"define " "Yp_SPH              = " "%f" "" " # Mass ratio of H to He (SPH)\n", ((simpar)->physics . gasinfo . Yp)); ncnt += fprintf(wp,"define " "Num_nearby_SPH      = " "%d" "" " # Number of neighbor particles (SPH)\n", ((simpar)->bp . sph . NumNear)); ncnt += fprintf(wp,"define " "Trad0_SPH           = " "%f" "" " # Current background radiation temperature (SPH)\n", ((simpar)->physics . gasinfo . Trad0)); ncnt += fprintf(wp,"define " "Gamma_SPH           = " "%f" "" " # Adiabatic index (SPH)\n", ((simpar)->physics . gasinfo . gamma)); ncnt += fprintf(wp,"define " "Alpha_SPH           = " "%f" "" "\n", ((simpar)->physics . gasinfo . alpha)); ncnt += fprintf(wp,"define " "Courant_SPH         = " "%f" "" " # Courant number (SPH)\n", ((simpar)->physics . gasinfo . Courant)); ncnt += fprintf(wp,"define " "UV Shielding GasDen = " "%f" "" " # UV shielding gas density\n", ((simpar)->physics . gasinfo . UVShieldDen)); ncnt += fprintf(wp,"define " "UV Shielding dGasDen= " "%f" "" " # Transition Width of UV shielding gas density\n", ((simpar)->physics . gasinfo . dUVShieldDen)); ncnt += fprintf(wp,"define " "Init Metallicity    = " "%f" "" " # Initial metallicity\n", ((simpar)->physics . gasinfo . initMetal)); ncnt += fprintf(wp,"define " "MIN_TEMP_SPH        = " "%f" "" " # Minimum temperature of gas particle\n", ((simpar)->physics . gasinfo . minTemp)); ncnt += fprintf(wp,"define " "Pow. of Const Neigh = " "%d" "" " # subPower of Constant Neighbor Approximation\n", ((simpar)->bp . sph . constneighborpower)); ncnt += fprintf(wp,"##################################################\n"); if(((simpar)->physics . gasinfo . flag . flagSF) == 'Y') { ncnt += fprintf(wp,"define " "SF_Virial_Den       = " "%f" "" " # Cosmic virial density criteria for SF\n", ((simpar)->physics . gasinfo . SFvirialDen)); ncnt += fprintf(wp,"define " "SF_Gas_Den          = " "%f" "" " # Gas density criterion for SF\n", ((simpar)->physics . gasinfo . SFgasden)); ncnt += fprintf(wp,"define " "SF_Temperature      = " "%f" "" " # Temperature criterion for SF\n", ((simpar)->physics . gasinfo . SFtemp)); ncnt += fprintf(wp,"define " "SF_Mstar            = " "%f" "" " # Maximum Number of stars per gas particle (SF)\n" , ((simpar)->physics . gasinfo . Mstar)); ncnt += fprintf(wp,"define " "SF_Cstar            = " "%f" "" " # Star formation efficiency (SF)\n" , ((simpar)->physics . gasinfo . Cstar)); } ncnt += fprintf(wp,"define " "Time Step Limiter   = " "%d" "" " # Step number in the timestep limiter\n" , ((simpar)->bp . sph . timesteplimiter)); } ncnt += fprintf(wp,"define " "FILE I/O Group Size = " "%d" "" " # FILE I/O Group Size\n", ((simpar)->fileio . WGroupSize)); ncnt += fprintf(wp,"##################################################\n");}while(0); ncnt += fprintf(wp,"define " "Zmin                = " "%f" "" " # Bottom z value of local domain slab\n", zmin); ncnt += fprintf(wp,"define " "Zmax                = " "%f" "" " # Top z value of local domain slab\n", zmax); ncnt += fprintf(wp,"define " "XYZ_Shift_Flag      = " "%d" "" "\n", ((simpar)->bp . xyzshiftflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"#End of Ascii Header\n");}while(0); headeroffset[i] = ftell(wp); fclose(wp); } } MPI_Bcast(headeroffset, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Status status; for(i=0;i<nfiles;i++){ nsave[i] = 0; for(j=0;j<((simpar)->mpi_info . myid);j++){ nsave[i] += tnsave[i +nfiles*j]; } headeroffset[i] += nsave[i] * sizeof(treestarparticletype); } int itag = 1; int isend, iget, WGroupSize = ((simpar)->fileio . WGroupSize); int src = ((simpar)->mpi_info . myid) - 1; int tgt = ((simpar)->mpi_info . myid) + 1; treestarparticletype *tmp; for(i=0;i<nfiles;i++) nsave[i] = 0; treestarparticletype pbuff[nfiles][(1<<20)]; if(( (((simpar)->mpi_info . myid))%(WGroupSize) ) != 0 ) MPI_Recv(&iget,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),src,itag,((simpar)->mpi_info . com),&status); for(i=0;i<((simpar)->bp . star . np);i++){ if((((simpar)->bp . star . p . tbp)[i]. u4if . Flag[0] & (1<<4) )){ treestarparticletype *tmp = (treestarparticletype *) ((char*)(((simpar)->bp . star . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; pbuff[ifile][nsave[ifile]++] = *tmp; if(nsave[ifile]>= (1<<20)){ char outfile[190]; sprintf(outfile,"PreFoF." "STAR" ".%.5d.%.5d",nowstep, (int)ifile); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[ifile], 0); fwrite(pbuff[ifile], sizeof(treestarparticletype), nsave[ifile], wp); fclose(wp); headeroffset[ifile] += nsave[ifile]*sizeof(treestarparticletype); nsave[ifile] = 0; } } } for(i=0;i<nfiles;i++){ if(nsave[i] >0){ char outfile[190]; sprintf(outfile,"PreFoF." "STAR" "%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[i], 0); fwrite(pbuff[i], sizeof(treestarparticletype), nsave[i], wp); fclose(wp); headeroffset[i] += nsave[i]*sizeof(treestarparticletype); nsave[i] = 0; } } if(((((simpar)->mpi_info . myid))/(WGroupSize)) == ((tgt)/(WGroupSize)) && tgt < ((simpar)->mpi_info . nid)) MPI_Send(&isend,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),tgt,itag,((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));} while(0);

	do{ for(i=0;i<nfiles;i++) nsave[i] = 0; for(i=0;i<((simpar)->bp . agn . np);i++) (((simpar)->bp . agn . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); ptrdiff_t offset = sizeof(struct linkedlisttype*); for(i=0;i<((simpar)->bp . agn . np);i++) if((((simpar)->bp . agn . p . tbp)[i]. u4if . Flag[0] & (1<<4) )) { treeagnparticletype *tmp = (treeagnparticletype *) ((char*)(((simpar)->bp . agn . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; nsave[ifile]++; } MPI_Gather(nsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), tnsave, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Bcast(tnsave, nfiles*nid, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); if(((simpar)->mpi_info . myid) == 0){ for(i=0;i<nfiles;i++){ char outfile[190]; sprintf(outfile,"PreFoF." "AGN" ".%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"w"); float zmin = i*zspacing; float zmax = (i+1)*zspacing; do{ int isize,ncnt = 0; ncnt += fprintf(wp,"#Start of the Ascii Header of the GOTPM Simulation\n"); ncnt += fprintf(wp,"##################################################\n"); do{ ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "SIM_MODEL           = " "%d" "" " # SIMULATION MODEL 0:Cosmos, 1:Galaxy, 3: KH, 4: 3D Blast, 5: 3D Bow Shock, 6: 3D RT\n", ((simpar)->simmodel . SimModel)); ncnt += fprintf(wp,"define " "External Force      = " "%c" "" " # External Force 0:No, 1:Yes\n", ((simpar)->simmodel . staticworld . externalforce)); ncnt += fprintf(wp,"define " "Gravity included?   = " "%c" "" " # Whether to include the gravity force\n", ((simpar)->physics . gravinfo . gravflag)); if(((simpar)->simmodel . SimModel) == Cosmos){ ncnt += fprintf(wp,"define " "INITIAL CONDITION   = " "%d" "" " # How to generate initial condtion, 1: Zeldovich, 2: 2nd order LPT\n", ((simpar)->simmodel . cosmos . ic . porder)); ncnt += fprintf(wp,"### Hubble parameter is in 100km/sec/Mpc.\n"); ncnt += fprintf(wp,"define " "Hubble              = " "%f" "" " # Hubble expansion parameter\n", ((simpar)->simmodel . cosmos . hubble)); ncnt += fprintf(wp,"define " "OmegaMatter0        = " "%f" "" " # Current Omega Matter\n", ((simpar)->simmodel . cosmos . omep)); ncnt += fprintf(wp,"define " "OmegaBaryon0        = " "%f" "" " # Current Omega Baryon\n", ((simpar)->simmodel . cosmos . omepb)); ncnt += fprintf(wp,"define " "OmegaLambda0        = " "%f" "" " # Current Omega Lambda\n", ((simpar)->simmodel . cosmos . omeplam)); ncnt += fprintf(wp,"define " "fNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . fNL)); ncnt += fprintf(wp,"define " "gNL                 = " "%f" "" "\n", ((simpar)->simmodel . cosmos . gNL)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### nPS is the power spectral index.\n"); ncnt += fprintf(wp,"### Bias factor is inverse of sigma_8.\n"); ncnt += fprintf(wp,"define " "nPS                 = " "%f" "" " # Spectral index\n", ((simpar)->simmodel . cosmos . npow)); ncnt += fprintf(wp,"define " "Bias                = " "%f" "" " # Bias factor, inverse of sigma_8\n", ((simpar)->simmodel . cosmos . bias8)); ncnt += fprintf(wp,"define " "Iseed               = " "%ld" "" "\n", ((simpar)->simmodel . cosmos . ic . iseed)); ncnt += fprintf(wp,"define " "Powerflag           = " "%d" "" "\n", ((simpar)->simmodel . cosmos . powreadflag)); ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); } else if(((simpar)->simmodel . SimModel) == Static){ ncnt += fprintf(wp,"define " "Boxsize(Mpc/h)      = " "%f" "" " # Simulation Box size in Mpc/h\n", ((simpar)->simmodel . simbox . boxsize)); ncnt += fprintf(wp,"define " "TMass_Box_inMsun    = " "%f" "" " # Total mass in the simulation box (No expansion only)\n", ((simpar)->simmodel . staticworld . TotMass)); ncnt += fprintf(wp,"define " "Free Fall Time      = " "%lg" "" " # Free Fall time in sec. (No expansion only)\n", ((simpar)->simmodel . staticworld . ffTime)); } else if(((simpar)->simmodel . SimModel) == Blast){ ncnt += fprintf(wp,"define " "Blast Init Temp     = " "%f" "" " # Initial Temperature of the Blast Test\n", ((simpar)->simmodel . blast . InitTemp)); ncnt += fprintf(wp,"define " "Blast Constat MU    = " "%f" "" " # Constant value of MU of the Blast Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "Blast Exploding Temp= " "%f" "" " # Initial Temperature of the Explosion of the Blast Test\n", ((simpar)->simmodel . blast . BlastExplodingTemp)); } else if(((simpar)->simmodel . SimModel) == KH){ ncnt += fprintf(wp,"define " "KH    Init Temp     = " "%f" "" " # Initial Temperature of the KH Test\n", ((simpar)->simmodel . kh . InitTemp)); ncnt += fprintf(wp,"define " "KH    Constat MU    = " "%f" "" " # Constant value of MU of the KH Test\n", ((simpar)->physics . gasinfo . mu)); } else if(((simpar)->simmodel . SimModel) == BowShock){ ncnt += fprintf(wp,"define " "BS    Init Temp     = " "%f" "" " # Initial Temperature of the BowShock Test\n", ((simpar)->simmodel . bowshock . InitTemp)); ncnt += fprintf(wp,"define " "BS    Constat MU    = " "%f" "" " # Constant value of MU of the BowShcok Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "BS High Density     = " "%f" "" " # High Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . highden)); ncnt += fprintf(wp,"define " "BS Low Density      = " "%f" "" " # Low Density in the BowShcok Test\n", ((simpar)->simmodel . bowshock . lowden)); ncnt += fprintf(wp,"define " "BS Supersonic Vel.  = " "%f" "" " # Supersonic Velocity in the BowShcok Test\n", ((simpar)->simmodel . bowshock . velshock)); } else if(((simpar)->simmodel . SimModel) == RT){ ncnt += fprintf(wp,"define " "RT    Init Temp     = " "%f" "" " # Initial Temperature of the RT Test\n", ((simpar)->simmodel . rt . InitTemp)); ncnt += fprintf(wp,"define " "RT    Constat MU    = " "%f" "" " # Constant value of MU of the RT Test\n", ((simpar)->physics . gasinfo . mu)); ncnt += fprintf(wp,"define " "RT High mass        = " "%f" "" " # High Density in the RT Test\n", ((simpar)->simmodel . rt . highmass)); ncnt += fprintf(wp,"define " "RT Low mass         = " "%f" "" " # Low Density in the RT Test\n", ((simpar)->simmodel . rt . lowmass)); ncnt += fprintf(wp,"define " "RT External Force   = " "%f" "" " # Supersonic Velocity in the RT Test\n", ((simpar)->simmodel . rt . force)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Amax                = " "%f" "" " # Maximum expansion factor/ final time\n", ((simpar)->timeinfo . amax)); ncnt += fprintf(wp,"define " "Anow                = " "%lg" "" " # Current expansion factor/ current time\n", ((simpar)->timeinfo . anow)); ncnt += fprintf(wp,"define " "Astep               = " "%lg" "" "\n", ((simpar)->timeinfo . astep)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"### Nx, Ny, and Nz should be same & nspace should be int.\n"); ncnt += fprintf(wp,"define " "Nx                  = " "%ld" "" " # Number of grids along x axis\n", ((simpar)->fftwgrid . gridinfo . nx)); ncnt += fprintf(wp,"define " "Ny                  = " "%ld" "" " # Number of grids along y axis\n", ((simpar)->fftwgrid . gridinfo . ny)); ncnt += fprintf(wp,"define " "Nz                  = " "%ld" "" " # Number of grids along z axis\n", ((simpar)->fftwgrid . gridinfo . nz)); { int ddinfosize=sizeof(DoDeInfo); ncnt += fprintf(wp,"define " "DDINFO SIZE         = " "%d" "" "\n", ddinfosize); if(ddinfosize != sizeof(DoDeInfo)){ fprintf(stderr, "[file %s, line %d]: " "P%d has error in the size of DoDeInfo %d : %d\n", "PreFoF.c", 160, ((simpar)->mpi_info . myid), ddinfosize, sizeof(DoDeInfo)); exit(999); } } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "Theta               = " "%f" "" " # Current cell opening angle in Tree correction\n", ((simpar)->physics . gravinfo . theta)); ncnt += fprintf(wp,"define " "EPSILON             = " "%f" "" " # Force Smoothing Length\n", ((simpar)->physics . gravinfo . epsilon)); ncnt += fprintf(wp,"define " "Nstep               = " "%d" "" " # Number of time steps\n", ((simpar)->timeinfo . nstep)); ncnt += fprintf(wp,"define " "Stepcount           = " "%d" "" " # Current time step number\n", ((simpar)->timeinfo . stepcount)); ncnt += fprintf(wp,"define " "Stepnum             = " "%d" "" "\n", ((simpar)->timeinfo . stepnum)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "rvfilename          = " "%s" "" "\n", ((simpar)->fileio . rvfilename)); ncnt += fprintf(wp,"define " "rvprefix            = " "%s" "" "\n", ((simpar)->fileio . rvprefix)); if(((simpar)->simmodel . cosmos . powreadflag)!=0){ ncnt += fprintf(wp,"define " "Powerfile           = " "%s" "" " # 0: No input 1: CAMB 2: Ascii\n", ((simpar)->simmodel . cosmos . powfilename)); if(((simpar)->simmodel . cosmos . powreadflag)==2) ncnt += fprintf(wp,"define " "AsciiPowerfile      = " "%s" "" "\n", ((simpar)->simmodel . cosmos . inpapkfilename)); } if(((simpar)->anim . flag) == 'Y') { ncnt += fprintf(wp,"define " "ViewerTrackFile     = " "%s" "" "\n", ((simpar)->anim . viewfilename)); } ncnt += fprintf(wp,"define " "PM_PreFoF_flag      = " "%c" "" "\n",  ((simpar)->control . PMPreFoFflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"define " "GlacialFileName     = " "%s" "" "\n", ((simpar)->simmodel . cosmos . GlacialHeader)); ncnt += fprintf(wp,"define " "Np                  = " "%ld" "" "\n", ((simpar)->bp . npsum)); ncnt += fprintf(wp,"define " "DNp                 = " "%ld" "" "\n", ((simpar)->bp . dm . np)); ncnt += fprintf(wp,"define " "BNp                 = " "%ld" "" "\n", ((simpar)->bp . sph . np)); ncnt += fprintf(wp,"define " "SNp                 = " "%ld" "" "\n", ((simpar)->bp . star . np)); ncnt += fprintf(wp,"define " "ANp                 = " "%ld" "" "\n", ((simpar)->bp . agn . np)); ncnt += fprintf(wp,"define " "Particle Type       = " "%d" "" "\n", ((simpar)->bp . ptype)); ncnt += fprintf(wp,"define " "Ind Time Flag       = " "%c" "" "\n",  ((simpar)->timeinfo . indt . indTflag)); if(((simpar)->timeinfo . indt . indTflag)== 'Y') { ncnt += fprintf(wp,"define " "Nsub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstep)); ncnt += fprintf(wp,"define " "Isub                = " "%d" "" "\n", ((simpar)->timeinfo . indt . isubstep)); ncnt += fprintf(wp,"################ INDIVIDUAL TIMESTEP  ############\n"); ncnt += fprintf(wp,"define " "Ind A Before        = " "%lg" "" "\n", ((simpar)->timeinfo . indt . abefore)); ncnt += fprintf(wp,"define " "Ind astep           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . astep)); ncnt += fprintf(wp,"define " "Ind da              = " "%lg" "" "\n", ((simpar)->timeinfo . indt . da)); ncnt += fprintf(wp,"define " "Ind nowTsubdiv      = " "%d" "" "\n", ((simpar)->timeinfo . indt . nowTsubdiv)); ncnt += fprintf(wp,"define " "Ind maxTsubpower    = " "%d" "" "\n", ((simpar)->timeinfo . indt . maxTsubpower)); ncnt += fprintf(wp,"define " "Ind flag 4 PreFoF   = " "%d" "" "\n", ((simpar)->timeinfo . iflagPreFoF)); ncnt += fprintf(wp,"define " "Ind flag 4 syncp    = " "%d" "" "\n", ((simpar)->timeinfo . iflagsyncpdata)); ncnt += fprintf(wp,"define " "Ind nsubstepcount   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubstepcount)); ncnt += fprintf(wp,"define " "Ind tnumcount       = " "%d" "" "\n", ((simpar)->timeinfo . indt . tnumcount)); ncnt += fprintf(wp,"define " "Ind anext           = " "%lg" "" "\n", ((simpar)->timeinfo . indt . anext)); ncnt += fprintf(wp,"################ SubStep Power  ############\n"); ncnt += fprintf(wp,"define " "SubStep fixed Flag  = " "%c" "" "\n", ((simpar)->timeinfo . indt . iflagfixedlist)); ncnt += fprintf(wp,"define " "SubStep sph power   = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubsph)); ncnt += fprintf(wp,"define " "SubStep Nbody power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubnbody)); ncnt += fprintf(wp,"define " "SubStep Fixed power = " "%d" "" "\n", ((simpar)->timeinfo . indt . nsubfixed)); } ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"################    SPH FLAGS   ##################\n"); ncnt += fprintf(wp,"define " "Flag for SPH        = " "%c" "" " # flag for basic SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . sphflag)); if(((simpar)->physics . gasinfo . flag . sphflag)== 'Y'){ ncnt += fprintf(wp,"define " "Flag CONST MU       = " "%c" "" " # flag for Constant Mu in sph  (Y/N)\n", ((simpar)->physics . gasinfo . flag . constmu)); ncnt += fprintf(wp,"define " "FlagStarformation   = " "%c" "" " # flag for star formation in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSF)); ncnt += fprintf(wp,"define " "FlagCooling         = " "%c" "" " # flag for cooling in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagCOOL)); ncnt += fprintf(wp,"define " "FlagSNFeedBack      = " "%c" "" " # flag for supernovae feedback in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagSNFB)); ncnt += fprintf(wp,"define " "FlagBackgroundHeat  = " "%c" "" " # flag for background heating in SPH (Y/N)\n", ((simpar)->physics . gasinfo . flag . flagBGHEAT)); ncnt += fprintf(wp,"define " "Fixed Neighbor List = " "%c" "" " # Fixed Neighbor List (Y/N)\n" , ((simpar)->physics . gasinfo . flag . flagFixedneigh)); ncnt += fprintf(wp,"define " "Durant Factor       = " "%f" "" " # Durant factor (float)\n" , ((simpar)->physics . gasinfo . Durant)); ncnt += fprintf(wp,"################ SPH parameters ##################\n"); ncnt += fprintf(wp,"define " "Yp_SPH              = " "%f" "" " # Mass ratio of H to He (SPH)\n", ((simpar)->physics . gasinfo . Yp)); ncnt += fprintf(wp,"define " "Num_nearby_SPH      = " "%d" "" " # Number of neighbor particles (SPH)\n", ((simpar)->bp . sph . NumNear)); ncnt += fprintf(wp,"define " "Trad0_SPH           = " "%f" "" " # Current background radiation temperature (SPH)\n", ((simpar)->physics . gasinfo . Trad0)); ncnt += fprintf(wp,"define " "Gamma_SPH           = " "%f" "" " # Adiabatic index (SPH)\n", ((simpar)->physics . gasinfo . gamma)); ncnt += fprintf(wp,"define " "Alpha_SPH           = " "%f" "" "\n", ((simpar)->physics . gasinfo . alpha)); ncnt += fprintf(wp,"define " "Courant_SPH         = " "%f" "" " # Courant number (SPH)\n", ((simpar)->physics . gasinfo . Courant)); ncnt += fprintf(wp,"define " "UV Shielding GasDen = " "%f" "" " # UV shielding gas density\n", ((simpar)->physics . gasinfo . UVShieldDen)); ncnt += fprintf(wp,"define " "UV Shielding dGasDen= " "%f" "" " # Transition Width of UV shielding gas density\n", ((simpar)->physics . gasinfo . dUVShieldDen)); ncnt += fprintf(wp,"define " "Init Metallicity    = " "%f" "" " # Initial metallicity\n", ((simpar)->physics . gasinfo . initMetal)); ncnt += fprintf(wp,"define " "MIN_TEMP_SPH        = " "%f" "" " # Minimum temperature of gas particle\n", ((simpar)->physics . gasinfo . minTemp)); ncnt += fprintf(wp,"define " "Pow. of Const Neigh = " "%d" "" " # subPower of Constant Neighbor Approximation\n", ((simpar)->bp . sph . constneighborpower)); ncnt += fprintf(wp,"##################################################\n"); if(((simpar)->physics . gasinfo . flag . flagSF) == 'Y') { ncnt += fprintf(wp,"define " "SF_Virial_Den       = " "%f" "" " # Cosmic virial density criteria for SF\n", ((simpar)->physics . gasinfo . SFvirialDen)); ncnt += fprintf(wp,"define " "SF_Gas_Den          = " "%f" "" " # Gas density criterion for SF\n", ((simpar)->physics . gasinfo . SFgasden)); ncnt += fprintf(wp,"define " "SF_Temperature      = " "%f" "" " # Temperature criterion for SF\n", ((simpar)->physics . gasinfo . SFtemp)); ncnt += fprintf(wp,"define " "SF_Mstar            = " "%f" "" " # Maximum Number of stars per gas particle (SF)\n" , ((simpar)->physics . gasinfo . Mstar)); ncnt += fprintf(wp,"define " "SF_Cstar            = " "%f" "" " # Star formation efficiency (SF)\n" , ((simpar)->physics . gasinfo . Cstar)); } ncnt += fprintf(wp,"define " "Time Step Limiter   = " "%d" "" " # Step number in the timestep limiter\n" , ((simpar)->bp . sph . timesteplimiter)); } ncnt += fprintf(wp,"define " "FILE I/O Group Size = " "%d" "" " # FILE I/O Group Size\n", ((simpar)->fileio . WGroupSize)); ncnt += fprintf(wp,"##################################################\n");}while(0); ncnt += fprintf(wp,"define " "Zmin                = " "%f" "" " # Bottom z value of local domain slab\n", zmin); ncnt += fprintf(wp,"define " "Zmax                = " "%f" "" " # Top z value of local domain slab\n", zmax); ncnt += fprintf(wp,"define " "XYZ_Shift_Flag      = " "%d" "" "\n", ((simpar)->bp . xyzshiftflag)); ncnt += fprintf(wp,"##################################################\n"); ncnt += fprintf(wp,"#End of Ascii Header\n");}while(0); headeroffset[i] = ftell(wp); fclose(wp); } } MPI_Bcast(headeroffset, nfiles, ((MPI_Datatype) ((void *) &(ompi_mpi_long))), 0, ((simpar)->mpi_info . com)); MPI_Status status; for(i=0;i<nfiles;i++){ nsave[i] = 0; for(j=0;j<((simpar)->mpi_info . myid);j++){ nsave[i] += tnsave[i +nfiles*j]; } headeroffset[i] += nsave[i] * sizeof(treeagnparticletype); } int itag = 1; int isend, iget, WGroupSize = ((simpar)->fileio . WGroupSize); int src = ((simpar)->mpi_info . myid) - 1; int tgt = ((simpar)->mpi_info . myid) + 1; treeagnparticletype *tmp; for(i=0;i<nfiles;i++) nsave[i] = 0; treeagnparticletype pbuff[nfiles][(1<<20)]; if(( (((simpar)->mpi_info . myid))%(WGroupSize) ) != 0 ) MPI_Recv(&iget,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),src,itag,((simpar)->mpi_info . com),&status); for(i=0;i<((simpar)->bp . agn . np);i++){ if((((simpar)->bp . agn . p . tbp)[i]. u4if . Flag[0] & (1<<4) )){ treeagnparticletype *tmp = (treeagnparticletype *) ((char*)(((simpar)->bp . agn . p . tbp)+i) + offset); ptrdiff_t ifile = ((tmp)->z)/zspacing; pbuff[ifile][nsave[ifile]++] = *tmp; if(nsave[ifile]>= (1<<20)){ char outfile[190]; sprintf(outfile,"PreFoF." "AGN" ".%.5d.%.5d",nowstep, (int)ifile); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[ifile], 0); fwrite(pbuff[ifile], sizeof(treeagnparticletype), nsave[ifile], wp); fclose(wp); headeroffset[ifile] += nsave[ifile]*sizeof(treeagnparticletype); nsave[ifile] = 0; } } } for(i=0;i<nfiles;i++){ if(nsave[i] >0){ char outfile[190]; sprintf(outfile,"PreFoF." "AGN" "%.5d.%.5d",nowstep, (int)i); FILE *wp = fopen(outfile,"r+"); fseek(wp, headeroffset[i], 0); fwrite(pbuff[i], sizeof(treeagnparticletype), nsave[i], wp); fclose(wp); headeroffset[i] += nsave[i]*sizeof(treeagnparticletype); nsave[i] = 0; } } if(((((simpar)->mpi_info . myid))/(WGroupSize)) == ((tgt)/(WGroupSize)) && tgt < ((simpar)->mpi_info . nid)) MPI_Send(&isend,1,((MPI_Datatype) ((void *) &(ompi_mpi_int))),tgt,itag,((MPI_Comm) ((void *) &(ompi_mpi_comm_world))));} while(0);
}

size_t CountHaloCandidates(SimParameters *simpar, size_t nhalo, HaloBound *halo,
		FoFTPtlStruct *point, size_t npoint){
	float fof_link = ( (simpar)->virial . fof_link );
	float xf,yf,zf;
	xf = 4.L*0.5L;
	yf = 4.L*0.5L;
	zf = 4.L*0.5L;
	size_t i, mh;
	FoFTPtlStruct *tmp;
	size_t localnp;
	for(i=0;i<nhalo;i++){
		halo[i].xmin = halo[i].ymin = halo[i].zmin = 1.E20;
		halo[i].xmax = halo[i].ymax = halo[i].zmax = -1.E20;
		halo[i].dumpflag = 0;
		halo[i].sibling = ((void *)0);
		halo[i].nmem = 0;
	}
	for(i=0;i<npoint; i++){
		mh = point[i].haloindx;
		halo[mh].nmem ++;
		tmp = halo[mh].sibling;
		halo[mh].sibling = &(point[i]);
		point[i].sibling = tmp;
		halo[mh].xmin = ( (halo[mh]. xmin)<(point[i]. x) ? (halo[mh]. xmin):(point[i]. x) );
		halo[mh].ymin = ( (halo[mh]. ymin)<(point[i]. y) ? (halo[mh]. ymin):(point[i]. y) );
		halo[mh].zmin = ( (halo[mh]. zmin)<(point[i]. z) ? (halo[mh]. zmin):(point[i]. z) );
		halo[mh].xmax = ( (halo[mh]. xmax)>(point[i]. x) ? (halo[mh]. xmax):(point[i]. x) );
		halo[mh].ymax = ( (halo[mh]. ymax)>(point[i]. y) ? (halo[mh]. ymax):(point[i]. y) );
		halo[mh].zmax = ( (halo[mh]. zmax)>(point[i]. z) ? (halo[mh]. zmax):(point[i]. z) );
	}
	localnp = 0;
	for(i=0;i<nhalo;i++){
		if(halo[i].xmin >fof_link && halo[i].ymin > fof_link && halo[i].zmin >fof_link &&
				halo[i].xmax < xf-fof_link && halo[i].ymax < yf-fof_link && halo[i].zmax <zf-fof_link){
			if(halo[i].nmem >= ( (simpar)->virial . minNum )){
				halo[i].dumpflag = 1;
				localnp += halo[i].nmem;
			}
		}
		else {
			halo[i].dumpflag = 1;
			localnp += halo[i].nmem;
		}
	}
	for(i=0;i<nhalo;i++){
		if(halo[i].dumpflag){
			tmp=halo[i].sibling;
			while(tmp){
				linkedlisttype *p;
				p = (linkedlisttype*)(tmp->bp);
				((p)->u4if . Flag[0] |= (1<<4));
				tmp = tmp->sibling;
			}
		}
	}
	return localnp;
}

void PreFoF(SimParameters *simpar){
	ptrdiff_t nx = ((simpar)->fftwgrid . gridinfo . nx);
	ptrdiff_t ny = ((simpar)->fftwgrid . gridinfo . ny);
	ptrdiff_t nz = ((simpar)->fftwgrid . gridinfo . nz);

	float xmin,ymin,zmin,xmax,ymax,zmax;


	






 
	xmin = ( (simpar)->simmodel . simbox . dm_ddinfo[((simpar)->simmodel . simbox . nddinfo)-1]. lgroup . r . rmin[0]);
	ymin = ( (simpar)->simmodel . simbox . dm_ddinfo[((simpar)->simmodel . simbox . nddinfo)-1]. lgroup . r . rmin[1]);
	zmin = ( (simpar)->simmodel . simbox . dm_ddinfo[((simpar)->simmodel . simbox . nddinfo)-1]. lgroup . r . rmin[2]);
	xmax = ( (simpar)->simmodel . simbox . dm_ddinfo[((simpar)->simmodel . simbox . nddinfo)-1]. lgroup . r . rmax[0]);
	ymax = ( (simpar)->simmodel . simbox . dm_ddinfo[((simpar)->simmodel . simbox . nddinfo)-1]. lgroup . r . rmax[1]);
	zmax = ( (simpar)->simmodel . simbox . dm_ddinfo[((simpar)->simmodel . simbox . nddinfo)-1]. lgroup . r . rmax[2]);



	do{ do{ size_t i,np = ((simpar)->bp . dm . np); for(i=0;i<np;i++){ (((simpar)->bp . dm . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); }}while(0); do{ size_t i,np = ((simpar)->bp . sph . np); for(i=0;i<np;i++){ (((simpar)->bp . sph . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); }}while(0); do{ size_t i,np = ((simpar)->bp . star . np); for(i=0;i<np;i++){ (((simpar)->bp . star . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); }}while(0); do{ size_t i,np = ((simpar)->bp . agn . np); for(i=0;i<np;i++){ (((simpar)->bp . agn . p . tbp)[i]. u4if . Flag[0] &= (~(1<<4)) ); }}while(0);}while(0);



	float fof_link = ( (simpar)->virial . fof_link );
	ptrdiff_t mx,my,mz;

	mx = ceil((xmax-xmin)/4.L);
	my = ceil((ymax-ymin)/4.L);
	mz = ceil((zmax-zmin)/4.L);


	( (simpar)->linkedcell . BasicCell) = (TreeLinkedCell*)malloc(sizeof(TreeLinkedCell)*mx*my*mz);
	BuildLinkedList(simpar,mx,my,mz, xmin,ymin,zmin);

	size_t ii;



	for(ii=0;ii<mx*my*mz;ii++){
		size_t iz = ii/(mx*my); 
		size_t iy = (ii % (mx*my)) / mx;
		size_t ix = (ii % mx);
		FoFTPtlStruct *point;
		ptrdiff_t npoint = Dump2FoFPtl(simpar, ix,iy,iz, mx,my,mz, &point);
		FoFPosition *linked = (FoFPosition*)malloc(sizeof(FoFPosition)*npoint);
		
		if(npoint > 0){
			size_t i,nnode = npoint;
			FoFTStruct *TREECELL = (FoFTStruct*)malloc(sizeof(FoFTStruct)*nnode);
			FoF_Make_Tree(TREECELL, nnode, point, npoint, 1);
			HaloBound *halo = (HaloBound*)malloc(sizeof(HaloBound)*npoint);
			size_t nhalo = 0;
			for(i=0;i<npoint;i++){
				if(point[i].included == 0){
					size_t num;
					FoFPosition p;
					p.x = point[i].x;
					p.y = point[i].y;
					p.z = point[i].z;
					num = pnew_fof_link(&p, TREECELL, fof_link, linked, nhalo);
					nhalo ++;
				}
			}
			free(TREECELL);
			CountHaloCandidates(simpar, nhalo, halo, point, npoint);
			free(halo);
			free(linked);
			free(point);
		}
	}
	DumpFoFP2Disk(simpar);
}

make[1]: Leaving directory `/scratch/kjhan/AdvancedEunha/Eunha.A1/Cosmos'
